{"version":3,"sources":["utils/Cache.js","utils/Promise.js","utils/Torrents.js","images/av1.jpg","hooks/useOnlineStatus.js","common/TipModal/index.js","images/banner-bg.jpg","images/lightning-logo.svg","common/Divider/index.js","pages/User/index.js"],"names":["getCachedFile","fileName","a","FileCache","_init","Promise","resolve","reject","init","then","console","log","persist","status","persistent","load","cachedFile","createURL","warn","renderCachedFile","fileURL","selector","elements","document","querySelectorAll","length","forEach","element","src","muted","autoplay","saveFile","buffer","save","runSerial","tasks","result","task","supportedFileTypes","formats","options","_getFileType","file","extension","name","split","slice","Object","entries","filter","includes","supportedFileType","fileType","webTorrentClient","initializeClient","WebTorrent","default","attachMedia","posts","torrentMode","all","map","post","contentItems","id","supportedItems","item","type","key","get","magnetURI","add","torrent","files","target","destroy","torrentElements","torrentElement","contentURL","decodeURIComponent","replace","format","toLowerCase","endsWith","compatibleURL","setAttribute","renderTo","on","getBlob","err","blob","querySelector","dataset","played","torrentTasks","reduce","torrents","module","exports","useOnlineStatus","publicKey","dispatch","useDispatch","profile","useSelector","user","useState","lastSeenApp","setLastSeenApp","lastSeenNode","setLastSeenNode","isOnlineApp","setIsOnlineApp","isOnlineNode","setIsOnlineNode","onlineCheckTimer","setOnlineCheckTimer","updateUserStatus","useCallback","onlineThreshold","Moment","utc","subtract","isSameOrAfter","useEffect","clearTimeout","timer","setTimeout","lastSeenAppListener","listenPath","path","gunPointer","gunUser","callback","event","lastSeenNodeListener","off","TipModalContent","React","lazy","TipModal","props","modalOpen","tip","close","closeModal","loader","useMemo","text","className","onClick","fallback","Divider","Post","SharedPost","UserPage","params","useParams","userId","wall","setUserLoading","wallLoading","setWallLoading","fetchUserData","resetUserData","getUserProfile","getUserHeader","getUserAvatar","error","fetchUserWall","resetUserWall","getUserWall","openTipModal","openModal","targetType","initializeUserWall","postId","getPinnedPost","displayNameListener","updateUserProfile","displayName","bioListener","bio","username","alias","renderPost","avatar","av1","Loader","postID","postPublicKey","originalAuthor","sharedPostId","sharedTimestamp","date","sharerAvatar","sharerPublicKey","sharerUsername","pinned","timestamp","page","tipValue","tipCounter","style","backgroundImage","header","defaultBanner","color","opacity","cursor","data-tip","shockLogo","alt","backgroundColor","effect","pinnedPost"],"mappings":"gOAoBaA,EAAa,uCAAG,WAAMC,GAAN,eAAAC,EAAA,kEAEpBC,IAAUC,MAFU,gCAf3B,IAAIC,SAAQ,SAACC,EAASC,GACpBJ,IAAUK,KAJS,oBAKhBC,MAAK,WAEJ,OADAC,QAAQC,IAAI,2BACLR,IAAUS,aAElBH,MAAK,SAAAI,GACAA,EAAOC,WACTR,EAAQO,GAERN,EAAOM,SAKY,uBAMAV,IAAUY,KAAKd,GANf,cAMnBe,EANmB,yBAOlBA,EAAWC,aAPO,yCASzBP,QAAQQ,KAAR,MATyB,mBAUlB,GAVkB,0DAAH,sDAcbC,EAAmB,SAACC,EAASC,GACxC,IAAMC,EAAWC,SAASC,iBAAiBH,GAQ3C,OAPIC,GAAYA,EAASG,QACvBH,EAASI,SAAQ,SAAAC,GACfA,EAAQC,IAAMR,EACdO,EAAQE,OAAQ,EAChBF,EAAQG,UAAW,OAGdR,KAAcA,EAASG,QAGrBM,EAAW,SAAC9B,EAAU+B,GACjC,OAAO7B,IAAU8B,KAAKhC,EAAU+B,IC/CrBE,EAAY,SAAAC,GACvB,IAAIC,EAAS/B,QAAQC,UAIrB,OAHA6B,EAAMT,SAAQ,SAAAW,GACZD,EAASA,EAAO3B,MAAK,kBAAM4B,UAEtBD,GCFHE,EAAqB,CACzB,iBAAkB,CAChBC,QAAS,CAAC,MAAO,QACjBZ,QAAS,QACTa,QAAS,CACPV,UAAU,EACVD,OAAO,IAGX,iBAAkB,CAChBU,QAAS,CAAC,MAAO,MAAO,OAAQ,QAChCZ,QAAS,MACTa,QAAS,KAIPC,EAAe,SAAAC,GAAS,IAAD,IACrBC,EAAS,UAAGD,EAAKE,YAAR,iBAAG,EAAWC,MAAM,YAApB,aAAG,EAAuBC,OAAO,GAAG,GADxB,EAECC,OAAOC,QAAQV,GAAoBW,QAC7D,oDAA6BV,QAAQW,SAASP,MADzCQ,EAFoB,oBAM3B,GAAIA,EAAmB,CAAC,IAAD,cACIA,EADJ,GACdP,EADc,KACRQ,EADQ,KAErB,OAAO,aACLR,QACGQ,GAIP,OAAO,MAGEC,EAAmB,KAEjBC,EAAgB,uCAAG,4BAAApD,EAAA,yDACzBmD,EADyB,gCAEH,wDAFG,OAEtBE,EAFsB,OAG5BF,EAAmB,IAAIE,EAAWC,QAHN,gCAMvBH,GANuB,2CAAH,qDAShBI,EAAW,uCAAG,8CAAAvD,EAAA,6DAAOwD,EAAP,+BAAe,GAAIC,IAAnB,0CACEtD,QAAQuD,IACjCF,EAAMG,IAAN,uCAAU,WAAMC,GAAN,qBAAA5D,EAAA,yDACA6D,EAAqBD,EAArBC,aAAcC,EAAOF,EAAPE,GAChBC,EAAiBlB,OAAOC,QAAQe,GAAcd,QAClD,gBAAIiB,EAAJ,2BAAc5B,EAAmB4B,EAAKC,SAHhC,yCAOC,IAPD,uBAUuBb,IAVvB,cAUFD,EAVE,yBAYDY,EAAeJ,KACpB,mCAAEO,EAAF,KAAOF,EAAP,YACE,kBACE,IAAI7D,SAAQ,SAAAC,GACY+C,EAAiBgB,IAAIH,EAAKI,WAG9ChE,GAAQ,GAIV+C,EAAiBkB,IAAIL,EAAKI,UAA1B,uCAAqC,WAAME,GAAN,eAAAtE,EAAA,sDAEnCI,GAAQ,IAEFmE,EAAQD,EAAQC,MAAMxB,QAAO,SAAAP,GAAS,IAAD,IACnCC,EAAS,UAAGD,EAAKE,YAAR,iBAAG,EAAWC,MAAM,YAApB,aAAG,EAAuBC,OAAO,GAAG,GAC7CK,EAAoBJ,OAAOC,QAC/BV,GACAW,QAAO,uCACCV,QAAQW,SAASP,MACzB,GACF,QAAIQ,GAAmB,YACAA,EADA,MAEIZ,QAAQW,SAASP,OAMxCkB,IAAN,uCAAU,WAAMnB,GAAN,2BAAAxC,EAAA,yDACFkD,EAAWX,EAAaC,GADtB,wDAOFzC,EAPE,UAOY+D,EAPZ,YAOkBI,EAPlB,YAOyB1B,EAAKE,MAEhCjB,EAAUyB,EAASzB,QACnB+C,EAVE,UAUU/C,EAVV,0BAUmCuC,EAAKI,UAVxC,eAWiBtE,EAAcC,GAX/B,YAWFe,EAXE,gCAcAwD,EAAUnB,EAAiBgB,IAAIH,EAAKI,aAGxCE,EAAQG,UAGVxD,EAAiBH,EAAY0D,GApBvB,2BAwBFE,EAAkBrD,SAASC,iBAAiBkD,GAClDhE,QAAQC,IAAI,oBAAqBiE,GACjCA,EAAgBlD,SAAQ,SAAAmD,GACtB,IAAMC,EAAaC,mBACjBb,EAAKI,UAAUU,QAAQ,YAAa,KAFE,EAIhB5B,EAASb,QAAQU,QAAO,SAAAgC,GAAM,OACpDH,EACGI,cACAC,SAFH,WAEgBF,EAAOC,mBAHlBE,EAJiC,qBAUpCzB,GAAgByB,EAKpBP,EAAeQ,aAAa,MAAOP,GAJjCpC,EAAK4C,SAAST,EAAgBzB,EAASZ,YArCnC,4CAAV,uDA6CAgC,EAAQe,GAAG,QAAQ,WACjBd,EAAMZ,KAAI,SAAAnB,GACR,IAAMU,EAAWX,EAAaC,GACxBzC,EAAQ,UAAM+D,EAAN,YAAYI,EAAZ,YAAmB1B,EAAKE,MAChCjB,EAAUyB,EAASzB,QACnB+C,EAAM,UAAM/C,EAAN,0BAA+BuC,EAAKI,UAApC,MAEZ5B,EAAK8C,QAAL,uCAAa,WAAOC,EAAKC,GAAZ,eAAAxF,EAAA,0DACPuF,EADO,uBAET/E,QAAQQ,KAAKuE,GAFJ,iCAMX/E,QAAQC,IAAI,yBAA0BV,EAAUyF,GANrC,SAOL3D,EAAS9B,EAAUyF,GAPd,UASoB,UADfnE,SAASoE,cAAcjB,GAC3BkB,QAAQC,OATT,kCAUgB7F,EAAcC,GAV9B,QAUHe,EAVG,OAWTG,EAAiBH,EAAY0D,GAXpB,4CAAb,+DAvE+B,2CAArC,+DAvBA,2CAAV,wDAFuB,OACnBoB,EADmB,OAqHnB/B,EAAe+B,EAAaC,QAChC,SAACC,EAAUjC,GAAX,4BAAgCiC,GAAhC,YAA6CjC,MAC7C,IAGF7B,EAAU6B,GA1He,2CAAH,sD,oBC/CxBkC,EAAOC,QAAU,IAA0B,iC,oFCyE5BC,IAlES,SAAAC,GACtB,IAAMC,EAAWC,cACXC,EAAUC,aAAY,qBAAGC,KAAgBF,WAFZ,EAIGG,oBAAS,GAJZ,mBAI5BC,EAJ4B,KAIfC,EAJe,OAKKF,oBAAS,GALd,mBAK5BG,EAL4B,KAKdC,EALc,OAMGJ,oBAAS,GANZ,mBAM5BK,EAN4B,KAMfC,EANe,OAOKN,oBAAS,GAPd,mBAO5BO,EAP4B,KAOdC,EAPc,OAQaR,qBARb,mBAQ5BS,EAR4B,KAQVC,EARU,KAU7BC,EAAmBC,uBAAY,WACnC,IAAMC,EAAkBC,IAAOC,MAAMC,SAAS,EAAG,WAC3CT,EACJO,IAAOC,IAAIZ,GAAcc,cAAcJ,GACnCR,EAAcS,IAAOC,IAAId,GAAagB,cAAcJ,GAE1DL,EAAgBD,GAChBD,EAAeD,KACd,CAACJ,EAAaE,IA0CjB,OAxCAe,qBAAU,WACJT,GACFU,aAAaV,GAGfE,IAEA,IAAMS,EAAQC,YAAW,WACvBV,MA9BkB,KAmCpB,OAFAD,EAAoBU,GAEb,kBAAMD,aAAaV,MAEzB,CAACZ,EAASc,IAEbO,qBAAU,WACR,IAAMI,EAAsBC,YAAW,CACrCC,KAAM,sBACNC,WAAYC,YAAQhC,GACpBiC,SAAU,SAAAC,GACR1B,EAAe0B,MAIbC,EAAuBN,YAAW,CACtCC,KAAM,uBACNC,WAAYC,YAAQhC,GACpBiC,SAAU,SAAAC,GACRxB,EAAgBwB,MAIpB,OAAO,WACLN,EAAoBQ,MACpBD,EAAqBC,SAEtB,CAACnC,EAAUD,IAEP,CACLW,cACAE,kB,iCCrEJ,4CAMMwB,GANN,OAMwBC,IAAMC,MAAK,kBAAM,gEA4B1BC,IA1BE,SAAAC,GACf,IAAMxC,EAAWC,cACXwC,EAAYtC,aAAY,qBAAGuC,IAAcD,aAEzCE,EAAQ1B,uBAAY,WACxBjB,EAAS4C,iBACR,CAAC5C,IAEE6C,EAASC,mBAAQ,kBAAM,kBAAC,IAAD,CAAQC,KAAK,iBAAiB,IAE3D,OAAKN,EAKH,yBAAKO,UAAU,mBACb,yBAAKA,UAAU,gBAAgBC,QAASN,IACxC,yBAAKK,UAAU,iBACb,kBAAC,WAAD,CAAUE,SAAUL,GAClB,kBAACT,EAAoBI,MARpB,O,gECnBX5C,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,yLCa5BsD,G,OAVC,SAAC,GAAc,IAAZJ,EAAW,EAAXA,KACjB,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,SACf,uBAAGA,UAAU,gBAAgBD,GAC7B,yBAAKC,UAAU,Y,+DCsBfI,G,OAAOf,IAAMC,MAAK,kBAAM,wDACxBe,EAAahB,IAAMC,MAAK,kBAAM,+DA2PrBgB,UAzPE,WAAO,IAAD,EACftD,EAAWC,cACXsD,EAASC,cACCzD,EAAcwD,EAAtBE,OACFC,EAAOvD,aAAY,qBAAGC,KAAgBsD,QACtCxD,EAAUC,aAAY,qBAAGC,KAAgBF,WAL1B,EAMiBJ,YAAgBC,GAA9CW,EANa,EAMbA,YAAaE,EANA,EAMAA,aANA,EASiBP,oBAAS,GAT1B,mBASDsD,GATC,aAUiBtD,oBAAS,GAV1B,mBAUduD,EAVc,KAUDC,EAVC,KAYfC,EAAgB7C,sBAAW,sBAAC,sBAAApH,EAAA,sEAE9B8J,GAAe,GACf3D,EAAS+D,eAHqB,SAIxB/D,EAASgE,YAAejE,IAJA,OAK9B4D,GAAe,GAEf3D,EAASiE,YAAclE,IACvBC,EAASkE,YAAcnE,IARO,kDAU9B1F,QAAQ8J,MAAR,MACAR,GAAe,GAXe,0DAa/B,CAAC3D,EAAUD,IAERqE,EAAgBnD,sBAAW,sBAAC,sBAAApH,EAAA,sEAE9BQ,QAAQC,IAAI,8BAA8B,GAC1CuJ,GAAe,GACf7D,EAASqE,eAJqB,SAKxBrE,EAASsE,YAAYvE,IALG,OAM9B1F,QAAQC,IAAI,8BAA8B,GAC1CuJ,GAAe,GAPe,kDAS9BxJ,QAAQ8J,MAAR,MACA9J,QAAQC,IAAI,8BAA8B,GAC1CuJ,GAAe,GAXe,0DAa/B,CAAC7D,EAAUD,IAERwE,EAAetD,uBAAY,WAC/BjB,EAASwE,YAAU,CAAEC,WAAY,0BAChC,CAACzE,IAEE0E,EAAqBzD,sBAAW,sBAAC,gCAAApH,EAAA,6DAC7B8K,EAAyBpB,EAAzBoB,OAAQlB,EAAiBF,EAAjBE,OAAQ3F,EAASyF,EAATzF,KADa,SAE/BgG,IAF+B,OAGrCM,IAEApE,EACE4E,YAAc,CACZD,SACA5E,UAAW0D,EACX3F,UATiC,2CAYpC,CAACkC,EAAU8D,EAAeM,EAAeb,IAE5ChC,qBAAU,WACRmD,IAGA,IAAMG,EAAsBjD,YAAW,CACrCC,KAAM,sBACNC,WAAYC,YAAQhC,GACpBiC,SAAU,SAAAC,GACRjC,EAAS8E,YAAkB,CAAEC,YAAa9C,QAIxC+C,EAAcpD,YAAW,CAC7BC,KAAM,cACNC,WAAYC,YAAQhC,GACpBiC,SAAU,SAAAC,GACRjC,EAAS8E,YAAkB,CAAEG,IAAKhD,QAItC,OAAO,WACL4C,EAAoB1C,MACpB6C,EAAY7C,SAEb,CAACnC,EAAU0E,EAAoB3E,IASlC,IAAMmF,EAAQ,UAAGhF,EAAQ6E,mBAAX,QAA0B7E,EAAQiF,MAE1CC,EAAanE,uBACjB,SAAAxD,GACE,GAAKA,EAAL,CAIA,IA6B0B,IA7BpB4H,EAASnF,EAAQmF,OAAR,gCACcnF,EAAQmF,QACjCC,IAEJ,GAAkB,WAAd7H,EAAKK,KACP,OACE,kBAAC,WAAD,CACEoF,SACE,yBAAKF,UAAU,gBACb,kBAACuC,EAAA,EAAD,CAAQxC,KAAK,qBAGjBhF,IAAKN,EAAKE,IAEV,kBAAC0F,EAAD,CACEmC,OAAQ/H,EAAKE,GACb8H,cAAehI,EAAKiI,eACpBC,aAAclI,EAAKE,GACnBiI,gBAAiBnI,EAAKoI,KACtBC,aAAcT,EACdU,gBAAiBhG,EACjBiG,eAAgBd,EAChBtE,aAAcA,EACdqF,OAAQxI,EAAKwI,UAMrB,GAAkB,SAAdxI,EAAKK,KACP,OACE,kBAAC,WAAD,CACEoF,SACE,yBAAKF,UAAU,gBACb,kBAACuC,EAAA,EAAD,CAAQxC,KAAK,qBAGjBhF,IAAKN,EAAKE,IAEV,kBAACyF,EAAD,CACE8C,UAAWzI,EAAKoI,KAChBnI,aAAcD,EAAKC,aACnBwH,SAAUA,EACVG,OAAQA,EACRtF,UAAWA,EACXoG,KAAM1I,EAAK0I,KACXxI,GAAIF,EAAKE,GACTyI,SAAQ,UAAE3I,EAAK2I,gBAAP,QAAmB,EAC3BC,WAAU,UAAE5I,EAAK4I,kBAAP,QAAqB,EAC/BzF,aAAcA,EACdqF,OAAQxI,EAAKwI,OACbxI,KAAMA,QAMhB,CAACmD,EAAcV,EAAQmF,OAAQtF,EAAWmF,IAG5C,OACE,yBAAKlC,UAAU,aACb,yBACEA,UAAU,aACVsD,MAAO,CACLC,gBAAgB,OAAD,OACbrG,EAAQsG,OAAR,gCAC6BtG,EAAQsG,QACjCC,IAHS,QAOnB,yBAAKzD,UAAU,gBACb,yBACEA,UAAU,UACVsD,MAAO,CACLC,gBAAgB,OAAD,OACbrG,EAAQmF,OAAR,gCAA0CnF,EAAQmF,QAAWC,IADhD,QAMnB,yBAAKtC,UAAU,WACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,YAAYkC,GAEzB,yBAAKlC,UAAU,YACb,uBACEA,UAAU,SACVsD,MAAO,CACLI,MAAOhG,EACH,UACAE,EACA,UACA,SAGLF,EACG,kBACAE,EACA,cACA,iBAIPV,EAAQ+E,IACP,yBAAKjC,UAAU,QACb,uBAAGA,UAAU,SAAb,OACA,2BAAI9C,EAAQ+E,MAEZ,MAGN,yBACEjC,UAAU,eACVC,QAASsB,EACT+B,MAAO,CACLK,QAAS/F,EAAe,EAAI,GAC5BgG,OAAQhG,EAAe,UAAY,WAErCiG,WACGjG,EAA4D,KAA7C,4CAGlB,yBAAKrF,IAAKuL,IAAWC,IAAI,sBACzB,wCAGF,kBAAC,IAAD,CAASC,gBAAgB,UAAUC,OAAO,YAI9C,yBAAKjE,UAAU,eACb,uBAAGA,UAAU,cAAb,SAEF,yBAAKA,UAAU,gBACZoC,EAAW1B,EAAKwD,YAChBxD,EAAKwD,YAAc,kBAAC,EAAD,CAASnE,KAAK,eACjCW,EAAKrG,MAAMG,IAAI4H,IAEjBxB,EACC,kBAAC2B,EAAA,EAAD,CAAQxC,KAAI,kBAAaW,EAAKyC,MAAQ,EAAI,OAAS,OAAvC,eACV,KACJ,kBAAC5D,EAAA,EAAD,CAAUxC,UAAWA","file":"static/js/10.be64912c.chunk.js","sourcesContent":["import FileCache from \"browser-file-storage\";\n\nexport const DB_NAME = \"ShockWalletStore\";\n\nexport const init = () =>\n  new Promise((resolve, reject) => {\n    FileCache.init(DB_NAME)\n      .then(() => {\n        console.log(\"File cache initialized!\");\n        return FileCache.persist();\n      })\n      .then(status => {\n        if (status.persistent) {\n          resolve(status);\n        } else {\n          reject(status);\n        }\n      });\n  });\n\nexport const getCachedFile = async fileName => {\n  try {\n    if (!FileCache._init) {\n      await init();\n    }\n\n    const cachedFile = await FileCache.load(fileName);\n    return cachedFile.createURL();\n  } catch (err) {\n    console.warn(err);\n    return false;\n  }\n};\n\nexport const renderCachedFile = (fileURL, selector) => {\n  const elements = document.querySelectorAll(selector);\n  if (elements && elements.length) {\n    elements.forEach(element => {\n      element.src = fileURL;\n      element.muted = true;\n      element.autoplay = true;\n    });\n  }\n  return !!elements && !!elements.length;\n};\n\nexport const saveFile = (fileName, buffer) => {\n  return FileCache.save(fileName, buffer);\n};\n","export const runSerial = tasks => {\n  let result = Promise.resolve();\n  tasks.forEach(task => {\n    result = result.then(() => task());\n  });\n  return result;\n};\n","import { getCachedFile, renderCachedFile, saveFile } from \"./Cache\";\nimport { runSerial } from \"./Promise\";\n\nconst supportedFileTypes = {\n  \"video/embedded\": {\n    formats: [\"mp4\", \"webm\"],\n    element: \"video\",\n    options: {\n      autoplay: true,\n      muted: true\n    }\n  },\n  \"image/embedded\": {\n    formats: [\"jpg\", \"png\", \"webp\", \"jpeg\"],\n    element: \"img\",\n    options: {}\n  }\n};\n\nconst _getFileType = file => {\n  const extension = file.name?.split(\".\")?.slice(-1)[0];\n  const [supportedFileType] = Object.entries(supportedFileTypes).filter(\n    ([type, options]) => options.formats.includes(extension)\n  );\n\n  if (supportedFileType) {\n    const [name, fileType] = supportedFileType;\n    return {\n      name,\n      ...fileType\n    };\n  }\n\n  return null;\n};\n\nexport let webTorrentClient = null;\n\nexport const initializeClient = async () => {\n  if (!webTorrentClient) {\n    const WebTorrent = await import(\"webtorrent\");\n    webTorrentClient = new WebTorrent.default();\n  }\n\n  return webTorrentClient;\n};\n\nexport const attachMedia = async (posts = [], torrentMode = true) => {\n  const torrentTasks = await Promise.all(\n    posts.map(async post => {\n      const { contentItems, id } = post;\n      const supportedItems = Object.entries(contentItems).filter(\n        ([, item]) => supportedFileTypes[item.type]\n      );\n\n      if (!supportedItems) {\n        return [];\n      }\n\n      const webTorrentClient = await initializeClient();\n\n      return supportedItems.map(\n        ([key, item]) =>\n          () =>\n            new Promise(resolve => {\n              const torrentExists = webTorrentClient.get(item.magnetURI);\n\n              if (torrentExists) {\n                resolve(true);\n                return;\n              }\n\n              webTorrentClient.add(item.magnetURI, async torrent => {\n                // Proceed to the next torrent in queue\n                resolve(true);\n\n                const files = torrent.files.filter(file => {\n                  const extension = file.name?.split(\".\")?.slice(-1)[0];\n                  const supportedFileType = Object.entries(\n                    supportedFileTypes\n                  ).filter(([, options]) =>\n                    options.formats.includes(extension)\n                  )[0];\n                  if (supportedFileType) {\n                    const [, fileType] = supportedFileType;\n                    const matched = fileType.formats.includes(extension);\n                    return matched;\n                  }\n                  return false;\n                });\n\n                files.map(async file => {\n                  const fileType = _getFileType(file);\n\n                  if (!fileType) {\n                    return;\n                  }\n\n                  const fileName = `${id}-${key}-${file.name}`;\n\n                  const element = fileType.element;\n                  const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n                  const cachedFile = await getCachedFile(fileName);\n\n                  if (cachedFile) {\n                    const torrent = webTorrentClient.get(item.magnetURI);\n\n                    if (torrent) {\n                      torrent.destroy();\n                    }\n\n                    renderCachedFile(cachedFile, target);\n                    return;\n                  }\n\n                  const torrentElements = document.querySelectorAll(target);\n                  console.log(\"Torrent Elements:\", torrentElements);\n                  torrentElements.forEach(torrentElement => {\n                    const contentURL = decodeURIComponent(\n                      item.magnetURI.replace(/.*(ws=)/gi, \"\")\n                    );\n                    const [compatibleURL] = fileType.formats.filter(format =>\n                      contentURL\n                        .toLowerCase()\n                        .endsWith(`.${format.toLowerCase()}`)\n                    );\n\n                    if (torrentMode || !compatibleURL) {\n                      file.renderTo(torrentElement, fileType.options);\n                      return;\n                    }\n\n                    torrentElement.setAttribute(\"src\", contentURL);\n                  });\n                });\n\n                torrent.on(\"done\", () => {\n                  files.map(file => {\n                    const fileType = _getFileType(file);\n                    const fileName = `${id}-${key}-${file.name}`;\n                    const element = fileType.element;\n                    const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n\n                    file.getBlob(async (err, blob) => {\n                      if (err) {\n                        console.warn(err);\n                        return;\n                      }\n\n                      console.log(\"Caching loaded file...\", fileName, blob);\n                      await saveFile(fileName, blob);\n                      const element = document.querySelector(target);\n                      if (element.dataset.played === \"false\") {\n                        const cachedFile = await getCachedFile(fileName);\n                        renderCachedFile(cachedFile, target);\n                      }\n                    });\n                  });\n                });\n              });\n            })\n      );\n    })\n  );\n  const contentItems = torrentTasks.reduce(\n    (torrents, contentItems) => [...torrents, ...contentItems],\n    []\n  );\n\n  runSerial(contentItems);\n};\n","module.exports = __webpack_public_path__ + \"static/media/av1.48bf5c6a.jpg\";","import { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Moment from \"moment\";\nimport { gunUser, listenPath } from \"../utils/Gun\";\n\nconst ONLINE_INTERVAL = 30 * 1000;\n\nconst useOnlineStatus = publicKey => {\n  const dispatch = useDispatch();\n  const profile = useSelector(({ user }) => user.profile);\n\n  const [lastSeenApp, setLastSeenApp] = useState(false);\n  const [lastSeenNode, setLastSeenNode] = useState(false);\n  const [isOnlineApp, setIsOnlineApp] = useState(false);\n  const [isOnlineNode, setIsOnlineNode] = useState(false);\n  const [onlineCheckTimer, setOnlineCheckTimer] = useState();\n\n  const updateUserStatus = useCallback(() => {\n    const onlineThreshold = Moment.utc().subtract(1, \"minutes\");\n    const isOnlineNode =\n      Moment.utc(lastSeenNode).isSameOrAfter(onlineThreshold);\n    const isOnlineApp = Moment.utc(lastSeenApp).isSameOrAfter(onlineThreshold);\n\n    setIsOnlineNode(isOnlineNode);\n    setIsOnlineApp(isOnlineApp);\n  }, [lastSeenApp, lastSeenNode]);\n\n  useEffect(() => {\n    if (onlineCheckTimer) {\n      clearTimeout(onlineCheckTimer);\n    }\n\n    updateUserStatus();\n\n    const timer = setTimeout(() => {\n      updateUserStatus();\n    }, ONLINE_INTERVAL);\n\n    setOnlineCheckTimer(timer);\n\n    return () => clearTimeout(onlineCheckTimer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [profile, updateUserStatus]);\n\n  useEffect(() => {\n    const lastSeenAppListener = listenPath({\n      path: \"Profile/lastSeenApp\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        setLastSeenApp(event);\n      }\n    });\n\n    const lastSeenNodeListener = listenPath({\n      path: \"Profile/lastSeenNode\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        setLastSeenNode(event);\n      }\n    });\n\n    return () => {\n      lastSeenAppListener.off();\n      lastSeenNodeListener.off();\n    };\n  }, [dispatch, publicKey]);\n\n  return {\n    isOnlineApp,\n    isOnlineNode\n  };\n};\n\nexport default useOnlineStatus;\n","import React, { Suspense, useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { closeModal } from \"../../actions/TipActions\";\nimport Loader from \"../Loader\";\nimport \"./css/index.css\";\n\nconst TipModalContent = React.lazy(() => import(\"./components/Modal\"));\n\nconst TipModal = props => {\n  const dispatch = useDispatch();\n  const modalOpen = useSelector(({ tip }) => tip.modalOpen);\n\n  const close = useCallback(() => {\n    dispatch(closeModal());\n  }, [dispatch]);\n\n  const loader = useMemo(() => <Loader text=\"Loading...\" />, []);\n\n  if (!modalOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal-overlay\" onClick={close}></div>\n      <div className=\"modal-content\">\n        <Suspense fallback={loader}>\n          <TipModalContent {...props} />\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default TipModal;\n","module.exports = __webpack_public_path__ + \"static/media/banner-bg.f59337b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lightning-logo.ea3bd789.svg\";","import React from \"react\";\nimport \"./css/index.css\";\n\nconst Divider = ({ text }) => {\n  return (\n    <div className=\"divider-container\">\n      <div className=\"dash\" />\n      <p className=\"divider-text\">{text}</p>\n      <div className=\"dash\" />\n    </div>\n  );\n};\n\nexport default Divider;\n","import React, { useEffect, useState, useCallback, Suspense } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport Tooltip from \"react-tooltip\";\n\nimport {\n  getUserWall,\n  resetUserWall,\n  resetUserData,\n  getUserProfile,\n  getUserAvatar,\n  updateUserProfile,\n  getUserHeader,\n  getPinnedPost\n} from \"../../actions/UserActions\";\nimport { openModal } from \"../../actions/TipActions\";\nimport useOnlineStatus from \"../../hooks/useOnlineStatus\";\nimport { listenPath, gunUser } from \"../../utils/Gun\";\nimport { attachMedia } from \"../../utils/Torrents\";\n\nimport Loader from \"../../common/Loader\";\nimport Divider from \"../../common/Divider\";\nimport TipModal from \"../../common/TipModal\";\n\n// Assets\nimport defaultBanner from \"../../images/banner-bg.jpg\";\nimport av1 from \"../../images/av1.jpg\";\nimport shockLogo from \"../../images/lightning-logo.svg\";\nimport \"./css/index.css\";\n\nconst Post = React.lazy(() => import(\"../../common/Post\"));\nconst SharedPost = React.lazy(() => import(\"../../common/Post/SharedPost\"));\n\nconst UserPage = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const { userId: publicKey } = params;\n  const wall = useSelector(({ user }) => user.wall);\n  const profile = useSelector(({ user }) => user.profile);\n  const { isOnlineApp, isOnlineNode } = useOnlineStatus(publicKey);\n  // Reserved for future use\n  // eslint-disable-next-line no-unused-vars\n  const [userLoading, setUserLoading] = useState(true);\n  const [wallLoading, setWallLoading] = useState(true);\n\n  const fetchUserData = useCallback(async () => {\n    try {\n      setUserLoading(true);\n      dispatch(resetUserData());\n      await dispatch(getUserProfile(publicKey));\n      setUserLoading(false);\n      // Load user avatar in the background\n      dispatch(getUserHeader(publicKey));\n      dispatch(getUserAvatar(publicKey));\n    } catch (err) {\n      console.error(err);\n      setUserLoading(false);\n    }\n  }, [dispatch, publicKey]);\n\n  const fetchUserWall = useCallback(async () => {\n    try {\n      console.log(\"Setting Loading status to:\", true);\n      setWallLoading(true);\n      dispatch(resetUserWall());\n      await dispatch(getUserWall(publicKey));\n      console.log(\"Setting Loading status to:\", false);\n      setWallLoading(false);\n    } catch (err) {\n      console.error(err);\n      console.log(\"Setting Loading status to:\", false);\n      setWallLoading(false);\n    }\n  }, [dispatch, publicKey]);\n\n  const openTipModal = useCallback(() => {\n    dispatch(openModal({ targetType: \"spontaneousPayment\" }));\n  }, [dispatch]);\n\n  const initializeUserWall = useCallback(async () => {\n    const { postId, userId, type } = params;\n    await fetchUserData();\n    fetchUserWall();\n\n    dispatch(\n      getPinnedPost({\n        postId,\n        publicKey: userId,\n        type\n      })\n    );\n  }, [dispatch, fetchUserData, fetchUserWall, params]);\n\n  useEffect(() => {\n    initializeUserWall();\n\n    // Subscribe for updates\n    const displayNameListener = listenPath({\n      path: \"Profile/displayName\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        dispatch(updateUserProfile({ displayName: event }));\n      }\n    });\n\n    const bioListener = listenPath({\n      path: \"Profile/bio\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        dispatch(updateUserProfile({ bio: event }));\n      }\n    });\n\n    return () => {\n      displayNameListener.off();\n      bioListener.off();\n    };\n  }, [dispatch, initializeUserWall, publicKey]);\n\n  // useEffect(() => {\n  //   attachMedia(\n  //     wall.posts.filter(post => post.type === \"post\"),\n  //     false\n  //   );\n  // }, [wall.posts]);\n\n  const username = profile.displayName ?? profile.alias;\n\n  const renderPost = useCallback(\n    post => {\n      if (!post) {\n        return;\n      }\n\n      const avatar = profile.avatar\n        ? `data:image/png;base64,${profile.avatar}`\n        : av1;\n\n      if (post.type === \"shared\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <SharedPost\n              postID={post.id}\n              postPublicKey={post.originalAuthor}\n              sharedPostId={post.id}\n              sharedTimestamp={post.date}\n              sharerAvatar={avatar}\n              sharerPublicKey={publicKey}\n              sharerUsername={username}\n              isOnlineNode={isOnlineNode}\n              pinned={post.pinned}\n            />\n          </Suspense>\n        );\n      }\n\n      if (post.type === \"post\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <Post\n              timestamp={post.date}\n              contentItems={post.contentItems}\n              username={username}\n              avatar={avatar}\n              publicKey={publicKey}\n              page={post.page}\n              id={post.id}\n              tipValue={post.tipValue ?? 0}\n              tipCounter={post.tipCounter ?? 0}\n              isOnlineNode={isOnlineNode}\n              pinned={post.pinned}\n              post={post}\n            />\n          </Suspense>\n        );\n      }\n    },\n    [isOnlineNode, profile.avatar, publicKey, username]\n  );\n\n  return (\n    <div className=\"user-page\">\n      <div\n        className=\"top-banner\"\n        style={{\n          backgroundImage: `url(${\n            profile.header\n              ? `data:image/png;base64,${profile.header}`\n              : defaultBanner\n          })`\n        }}\n      ></div>\n      <div className=\"user-details\">\n        <div\n          className=\"main-av\"\n          style={{\n            backgroundImage: `url(${\n              profile.avatar ? `data:image/png;base64,${profile.avatar}` : av1\n            })`\n          }}\n        ></div>\n\n        <div className=\"details\">\n          <div className=\"user-info\">\n            <p className=\"username\">{username}</p>\n\n            <div className=\"activity\">\n              <p\n                className=\"status\"\n                style={{\n                  color: isOnlineApp\n                    ? \"#01a33d\"\n                    : isOnlineNode\n                    ? \"#f2a900\"\n                    : \"#888\"\n                }}\n              >\n                {isOnlineApp\n                  ? \"Active Recently\"\n                  : isOnlineNode\n                  ? \"Node Online\"\n                  : \"Node Offline\"}\n              </p>\n            </div>\n\n            {profile.bio ? (\n              <div className=\"desc\">\n                <p className=\"title\">Bio</p>\n                <p>{profile.bio}</p>\n              </div>\n            ) : null}\n          </div>\n\n          <div\n            className=\"send-tip-btn\"\n            onClick={openTipModal}\n            style={{\n              opacity: isOnlineNode ? 1 : 0.5,\n              cursor: isOnlineNode ? \"pointer\" : \"default\"\n            }}\n            data-tip={\n              !isOnlineNode ? \"You can only tip users with online nodes\" : null\n            }\n          >\n            <img src={shockLogo} alt=\"Bitcoin Lightning\" />\n            <p>Send Tip</p>\n          </div>\n\n          <Tooltip backgroundColor=\"#3a4d67\" effect=\"solid\" />\n        </div>\n      </div>\n\n      <div className=\"tabs-holder\">\n        <p className=\"tab active\">Feed</p>\n      </div>\n      <div className=\"posts-holder\">\n        {renderPost(wall.pinnedPost)}\n        {wall.pinnedPost && <Divider text=\"More Posts\" />}\n        {wall.posts.map(renderPost)}\n      </div>\n      {wallLoading ? (\n        <Loader text={`Loading ${wall.page >= 0 ? \"More\" : \"Wall\"} Posts...`} />\n      ) : null}\n      <TipModal publicKey={publicKey} />\n    </div>\n  );\n};\n\nexport default UserPage;\n"],"sourceRoot":""}
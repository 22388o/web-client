{"version":3,"sources":["images/av1.jpg","utils/Promise.js","hooks/useOnlineStatus.js","common/TipModal/index.js","images/banner-bg.jpg","images/lightning-logo.svg","common/Divider/index.js","pages/User/index.js"],"names":["module","exports","runSerial","tasks","result","Promise","resolve","forEach","task","then","crawlerAwait","a","isCrawler","promises","all","useOnlineStatus","publicKey","dispatch","useDispatch","profile","useSelector","user","useState","lastSeenApp","setLastSeenApp","lastSeenNode","setLastSeenNode","isOnlineApp","setIsOnlineApp","isOnlineNode","setIsOnlineNode","onlineCheckTimer","setOnlineCheckTimer","updateUserStatus","useCallback","onlineThreshold","Moment","utc","subtract","isSameOrAfter","useEffect","clearTimeout","timer","setTimeout","lastSeenAppListener","listenPath","path","gunPointer","gunUser","callback","event","lastSeenNodeListener","off","TipModalContent","React","lazy","TipModal","props","modalOpen","tip","close","closeModal","loader","useMemo","text","className","onClick","fallback","Divider","Post","SharedPost","UserPage","params","useParams","userId","wall","userLoading","setUserLoading","wallLoading","setWallLoading","username","displayName","alias","fetchUserData","resetUserData","getUserProfile","getUserHeader","getUserAvatar","console","error","fetchUserWall","log","resetUserWall","getUserWall","openTipModal","openModal","targetType","initializeUserWall","postId","type","getPinnedPost","renderPost","post","avatar","av1","Loader","key","id","postID","postPublicKey","originalAuthor","sharedPostId","sharedTimestamp","date","sharerAvatar","sharerPublicKey","sharerUsername","pinned","timestamp","contentItems","page","tipValue","tipCounter","displayNameListener","updateUserProfile","bioListener","bio","window","prerenderReady","Helmet","property","content","style","backgroundImage","header","defaultBanner","color","opacity","cursor","data-tip","src","shockLogo","alt","backgroundColor","effect","pinnedPost","posts","map"],"mappings":"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","file":"static/js/10.dbbfdb0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/av1.48bf5c6a.jpg\";","import { isCrawler } from \"./Prerender\";\n\nexport const runSerial = tasks => {\n  let result = Promise.resolve();\n  tasks.forEach(task => {\n    result = result.then(() => task());\n  });\n  return result;\n};\n\nexport const crawlerAwait = async (...promises) => {\n  if (isCrawler()) {\n    return await Promise.all(promises);\n  }\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Moment from \"moment\";\nimport { gunUser, listenPath } from \"../utils/Gun\";\n\nconst ONLINE_INTERVAL = 30 * 1000;\n\nconst useOnlineStatus = publicKey => {\n  const dispatch = useDispatch();\n  const profile = useSelector(({ user }) => user.profile);\n\n  const [lastSeenApp, setLastSeenApp] = useState();\n  const [lastSeenNode, setLastSeenNode] = useState();\n  const [isOnlineApp, setIsOnlineApp] = useState(false);\n  const [isOnlineNode, setIsOnlineNode] = useState(false);\n  const [onlineCheckTimer, setOnlineCheckTimer] = useState();\n\n  const updateUserStatus = useCallback(() => {\n    const onlineThreshold = Moment.utc().subtract(1, \"minutes\");\n    const isOnlineNode = lastSeenNode\n      ? Moment.utc(lastSeenNode).isSameOrAfter(onlineThreshold)\n      : false;\n    const isOnlineApp = lastSeenApp\n      ? Moment.utc(lastSeenApp).isSameOrAfter(onlineThreshold)\n      : false;\n\n    setIsOnlineNode(isOnlineNode);\n    setIsOnlineApp(isOnlineApp);\n  }, [lastSeenApp, lastSeenNode]);\n\n  useEffect(() => {\n    if (onlineCheckTimer) {\n      clearTimeout(onlineCheckTimer);\n    }\n\n    updateUserStatus();\n\n    const timer = setTimeout(() => {\n      updateUserStatus();\n    }, ONLINE_INTERVAL);\n\n    setOnlineCheckTimer(timer);\n\n    return () => clearTimeout(onlineCheckTimer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [profile, updateUserStatus]);\n\n  useEffect(() => {\n    const lastSeenAppListener = listenPath({\n      path: \"Profile/lastSeenApp\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        setLastSeenApp(event);\n      }\n    });\n\n    const lastSeenNodeListener = listenPath({\n      path: \"Profile/lastSeenNode\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        setLastSeenNode(event);\n      }\n    });\n\n    return () => {\n      lastSeenAppListener.off();\n      lastSeenNodeListener.off();\n    };\n  }, [dispatch, publicKey]);\n\n  return {\n    isOnlineApp,\n    isOnlineNode\n  };\n};\n\nexport default useOnlineStatus;\n","import React, { Suspense, useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { closeModal } from \"../../actions/TipActions\";\nimport Loader from \"../Loader\";\nimport \"./css/index.css\";\n\nconst TipModalContent = React.lazy(() => import(\"./components/Modal\"));\n\nconst TipModal = props => {\n  const dispatch = useDispatch();\n  const modalOpen = useSelector(({ tip }) => tip.modalOpen);\n\n  const close = useCallback(() => {\n    dispatch(closeModal());\n  }, [dispatch]);\n\n  const loader = useMemo(() => <Loader text=\"Loading...\" />, []);\n\n  if (!modalOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal-overlay\" onClick={close}></div>\n      <div className=\"modal-content\">\n        <Suspense fallback={loader}>\n          <TipModalContent {...props} />\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default TipModal;\n","module.exports = __webpack_public_path__ + \"static/media/banner-bg.f59337b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lightning-logo.ea3bd789.svg\";","import React from \"react\";\nimport \"./css/index.css\";\n\nconst Divider = ({ text }) => {\n  return (\n    <div className=\"divider-container\">\n      <div className=\"dash\" />\n      <p className=\"divider-text\">{text}</p>\n      <div className=\"dash\" />\n    </div>\n  );\n};\n\nexport default Divider;\n","import React, {\n  useEffect,\n  useState,\n  useCallback,\n  Suspense,\n  useMemo\n} from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport Tooltip from \"react-tooltip\";\nimport Helmet from \"react-helmet\";\n\nimport {\n  getUserWall,\n  resetUserWall,\n  resetUserData,\n  getUserProfile,\n  getUserAvatar,\n  updateUserProfile,\n  getUserHeader,\n  getPinnedPost\n} from \"../../actions/UserActions\";\nimport { openModal } from \"../../actions/TipActions\";\nimport useOnlineStatus from \"../../hooks/useOnlineStatus\";\nimport { listenPath, gunUser } from \"../../utils/Gun\";\nimport { crawlerAwait } from \"../../utils/Promise\";\n\nimport Loader from \"../../common/Loader\";\nimport Divider from \"../../common/Divider\";\nimport TipModal from \"../../common/TipModal\";\n\nimport defaultBanner from \"../../images/banner-bg.jpg\";\nimport av1 from \"../../images/av1.jpg\";\nimport shockLogo from \"../../images/lightning-logo.svg\";\nimport \"./css/index.css\";\n\nconst Post = React.lazy(() => import(\"../../common/Post\"));\nconst SharedPost = React.lazy(() => import(\"../../common/Post/SharedPost\"));\n\nconst UserPage = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const { userId: publicKey } = params;\n  const wall = useSelector(({ user }) => user.wall);\n  const profile = useSelector(({ user }) => user.profile);\n\n  const { isOnlineApp, isOnlineNode } = useOnlineStatus(publicKey);\n  const [userLoading, setUserLoading] = useState(true);\n  const [wallLoading, setWallLoading] = useState(true);\n\n  const username = useMemo(\n    () => profile.displayName ?? profile.alias,\n    [profile]\n  );\n\n  const fetchUserData = useCallback(async () => {\n    try {\n      setUserLoading(true);\n      dispatch(resetUserData());\n      await dispatch(getUserProfile(publicKey));\n\n      // Wait for user avatar/header if crawler is visiting the site\n      await crawlerAwait(\n        dispatch(getUserHeader(publicKey)),\n        dispatch(getUserAvatar(publicKey))\n      );\n      setUserLoading(false);\n    } catch (err) {\n      console.error(err);\n      setUserLoading(false);\n    }\n  }, [dispatch, publicKey]);\n\n  const fetchUserWall = useCallback(async () => {\n    try {\n      console.log(\"Setting Loading status to:\", true);\n      setWallLoading(true);\n      dispatch(resetUserWall());\n      await dispatch(getUserWall(publicKey));\n      console.log(\"Setting Loading status to:\", false);\n      setWallLoading(false);\n    } catch (err) {\n      console.error(err);\n      console.log(\"Setting Loading status to:\", false);\n      setWallLoading(false);\n    }\n  }, [dispatch, publicKey]);\n\n  const openTipModal = useCallback(() => {\n    dispatch(openModal({ targetType: \"spontaneousPayment\" }));\n  }, [dispatch]);\n\n  const initializeUserWall = useCallback(async () => {\n    const { postId, userId, type } = params;\n    await fetchUserData();\n    fetchUserWall();\n\n    dispatch(\n      getPinnedPost({\n        postId,\n        publicKey: userId,\n        type\n      })\n    );\n  }, [dispatch, fetchUserData, fetchUserWall, params]);\n\n  const renderPost = useCallback(\n    post => {\n      if (!post) {\n        return;\n      }\n\n      const avatar = profile.avatar\n        ? `data:image/png;base64,${profile.avatar}`\n        : av1;\n\n      if (post.type === \"shared\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <SharedPost\n              postID={post.id}\n              postPublicKey={post.originalAuthor}\n              sharedPostId={post.id}\n              sharedTimestamp={post.date}\n              sharerAvatar={avatar}\n              sharerPublicKey={publicKey}\n              sharerUsername={username}\n              isOnlineNode={isOnlineNode}\n              pinned={post.pinned}\n            />\n          </Suspense>\n        );\n      }\n\n      if (post.type === \"post\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <Post\n              timestamp={post.date}\n              contentItems={post.contentItems}\n              username={username}\n              avatar={avatar}\n              publicKey={publicKey}\n              page={post.page}\n              id={post.id}\n              tipValue={post.tipValue ?? 0}\n              tipCounter={post.tipCounter ?? 0}\n              isOnlineNode={isOnlineNode}\n              pinned={post.pinned}\n              post={post}\n            />\n          </Suspense>\n        );\n      }\n    },\n    [isOnlineNode, profile.avatar, publicKey, username]\n  );\n\n  useEffect(() => {\n    initializeUserWall();\n\n    // Subscribe for updates\n    const displayNameListener = listenPath({\n      path: \"Profile/displayName\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        dispatch(updateUserProfile({ displayName: event }));\n      }\n    });\n\n    const bioListener = listenPath({\n      path: \"Profile/bio\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        dispatch(updateUserProfile({ bio: event }));\n      }\n    });\n\n    return () => {\n      displayNameListener.off();\n      bioListener.off();\n    };\n  }, [dispatch, initializeUserWall, publicKey]);\n\n  useEffect(() => {\n    if (!userLoading) {\n      window.prerenderReady = true;\n    }\n  }, [userLoading]);\n\n  return (\n    <div className=\"user-page\">\n      <Helmet>\n        <meta property=\"og:title\" content={username} />\n        <meta property=\"twitter:title\" content={username} />\n        <meta property=\"og:description\" content={profile.bio} />\n      </Helmet>\n      <div\n        className=\"top-banner\"\n        style={{\n          backgroundImage: `url(${\n            profile.header\n              ? `data:image/png;base64,${profile.header}`\n              : defaultBanner\n          })`\n        }}\n      />\n      <div className=\"user-details\">\n        <div\n          className=\"main-av\"\n          style={{\n            backgroundImage: `url(${\n              profile.avatar ? `data:image/png;base64,${profile.avatar}` : av1\n            })`\n          }}\n        />\n\n        <div className=\"details\">\n          <div className=\"user-info\">\n            <p className=\"username\">{username}</p>\n\n            <div className=\"activity\">\n              <p\n                className=\"status\"\n                style={{\n                  color: isOnlineApp\n                    ? \"#01a33d\"\n                    : isOnlineNode\n                    ? \"#f2a900\"\n                    : \"#888\"\n                }}\n              >\n                {isOnlineApp\n                  ? \"Active Recently\"\n                  : isOnlineNode\n                  ? \"Node Online\"\n                  : \"Node Offline\"}\n              </p>\n            </div>\n\n            {profile.bio ? (\n              <div className=\"desc\">\n                <p className=\"title\">Bio</p>\n                <p>{profile.bio}</p>\n              </div>\n            ) : null}\n          </div>\n\n          <div\n            className=\"send-tip-btn\"\n            onClick={openTipModal}\n            style={{\n              opacity: isOnlineNode ? 1 : 0.5,\n              cursor: isOnlineNode ? \"pointer\" : \"default\"\n            }}\n            data-tip={\n              !isOnlineNode ? \"You can only tip users with online nodes\" : null\n            }\n          >\n            <img src={shockLogo} alt=\"Bitcoin Lightning\" />\n            <p>Send Tip</p>\n          </div>\n\n          <Tooltip backgroundColor=\"#3a4d67\" effect=\"solid\" />\n        </div>\n      </div>\n\n      <div className=\"tabs-holder\">\n        <p className=\"tab active\">Feed</p>\n      </div>\n      <div className=\"posts-holder\">\n        {renderPost(wall.pinnedPost)}\n        {wall.pinnedPost && <Divider text=\"More Posts\" />}\n        {wall.posts.map(renderPost)}\n      </div>\n      {wallLoading ? (\n        <Loader text={`Loading ${wall.page >= 0 ? \"More\" : \"Wall\"} Posts...`} />\n      ) : null}\n      <TipModal publicKey={publicKey} />\n    </div>\n  );\n};\n\nexport default UserPage;\n"],"sourceRoot":""}
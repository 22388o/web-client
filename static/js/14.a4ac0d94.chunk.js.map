{"version":3,"sources":["common/TipModal/components/Modal/index.js"],"names":["TipModalContent","publicKey","dispatch","useDispatch","me","useSelector","auth","pair","paymentRequest","tip","metadata","useState","tipLoading","setTipLoading","tipAmount","setTipAmount","copied","setCopied","setCopiedStatus","useCallback","Tooltip","rebuild","timer","setTimeout","clearTimeout","sendTip","a","payUser","senderPair","recipientPublicKey","amount","console","error","useEffect","generateGunPair","className","text","value","size","bgColor","fgColor","href","onCopy","onChange","e","target","onClick"],"mappings":"wQAmHeA,UAzGS,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACnBC,EAAWC,cACXC,EAAKC,aAAY,qBAAGC,KAAgBC,QACpCC,EAAiBH,aAAY,qBAAGI,IAAcD,kBAC9CE,EAAWL,aAAY,qBAAGI,IAAcC,YAJL,EAMLC,oBAAS,GANJ,mBAMlCC,EANkC,KAMtBC,EANsB,OAOPF,mBAAS,IAPF,mBAOlCG,EAPkC,KAOvBC,EAPuB,OAQbJ,oBAAS,GARI,mBAQlCK,EARkC,KAQ1BC,EAR0B,KAUnCC,EAAkBC,uBAAY,WAClCF,GAAU,GACVG,IAAQC,UACR,IAAMC,EAAQC,YAAW,WACvBN,GAAU,GACVG,IAAQC,YACP,KAEH,OAAO,WACLG,aAAaF,MAEd,IAEGG,EAAUN,sBAAW,sBAAC,sBAAAO,EAAA,sEAExBb,GAAc,GAFU,SAGlBX,EACJyB,YAAQ,CACNC,WAAYxB,EACZyB,mBAAoB5B,EACpB6B,OAAQhB,EACRJ,SAAUA,KARU,OAWxBG,GAAc,GAXU,gDAaxBkB,QAAQC,MAAR,MAbwB,yDAezB,CAAC9B,EAAUE,EAAIM,EAAUT,EAAWa,IAMvC,OAJAmB,qBAAU,WACR/B,EAASgC,iBACR,CAAChC,IAGF,yBAAKiC,UAAU,aACZvB,EACC,yBAAKuB,UAAU,qBACb,kBAAC,IAAD,CAAQC,KAAK,+BAEb,KACJ,yBAAKD,UAAU,kBACb,yBAAKA,UAAU,mBAAf,aAED3B,EACC,yBAAK2B,UAAU,qBACb,uBAAGA,UAAU,0BAAb,6HAIA,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CACEA,UAAU,oBACVE,MAAO7B,EACP8B,KAAM,IACNC,QAAQ,UACRC,QAAQ,aAGZ,yBAAKL,UAAU,yBACb,uBACEM,KAAI,oBAAejC,GACnB2B,UAAU,wBAFZ,eAMA,kBAAC,IAAD,CAAeC,KAAM5B,EAAgBkC,OAAQxB,GAC3C,yBAAKiB,UAAU,wBACZnB,EAAS,kBAAoB,mBAMtC,yBAAKmB,UAAU,qBACb,uBAAGA,UAAU,0BAAb,2HAIA,2BACEA,UAAU,kBACVE,MAAOvB,EACP6B,SAAU,SAAAC,GAAC,OAAI7B,EAAa6B,EAAEC,OAAOR,WAIzC7B,EAIE,KAHF,yBAAK2B,UAAU,mBAAmBW,QAASrB,GACzC,yBAAKU,UAAU,oBAAf,gB","file":"static/js/14.a4ac0d94.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CopyClipboard from \"react-copy-to-clipboard\";\nimport Tooltip from \"react-tooltip\";\nimport QRCode from \"react-qr-code\";\nimport { payUser } from \"../../../../actions/TipActions\";\nimport { generateGunPair } from \"../../../../actions/AuthActions\";\nimport Loader from \"../../../Loader\";\nimport \"./css/index.css\";\n\nconst TipModalContent = ({ publicKey }) => {\n  const dispatch = useDispatch();\n  const me = useSelector(({ auth }) => auth.pair);\n  const paymentRequest = useSelector(({ tip }) => tip.paymentRequest);\n  const metadata = useSelector(({ tip }) => tip.metadata);\n\n  const [tipLoading, setTipLoading] = useState(false);\n  const [tipAmount, setTipAmount] = useState(10);\n  const [copied, setCopied] = useState(false);\n\n  const setCopiedStatus = useCallback(() => {\n    setCopied(true);\n    Tooltip.rebuild();\n    const timer = setTimeout(() => {\n      setCopied(false);\n      Tooltip.rebuild();\n    }, 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  const sendTip = useCallback(async () => {\n    try {\n      setTipLoading(true);\n      await dispatch(\n        payUser({\n          senderPair: me,\n          recipientPublicKey: publicKey,\n          amount: tipAmount,\n          metadata: metadata\n        })\n      );\n      setTipLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }, [dispatch, me, metadata, publicKey, tipAmount]);\n\n  useEffect(() => {\n    dispatch(generateGunPair());\n  }, [dispatch]);\n\n  return (\n    <div className=\"tip-modal\">\n      {tipLoading ? (\n        <div className=\"tip-modal-loading\">\n          <Loader text=\"Submitting Tip Request...\" />\n        </div>\n      ) : null}\n      <div className=\"tip-modal-head\">\n        <div className=\"tip-modal-title\">Send Tip</div>\n      </div>\n      {paymentRequest ? (\n        <div className=\"tip-modal-content\">\n          <p className=\"tip-modal-instructions\">\n            We've successfully generated an invoice for you to tip, please scan\n            the QR Code below using a Lightning wallet to pay it!\n          </p>\n          <div className=\"tip-modal-qr-code-container\">\n            <QRCode\n              className=\"tip-modal-qr-code\"\n              value={paymentRequest}\n              size={210}\n              bgColor=\"#4db1ff\"\n              fgColor=\"#1b2129\"\n            />\n          </div>\n          <div className=\"tip-modal-action-btns\">\n            <a\n              href={`lightning:${paymentRequest}`}\n              className=\"tip-modal-action-btn\"\n            >\n              PAY INVOICE\n            </a>\n            <CopyClipboard text={paymentRequest} onCopy={setCopiedStatus}>\n              <div className=\"tip-modal-action-btn\">\n                {copied ? \"INVOICE COPIED!\" : \"COPY INVOICE\"}\n              </div>\n            </CopyClipboard>\n          </div>\n        </div>\n      ) : (\n        <div className=\"tip-modal-content\">\n          <p className=\"tip-modal-instructions\">\n            Please specify the amount of sats you'd like to tip this user with\n            below and we'll generate an invoice for you to scan.\n          </p>\n          <input\n            className=\"tip-modal-input\"\n            value={tipAmount}\n            onChange={e => setTipAmount(e.target.value)}\n          />\n        </div>\n      )}\n      {!paymentRequest ? (\n        <div className=\"tip-modal-footer\" onClick={sendTip}>\n          <div className=\"tip-modal-submit\">SEND TIP</div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default TipModalContent;\n"],"sourceRoot":""}
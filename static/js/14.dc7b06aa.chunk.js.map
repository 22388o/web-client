{"version":3,"sources":["common/TipModal/components/Modal/index.js"],"names":["TipModalContent","publicKey","dispatch","useDispatch","me","useSelector","auth","pair","paymentRequest","tip","metadata","useState","tipLoading","setTipLoading","tipAmount","setTipAmount","copied","setCopied","ackNode","setAckNode","done","setDone","setCopiedStatus","useCallback","Tooltip","rebuild","timer","setTimeout","clearTimeout","sendTip","a","payUser","senderPair","recipientPublicKey","amount","console","error","useEffect","fetchPath","path","gunPointer","Gun","user","method","then","res","type","closeTipModal","closeModal","generateGunPair","step","className","text","value","onChange","e","target","size","bgColor","fgColor","href","onCopy","onClick"],"mappings":"iRAkJeA,UAtIS,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACnBC,EAAWC,cACXC,EAAKC,aAAY,qBAAGC,KAAgBC,QACpCC,EAAiBH,aAAY,qBAAGI,IAAcD,kBAC9CE,EAAWL,aAAY,qBAAGI,IAAcC,YAJL,EAMLC,oBAAS,GANJ,mBAMlCC,EANkC,KAMtBC,EANsB,OAOPF,mBAAS,IAPF,mBAOlCG,EAPkC,KAOvBC,EAPuB,OAQbJ,oBAAS,GARI,mBAQlCK,EARkC,KAQ1BC,EAR0B,OASXN,mBAAS,IATE,mBASlCO,EATkC,KASzBC,EATyB,OAUjBR,oBAAS,GAVQ,mBAUlCS,EAVkC,KAU5BC,EAV4B,KAYnCC,EAAkBC,uBAAY,WAClCN,GAAU,GACVO,IAAQC,UACR,IAAMC,EAAQC,YAAW,WACvBV,GAAU,GACVO,IAAQC,YACP,KAEH,OAAO,WACLG,aAAaF,MAEd,IAEGG,EAAUN,sBAAW,sBAAC,8BAAAO,EAAA,sEAExBjB,GAAc,GAFU,SAGAX,EACtB6B,YAAQ,CACNC,WAAY5B,EACZ6B,mBAAoBhC,EACpBiC,OAAQpB,EACRJ,SAAUA,KARU,gBAGjBQ,EAHiB,EAGjBA,QAQPL,GAAc,GACXK,GACDC,EAAWD,GAbW,kDAgBxBiB,QAAQC,MAAR,MAhBwB,0DAkBzB,CAAClC,EAASiB,EAAYf,EAAIM,EAAUT,EAAWa,IAElDuB,qBAAU,WACJnB,GAGJoB,YAAU,CACRC,KAAK,mBAAD,OAAqBrB,GACzBsB,WAAYC,IAAIC,KAAKzC,GACrB0C,OAAQ,OACPC,MAAK,kBAAMN,YAAU,CACtBC,KAAK,mBAAD,OAAqBrB,GACzBsB,WAAYC,IAAIC,KAAKzC,QACnB2C,MAAK,SAAAC,GACS,aAAbA,EAAIC,MACLzB,GAAQ,QAGZ,CAACH,EAAQjB,EAAUoB,IAErB,IAAM0B,EAAgBxB,uBAAY,WAChCrB,EAAS8C,iBACT,CAAC9C,EAAS8C,MAEZX,qBAAU,WACRnC,EAAS+C,iBACR,CAAC/C,IAEJ,IAAIgD,EAAO,GAGX,OAFI1C,IAAgB0C,EAAO,kBACvB9B,IAAM8B,EAAO,QAGf,yBAAKC,UAAU,aACZvC,EACC,yBAAKuC,UAAU,qBACb,kBAAC,IAAD,CAAQC,KAAK,+BAEb,KACJ,yBAAKD,UAAU,kBACb,yBAAKA,UAAU,mBAAf,aAEQ,KAATD,GAAe,yBAAKC,UAAU,qBAC7B,uBAAGA,UAAU,0BAAb,2HAIA,2BACEA,UAAU,kBACVE,MAAOvC,EACPwC,SAAU,SAAAC,GAAC,OAAIxC,EAAawC,EAAEC,OAAOH,WAG/B,mBAATH,GAA6B,yBAAKC,UAAU,qBAC3C,uBAAGA,UAAU,0BAAb,6HAIA,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CACEA,UAAU,oBACVE,MAAO7C,EACPiD,KAAM,IACNC,QAAQ,UACRC,QAAQ,aAGZ,yBAAKR,UAAU,yBACb,uBACES,KAAI,oBAAepD,GACnB2C,UAAU,wBAFZ,eAMA,kBAAC,IAAD,CAAeC,KAAM5C,EAAgBqD,OAAQvC,GAC3C,yBAAK6B,UAAU,wBACZnC,EAAS,kBAAoB,mBAK5B,SAATkC,GAAmB,yBAAKC,UAAU,mBAAmBW,QAASf,GAC7D,yBAAKI,UAAU,oBAAf,cAEQ,KAATD,GAAe,yBAAKC,UAAU,mBAAmBW,QAASjC,GACzD,yBAAKsB,UAAU,oBAAf,gB","file":"static/js/14.dc7b06aa.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CopyClipboard from \"react-copy-to-clipboard\";\nimport Tooltip from \"react-tooltip\";\nimport QRCode from \"react-qr-code\";\nimport { payUser,closeModal } from \"../../../../actions/TipActions\";\nimport { generateGunPair } from \"../../../../actions/AuthActions\";\nimport Loader from \"../../../Loader\";\nimport \"./css/index.css\";\nimport { fetchPath } from \"../../../../utils/Gun\";\nimport {Gun} from \"../../../../utils/Gun\";\n\nconst TipModalContent = ({ publicKey }) => {\n  const dispatch = useDispatch();\n  const me = useSelector(({ auth }) => auth.pair);\n  const paymentRequest = useSelector(({ tip }) => tip.paymentRequest);\n  const metadata = useSelector(({ tip }) => tip.metadata);\n\n  const [tipLoading, setTipLoading] = useState(false);\n  const [tipAmount, setTipAmount] = useState(10);\n  const [copied, setCopied] = useState(false);\n  const [ackNode, setAckNode] = useState(\"\")\n  const [done, setDone] = useState(false)\n\n  const setCopiedStatus = useCallback(() => {\n    setCopied(true);\n    Tooltip.rebuild();\n    const timer = setTimeout(() => {\n      setCopied(false);\n      Tooltip.rebuild();\n    }, 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  const sendTip = useCallback(async () => {\n    try {\n      setTipLoading(true);\n      const {ackNode} = await dispatch(\n        payUser({\n          senderPair: me,\n          recipientPublicKey: publicKey,\n          amount: tipAmount,\n          metadata: metadata\n        })\n      );\n      setTipLoading(false);\n      if(ackNode){\n        setAckNode(ackNode)\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [dispatch,setAckNode, me, metadata, publicKey, tipAmount]);\n\n  useEffect(() => {\n    if(!ackNode) {\n      return\n    }\n    fetchPath({\n      path: `orderToResponse/${ackNode}`,\n      gunPointer: Gun.user(publicKey),\n      method: \"on\"\n    }).then(() => fetchPath({\n      path: `orderToResponse/${ackNode}`,\n      gunPointer: Gun.user(publicKey),\n    })).then(res => {\n      if(res.type === \"orderAck\"){\n        setDone(true)\n      }\n    })\n  },[ackNode,publicKey,setDone])\n\n  const closeTipModal = useCallback(()=>{\n    dispatch(closeModal())\n  },[dispatch,closeModal]) \n\n  useEffect(() => {\n    dispatch(generateGunPair());\n  }, [dispatch]);\n\n  let step = ''\n  if (paymentRequest) step = 'paymentRequest'\n  if (done) step = 'done'\n  return (\n    \n    <div className=\"tip-modal\">\n      {tipLoading ? (\n        <div className=\"tip-modal-loading\">\n          <Loader text=\"Submitting Tip Request...\" />\n        </div>\n      ) : null}\n      <div className=\"tip-modal-head\">\n        <div className=\"tip-modal-title\">Send Tip</div>\n      </div>\n      {step === '' && <div className=\"tip-modal-content\">\n        <p className=\"tip-modal-instructions\">\n          Please specify the amount of sats you'd like to tip this user with\n          below and we'll generate an invoice for you to scan.\n        </p>\n        <input\n          className=\"tip-modal-input\"\n          value={tipAmount}\n          onChange={e => setTipAmount(e.target.value)}\n        />\n      </div>}\n      {step === 'paymentRequest' && <div className=\"tip-modal-content\">\n        <p className=\"tip-modal-instructions\">\n          We've successfully generated an invoice for you to tip, please scan\n          the QR Code below using a Lightning wallet to pay it!\n        </p>\n        <div className=\"tip-modal-qr-code-container\">\n          <QRCode\n            className=\"tip-modal-qr-code\"\n            value={paymentRequest}\n            size={210}\n            bgColor=\"#4db1ff\"\n            fgColor=\"#1b2129\"\n          />\n        </div>\n        <div className=\"tip-modal-action-btns\">\n          <a\n            href={`lightning:${paymentRequest}`}\n            className=\"tip-modal-action-btn\"\n          >\n            PAY INVOICE\n          </a>\n          <CopyClipboard text={paymentRequest} onCopy={setCopiedStatus}>\n            <div className=\"tip-modal-action-btn\">\n              {copied ? \"INVOICE COPIED!\" : \"COPY INVOICE\"}\n            </div>\n          </CopyClipboard>\n        </div>\n      </div>}\n      {step === 'done' && <div className=\"tip-modal-footer\" onClick={closeTipModal}>\n        <div className=\"tip-modal-submit\">TIP SENT!</div>\n      </div>}\n      {step === '' && <div className=\"tip-modal-footer\" onClick={sendTip}>\n        <div className=\"tip-modal-submit\">SEND TIP</div>\n      </div>}\n    </div>\n  );\n};\n\nexport default TipModalContent;\n"],"sourceRoot":""}
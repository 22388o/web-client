{"version":3,"sources":["components/Post.js"],"names":["Post","id","timestamp","avatar","page","tipCounter","tipValue","publicKey","openTipModal","contentItems","username","isOnlineNode","webTorrentClient","dispatch","useDispatch","useEmblaCarousel","slidesToScroll","align","carouselRef","carouselAPI","useState","sliderLength","setSliderLength","activeSlide","setActiveSlide","TipRibbon","className","parseContent","index","key","item","type","text","alt","data-torrent","magnetURI","data-file-key","style","cursor","controls","data-played","nextSlide","useCallback","canScrollNext","scrollNext","prevSlide","canScrollPrev","scrollPrev","handleUserKeyDown","e","updateActiveSlide","selectedScrollSnap","useEffect","listenPath","path","gunPointer","gunUser","callback","data","updateWallPost","postID","on","scrollSnapList","length","window","addEventListener","removeEventListener","off","tipPost","targetType","Tooltip","rebuild","backgroundImage","moment","utc","fromNow","Object","entries","filter","map","onClick","Array","from","_","classNames","scrollTo","ref","data-tip"],"mappings":"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","file":"static/js/5.e14d85f8.chunk.js","sourcesContent":["import React, { useEffect, useCallback, useState } from \"react\";\nimport moment from \"moment\";\nimport Tooltip from \"react-tooltip\";\nimport { useDispatch } from \"react-redux\";\nimport { useEmblaCarousel } from \"embla-carousel/react\";\nimport classNames from \"classnames\";\nimport { updateWallPost } from \"../actions/UserActions\";\nimport \"./css/Post.css\";\nimport { listenPath, gunUser } from \"../utils/Gun\";\n\nconst Post = ({\n  id,\n  timestamp,\n  avatar,\n  page,\n  tipCounter,\n  tipValue,\n  publicKey,\n  openTipModal,\n  contentItems = {},\n  username,\n  webTorrentClient,\n  isOnlineNode\n}) => {\n  const dispatch = useDispatch();\n  const [carouselRef, carouselAPI] = useEmblaCarousel({\n    slidesToScroll: 1,\n    align: \"center\"\n  });\n\n  const [sliderLength, setSliderLength] = useState(0);\n  const [activeSlide, setActiveSlide] = useState(0);\n\n  const getMediaContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type !== \"text/paragraph\"\n    );\n  };\n\n  const getTextContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type === \"text/paragraph\"\n    );\n  };\n\n  const TipRibbon = () =>\n    tipValue > 0 ? (\n      <div className=\"ribbon-container\">\n        <p className=\"ribbon-title\">Total Tips</p>\n        <p className=\"ribbon-value\">\n          {tipCounter} {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n        </p>\n      </div>\n    ) : null;\n\n  const parseContent = ([key, item], index) => {\n    if (item.type === \"text/paragraph\") {\n      return <p key={key}>{item.text}</p>;\n    }\n\n    if (item.type === \"image/embedded\") {\n      return (\n        <div className=\"media-container\" key={`${key}-${index}`}>\n          <img\n            className={`torrent-img-${id}-${key}`}\n            alt=\"Post Media\"\n            data-torrent={item.magnetURI}\n            data-file-key={index}\n            key={key}\n          />\n          <TipRibbon />\n        </div>\n      );\n    }\n\n    if (item.type === \"video/embedded\") {\n      return (\n        <div className=\"media-container\" key={`${key}-${index}`}>\n          <div\n            className=\"video-container\"\n            style={{\n              cursor: \"pointer\"\n            }}\n          >\n            <video\n              className={`torrent-video torrent-video-${id}-${key}`}\n              data-torrent={item.magnetURI}\n              data-file-key={index}\n              key={key}\n              controls\n              data-played=\"false\"\n            />\n            <TipRibbon />\n          </div>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  // useEffect(() => {\n  //   attachMedia();\n  // }, [contentItems.length]);\n\n  const nextSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollNext()) {\n      carouselAPI.scrollNext();\n    }\n  }, [carouselAPI]);\n\n  const prevSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollPrev()) {\n      carouselAPI.scrollPrev();\n    }\n  }, [carouselAPI]);\n\n  const handleUserKeyDown = useCallback(\n    e => {\n      if (sliderLength === 0) return;\n      const { key } = e;\n\n      if (key === \"ArrowRight\") {\n        nextSlide();\n      }\n\n      if (key === \"ArrowLeft\") {\n        prevSlide();\n      }\n    },\n    [sliderLength, prevSlide, nextSlide]\n  );\n\n  const updateActiveSlide = useCallback(() => {\n    setActiveSlide(carouselAPI.selectedScrollSnap());\n  }, [carouselAPI, setActiveSlide]);\n\n  useEffect(() => {\n    listenPath({\n      path: `posts/${id}/tipCounter`,\n      gunPointer: gunUser(publicKey),\n      callback: data => {\n        dispatch(\n          updateWallPost({\n            postID: id,\n            data: {\n              tipCounter: data\n            }\n          })\n        );\n      }\n    });\n    listenPath({\n      path: `posts/${id}/tipValue`,\n      gunPointer: gunUser(publicKey),\n      callback: data => {\n        dispatch(\n          updateWallPost({\n            postID: id,\n            data: {\n              tipValue: data\n            }\n          })\n        );\n      }\n    });\n  }, [dispatch, id, page, publicKey]);\n\n  useEffect(() => {\n    if (!carouselAPI) return;\n\n    carouselAPI.on(\"scroll\", updateActiveSlide);\n    setSliderLength(carouselAPI.scrollSnapList().length);\n    window.addEventListener(\"keydown\", handleUserKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyDown);\n      carouselAPI.off(\"scroll\", updateActiveSlide);\n    };\n  }, [carouselAPI, sliderLength, handleUserKeyDown, updateActiveSlide]);\n\n  const tipPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openTipModal({\n      targetType: \"post\",\n      postID: id\n    });\n  }, [id, isOnlineNode, openTipModal]);\n\n  useEffect(() => {\n    Tooltip.rebuild();\n  }, []);\n\n  return (\n    <div className=\"post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <div\n            className=\"av\"\n            style={{\n              backgroundImage: `url(${avatar})`\n            }}\n          ></div>\n          <div className=\"details\">\n            <p>{username}</p>\n            <p>{moment.utc(timestamp).fromNow()}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {getTextContent().map(parseContent)}\n        <div className=\"media-content-carousel\">\n          {sliderLength > 1 ? (\n            <div className=\"media-carousel-controls-container\">\n              <div\n                className=\"media-carousel-arrow fas fa-angle-left\"\n                onClick={prevSlide}\n              ></div>\n              <div className=\"media-carousel-pages\">\n                {Array.from({ length: sliderLength }).map((_, key) => (\n                  <div\n                    className={classNames({\n                      \"media-carousel-page\": true,\n                      \"active-carousel-page\": activeSlide === key\n                    })}\n                    onClick={() => carouselAPI?.scrollTo(key)}\n                  ></div>\n                ))}\n              </div>\n              <div\n                className=\"media-carousel-arrow fas fa-angle-right\"\n                onClick={nextSlide}\n              ></div>\n            </div>\n          ) : null}\n          <div className=\"media-content-root\" ref={carouselRef}>\n            <div className=\"media-content-container\">\n              {getMediaContent().map(parseContent)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"actions\">\n        <div\n          className=\"icon-tip-btn\"\n          data-tip=\"Tip this post\"\n          onClick={tipPost}\n        >\n          <div className=\"tip-icon icon-thin-feed\"></div>\n        </div>\n        {/* <div\n          className=\"tip-btn-container\"\n          onClick={tipPost}\n          data-tip={\n            isOnlineNode\n              ? tipCounter > 0\n                ? `${tipValue} Sats tipped so far`\n                : null\n              : \"You can only tip online users\"\n          }\n          style={{\n            opacity: isOnlineNode ? 1 : 0.5,\n            cursor: isOnlineNode ? \"pointer\" : \"default\"\n          }}\n        >\n          <div className=\"tip-btn-icon\">\n            <img src={lightning} alt=\"Send Tip\" />\n          </div>\n          <div className=\"tip-btn-text\">\n            <Counter value={tipCounter} /> {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n          </div>\n        </div> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n"],"sourceRoot":""}
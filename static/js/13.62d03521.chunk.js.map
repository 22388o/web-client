{"version":3,"sources":["common/Post/components/NoticeBar/index.js","common/Post/SharedPost.js"],"names":["NoticeBar","icon","text","visible","className","SharedPost","sharedPostId","sharerPublicKey","sharerUsername","sharerAvatar","sharedTimestamp","isOnlineNode","postID","postPublicKey","pinned","dispatch","useDispatch","useState","postLoading","setPostLoading","postContent","setPostContent","postUser","setPostUser","useEffect","listenPath","path","gunPointer","gunUser","callback","data","updateWallPost","tipCounter","tipValue","loadPost","useCallback","a","Promise","all","fetchUserProfile","publicKey","includeAvatar","getUserPost","id","userProfile","userPost","attachMedia","Tooltip","rebuild","style","backgroundImage","moment","utc","fromNow","Loader","Post","timestamp","date","avatar","av1","contentItems","username","displayName","alias","shared"],"mappings":"kTAgBeA,G,OAbG,SAAC,GAAsC,IAAD,IAAnCC,YAAmC,MAA5B,OAA4B,EAApBC,EAAoB,EAApBA,KAClC,OADsD,EAAdC,QAMtC,yBAAKC,UAAU,cACb,uBAAGA,UAAS,iBAAYH,KACvBC,GANI,OC6HIG,UA/GI,SAAC,GAUb,IAAD,EATJC,EASI,EATJA,aACAC,EAQI,EARJA,gBACAC,EAOI,EAPJA,eACAC,EAMI,EANJA,aACAC,EAKI,EALJA,gBACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,cACAC,EACI,EADJA,OAEMC,EAAWC,cADb,EAEkCC,oBAAS,GAF3C,mBAEGC,EAFH,KAEgBC,EAFhB,OAGkCF,mBAAS,MAH3C,mBAGGG,EAHH,KAGgBC,EAHhB,OAI4BJ,mBAAS,MAJrC,mBAIGK,EAJH,KAIaC,EAJb,KAMJC,qBAAU,WACRC,YAAW,CACTC,KAAK,SAAD,OAAWpB,EAAX,eACJqB,WAAYC,YAAQrB,GACpBsB,SAAU,SAAAC,GACRf,EACEgB,YAAe,CACbnB,OAAQN,EACRwB,KAAM,CACJE,WAAYF,SAMtBL,YAAW,CACTC,KAAK,SAAD,OAAWpB,EAAX,aACJqB,WAAYC,YAAQrB,GACpBsB,SAAU,SAAAC,GACRf,EACEgB,YAAe,CACbnB,OAAQN,EACRwB,KAAM,CACJG,SAAUH,WAMnB,CAACf,EAAUT,EAAcC,IAE5B,IAAM2B,EAAWC,sBAAW,sBAAC,kCAAAC,EAAA,yDAC3BjB,GAAe,GACVN,EAFsB,iEAGWwB,QAAQC,IAAI,CAChDC,YAAiB,CAAEC,UAAW3B,EAAe4B,eAAe,IAC5DC,YAAY,CACVC,GAAI/B,EACJe,WAAYC,YAAQf,OAPG,mCAGpB+B,EAHoB,KAGPC,EAHO,KAU3BtB,EAAYqB,GACZvB,EAAewB,GACf1B,GAAe,GACf2B,YAAY,CAACD,IAAW,GAbG,4CAc1B,CAACjC,EAAQC,IAOZ,OALAW,qBAAU,WACRuB,IAAQC,UACRd,MACC,CAACA,IAGF,yBAAK9B,UAAU,oBACb,kBAAC,EAAD,CAAWF,KAAK,cAAcC,QAASW,IACvC,yBAAKV,UAAU,QACb,yBAAKA,UAAU,QACb,yBACEA,UAAU,KACV6C,MAAO,CACLC,gBAAgB,OAAD,OAASzC,EAAT,QAGnB,yBAAKL,UAAU,WACb,2BAAII,GACJ,2BAAI2C,IAAOC,IAAI1C,GAAiB2C,cAKtC,yBAAKjD,UAAU,kBACZc,EACC,kBAACoC,EAAA,EAAD,CAAQpD,KAAK,oBACXkB,GAAeE,EACjB,kBAACiC,EAAA,QAAD,CACEZ,GAAIvB,EAAYuB,GAChBa,UAAWpC,EAAYqC,KACvBC,OACEpC,EAASoC,OAAT,gCAA2CpC,EAASoC,QAAWC,IAEjE3B,WAAYZ,EAAYY,WACxBC,SAAUb,EAAYa,SACtBO,UAAW3B,EACX+C,aAAcxC,EAAYwC,aAC1BC,SAAQ,UAAEvC,EAASwC,mBAAX,QAA0BxC,EAASyC,MAC3CpD,aAAcA,EACdqD,QAAQ,EACRlD,OAAQA,IAER","file":"static/js/13.62d03521.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./css/index.css\";\n\nconst NoticeBar = ({ icon = \"link\", text, visible }) => {\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    <div className=\"notice-bar\">\n      <i className={`fas fa-${icon}`} />\n      {text}\n    </div>\n  );\n};\n\nexport default NoticeBar;\n","import React, { useEffect, useCallback, useState } from \"react\";\nimport moment from \"moment\";\nimport Tooltip from \"react-tooltip\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  updateWallPost,\n  getUserPost,\n  fetchUserProfile\n} from \"../../actions/UserActions\";\nimport { listenPath, gunUser } from \"../../utils/Gun\";\n\nimport Post from \".\";\n\nimport av1 from \"../../images/av1.jpg\";\nimport \"../Post/css/index.css\";\nimport { attachMedia } from \"../../utils/Torrents\";\nimport Loader from \"../Loader\";\nimport NoticeBar from \"./components/NoticeBar\";\n\nconst SharedPost = ({\n  sharedPostId,\n  sharerPublicKey,\n  sharerUsername,\n  sharerAvatar,\n  sharedTimestamp,\n  isOnlineNode,\n  postID,\n  postPublicKey,\n  pinned\n}) => {\n  const dispatch = useDispatch();\n  const [postLoading, setPostLoading] = useState(true);\n  const [postContent, setPostContent] = useState(null);\n  const [postUser, setPostUser] = useState(null);\n\n  useEffect(() => {\n    listenPath({\n      path: `posts/${sharedPostId}/tipCounter`,\n      gunPointer: gunUser(sharerPublicKey),\n      callback: data => {\n        dispatch(\n          updateWallPost({\n            postID: sharedPostId,\n            data: {\n              tipCounter: data\n            }\n          })\n        );\n      }\n    });\n    listenPath({\n      path: `posts/${sharedPostId}/tipValue`,\n      gunPointer: gunUser(sharerPublicKey),\n      callback: data => {\n        dispatch(\n          updateWallPost({\n            postID: sharedPostId,\n            data: {\n              tipValue: data\n            }\n          })\n        );\n      }\n    });\n  }, [dispatch, sharedPostId, sharerPublicKey]);\n\n  const loadPost = useCallback(async () => {\n    setPostLoading(true);\n    if (!postPublicKey) return;\n    const [userProfile, userPost] = await Promise.all([\n      fetchUserProfile({ publicKey: postPublicKey, includeAvatar: true }),\n      getUserPost({\n        id: postID,\n        gunPointer: gunUser(postPublicKey)\n      })\n    ]);\n    setPostUser(userProfile);\n    setPostContent(userPost);\n    setPostLoading(false);\n    attachMedia([userPost], false);\n  }, [postID, postPublicKey]);\n\n  useEffect(() => {\n    Tooltip.rebuild();\n    loadPost();\n  }, [loadPost]);\n\n  return (\n    <div className=\"post shared-post\">\n      <NoticeBar text=\"Linked post\" visible={pinned} />\n      <div className=\"head\">\n        <div className=\"user\">\n          <div\n            className=\"av\"\n            style={{\n              backgroundImage: `url(${sharerAvatar})`\n            }}\n          ></div>\n          <div className=\"details\">\n            <p>{sharerUsername}</p>\n            <p>{moment.utc(sharedTimestamp).fromNow()}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"shared-content\">\n        {postLoading ? (\n          <Loader text=\"Loading Post...\" />\n        ) : postContent && postUser ? (\n          <Post\n            id={postContent.id}\n            timestamp={postContent.date}\n            avatar={\n              postUser.avatar ? `data:image/png;base64,${postUser.avatar}` : av1\n            }\n            tipCounter={postContent.tipCounter}\n            tipValue={postContent.tipValue}\n            publicKey={postPublicKey}\n            contentItems={postContent.contentItems}\n            username={postUser.displayName ?? postUser.alias}\n            isOnlineNode={isOnlineNode}\n            shared={true}\n            pinned={pinned}\n          />\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default SharedPost;\n"],"sourceRoot":""}
{"version":3,"sources":["images/av1.jpg","hooks/useOnlineStatus.js","common/TipModal/index.js","common/NavBar/index.js","pages/Post/index.js"],"names":["module","exports","useOnlineStatus","publicKey","dispatch","useDispatch","profile","useSelector","user","useState","lastSeenApp","setLastSeenApp","lastSeenNode","setLastSeenNode","isOnlineApp","setIsOnlineApp","isOnlineNode","setIsOnlineNode","onlineCheckTimer","setOnlineCheckTimer","updateUserStatus","useCallback","onlineThreshold","Moment","utc","subtract","isSameOrAfter","useEffect","clearTimeout","timer","setTimeout","lastSeenAppListener","listenPath","path","gunPointer","gunUser","callback","event","lastSeenNodeListener","off","TipModalContent","React","lazy","TipModal","props","modalOpen","tip","close","closeModal","loader","useMemo","text","className","onClick","fallback","placeholderIcon","NavBar","title","goBack","Post","SharedPost","PostPage","useParams","postId","type","userId","history","useHistory","pinnedPost","wall","loading","setLoading","username","displayName","alias","fetchUser","a","resetUserData","getUserProfile","getUserAvatar","fetchSelectedPost","getPinnedPost","initializeData","push","renderPost","post","avatar","av1","Loader","key","id","postID","postPublicKey","originalAuthor","sharedPostId","sharedTimestamp","date","sharerAvatar","sharerPublicKey","sharerUsername","timestamp","contentItems","page","tipValue","tipCounter","pinned"],"mappings":"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","file":"static/js/11.76a11ce0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/av1.48bf5c6a.jpg\";","import { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Moment from \"moment\";\nimport { gunUser, listenPath } from \"../utils/Gun\";\n\nconst ONLINE_INTERVAL = 30 * 1000;\n\nconst useOnlineStatus = publicKey => {\n  const dispatch = useDispatch();\n  const profile = useSelector(({ user }) => user.profile);\n\n  const [lastSeenApp, setLastSeenApp] = useState(false);\n  const [lastSeenNode, setLastSeenNode] = useState(false);\n  const [isOnlineApp, setIsOnlineApp] = useState(false);\n  const [isOnlineNode, setIsOnlineNode] = useState(false);\n  const [onlineCheckTimer, setOnlineCheckTimer] = useState();\n\n  const updateUserStatus = useCallback(() => {\n    const onlineThreshold = Moment.utc().subtract(1, \"minutes\");\n    const isOnlineNode =\n      Moment.utc(lastSeenNode).isSameOrAfter(onlineThreshold);\n    const isOnlineApp = Moment.utc(lastSeenApp).isSameOrAfter(onlineThreshold);\n\n    setIsOnlineNode(isOnlineNode);\n    setIsOnlineApp(isOnlineApp);\n  }, [lastSeenApp, lastSeenNode]);\n\n  useEffect(() => {\n    if (onlineCheckTimer) {\n      clearTimeout(onlineCheckTimer);\n    }\n\n    updateUserStatus();\n\n    const timer = setTimeout(() => {\n      updateUserStatus();\n    }, ONLINE_INTERVAL);\n\n    setOnlineCheckTimer(timer);\n\n    return () => clearTimeout(onlineCheckTimer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [profile, updateUserStatus]);\n\n  useEffect(() => {\n    const lastSeenAppListener = listenPath({\n      path: \"Profile/lastSeenApp\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        setLastSeenApp(event);\n      }\n    });\n\n    const lastSeenNodeListener = listenPath({\n      path: \"Profile/lastSeenNode\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        setLastSeenNode(event);\n      }\n    });\n\n    return () => {\n      lastSeenAppListener.off();\n      lastSeenNodeListener.off();\n    };\n  }, [dispatch, publicKey]);\n\n  return {\n    isOnlineApp,\n    isOnlineNode\n  };\n};\n\nexport default useOnlineStatus;\n","import React, { Suspense, useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { closeModal } from \"../../actions/TipActions\";\nimport Loader from \"../Loader\";\nimport \"./css/index.css\";\n\nconst TipModalContent = React.lazy(() => import(\"./components/Modal\"));\n\nconst TipModal = props => {\n  const dispatch = useDispatch();\n  const modalOpen = useSelector(({ tip }) => tip.modalOpen);\n\n  const close = useCallback(() => {\n    dispatch(closeModal());\n  }, [dispatch]);\n\n  const loader = useMemo(() => <Loader text=\"Loading...\" />, []);\n\n  if (!modalOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal-overlay\" onClick={close}></div>\n      <div className=\"modal-content\">\n        <Suspense fallback={loader}>\n          <TipModalContent {...props} />\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default TipModal;\n","import React from \"react\";\nimport \"./css/index.css\";\n\n// Placeholder to center flexbox alignment\nconst placeholderIcon = <div className=\"navbar-icon\"></div>;\n\nconst NavBar = ({ title, goBack }) => {\n  return (\n    <div className=\"navbar\">\n      {goBack ? (\n        <div className=\"navbar-icon\" onClick={goBack}>\n          <i className=\"fas fa-arrow-left\" />\n        </div>\n      ) : (\n        placeholderIcon\n      )}\n      <p className=\"navbar-title\">{title}</p>\n      {placeholderIcon}\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React, {\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  getPinnedPost,\n  getUserAvatar,\n  getUserProfile,\n  resetUserData\n} from \"../../actions/UserActions\";\nimport useOnlineStatus from \"../../hooks/useOnlineStatus\";\nimport Loader from \"../../common/Loader\";\nimport NavBar from \"../../common/NavBar\";\nimport av1 from \"../../images/av1.jpg\";\nimport \"./css/index.css\";\nimport TipModal from \"../../common/TipModal\";\n\nconst Post = React.lazy(() => import(\"../../common/Post\"));\nconst SharedPost = React.lazy(() => import(\"../../common/Post/SharedPost\"));\n\nconst PostPage = () => {\n  // Third-party hooks\n  const dispatch = useDispatch();\n  const { postId, type, userId } = useParams();\n  const history = useHistory();\n  const profile = useSelector(({ user }) => user.profile);\n  const pinnedPost = useSelector(({ user }) => user.wall?.pinnedPost);\n\n  // States\n  const [loading, setLoading] = useState(true);\n  const { isOnlineNode } = useOnlineStatus(userId);\n\n  // Memos\n  const username = useMemo(\n    () => profile.displayName ?? profile.alias ?? `POSTS`,\n    [profile.alias, profile.displayName]\n  );\n\n  // Callbacks\n  const fetchUser = useCallback(async () => {\n    dispatch(resetUserData());\n    await dispatch(getUserProfile(userId));\n    dispatch(getUserAvatar(userId));\n  }, [dispatch, userId]);\n\n  const fetchSelectedPost = useCallback(async () => {\n    dispatch(\n      getPinnedPost({\n        postId,\n        type,\n        publicKey: userId\n      })\n    );\n  }, [dispatch, postId, type, userId]);\n\n  const initializeData = useCallback(async () => {\n    setLoading(true);\n    await fetchUser();\n    fetchSelectedPost();\n    setLoading(false);\n  }, [fetchSelectedPost, fetchUser]);\n\n  const goBack = useCallback(() => {\n    history.push(`/${userId}`);\n  }, [history, userId]);\n\n  const renderPost = useCallback(\n    post => {\n      if (!post) {\n        return;\n      }\n\n      const avatar = profile.avatar\n        ? `data:image/png;base64,${profile.avatar}`\n        : av1;\n\n      if (post.type === \"shared\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <SharedPost\n              postID={post.id}\n              postPublicKey={post.originalAuthor}\n              sharedPostId={post.id}\n              sharedTimestamp={post.date}\n              sharerAvatar={avatar}\n              sharerPublicKey={userId}\n              sharerUsername={username}\n              isOnlineNode={isOnlineNode}\n            />\n          </Suspense>\n        );\n      }\n\n      if (post.type === \"post\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <Post\n              timestamp={post.date}\n              contentItems={post.contentItems}\n              username={username}\n              avatar={avatar}\n              publicKey={userId}\n              page={post.page}\n              id={post.id}\n              tipValue={post.tipValue ?? 0}\n              tipCounter={post.tipCounter ?? 0}\n              isOnlineNode={isOnlineNode}\n              pinned={true}\n            />\n          </Suspense>\n        );\n      }\n    },\n    [isOnlineNode, profile.avatar, userId, username]\n  );\n\n  // Effects\n  useEffect(() => {\n    initializeData();\n  }, [initializeData]);\n\n  if (loading) {\n    return <Loader text=\"Loading Post...\" />;\n  }\n\n  return (\n    <div className=\"post-page has-nav\">\n      <NavBar title={username} goBack={goBack} />\n      <div className=\"posts-container\">{renderPost(pinnedPost)}</div>\n      <TipModal publicKey={userId} />\n    </div>\n  );\n};\n\nexport default PostPage;\n"],"sourceRoot":""}
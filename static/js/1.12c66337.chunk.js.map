{"version":3,"sources":["common/Post/components/TipRibbon.js","common/Post/components/Video.js","common/Post/components/Image.js","common/Post/components/Stream.js","common/Post/components/ShareBtn.js","common/Post/index.js"],"names":["TipRibbon","tipCounter","tipValue","zoomed","className","style","opacity","Video","id","item","index","postId","videoRef","useRef","useState","playing","setPlaying","observe","useInView","trackVisibility","delay","onEnter","current","play","onLeave","pause","togglePlayingStatus","useCallback","updatedPlaying","console","log","videoHeight","useMemo","CSS","supports","aspectRatio","height","width","cursor","onClick","ref","classNames","data-torrent","magnetURI","data-file-key","alt","data-played","controls","Image","setZoomed","zoomLoaded","setZoomLoaded","previewVisible","setPreviewVisible","animationTimer","setAnimationTimer","handleZoomChange","value","clearTimeout","timer","setTimeout","Controlled","isZoomed","onZoomChange","overlayBgColorStart","overlayBgColorEnd","src","decodeURIComponent","replace","onLoad","STREAM_STATUS_URI","Stream","hideRibbon","playerDOM","unobserveOnEnter","inView","isLive","setIsLive","videoStyle","useEffect","recheckInterval","checkStatus","a","split","seedToken","fetch","res","json","player","videojs","autoplay","muted","type","then","setInterval","clearInterval","display","preload","autoPlay","ShareBtn","publicKey","username","pinned","contentItems","copiedLink","setCopiedLink","url","media","filter","includes","map","file","supportedFormats","format","toLowerCase","endsWith","compatibleURL","match","sanitizedUrl","thumbnail","description","text","join","metadata","title","window","location","host","metadataBase64","btoa","JSON","stringify","sharePost","navigator","share","onCopy","getShareMessage","ReactTooltip","rebuild","timeout","tooltipId","data-tip","data-for","effect","backgroundColor","getContent","Post","timestamp","avatar","isOnlineNode","dispatch","useDispatch","useEmblaCarousel","slidesToScroll","align","draggable","carouselRef","carouselAPI","post","attachMedia","sliderLength","setSliderLength","activeSlide","setActiveSlide","liveStatus","setLiveStatus","viewersCounter","setViewersCounter","values","Object","videoContent","find","streamContent","status","parseContent","key","nextSlide","canScrollNext","scrollNext","prevSlide","canScrollPrev","scrollPrev","handleUserKeyDown","e","updateActiveSlide","selectedScrollSnap","fetchPath","path","gunPointer","gunUser","method","data","tipSet","lenSet","length","tot","reduce","acc","val","Number","updateWallPost","postID","on","scrollSnapList","addEventListener","removeEventListener","off","tipPost","openModal","targetType","ackInfo","Tooltip","to","backgroundImage","moment","utc","fromNow","entries","Array","from","_","scrollTo"],"mappings":"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","file":"static/js/1.12c66337.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TipRibbon = ({ tipCounter, tipValue, zoomed }) =>\n  tipValue > 0 ? (\n    <div className=\"ribbon-container\" style={{ opacity: !zoomed ? 1 : 0 }}>\n      <p className=\"ribbon-title\">Total Tips</p>\n      <p className=\"ribbon-value\">\n        {tipCounter} {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n      </p>\n    </div>\n  ) : null;\n\nexport default TipRibbon;\n","import React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport useInView from \"react-cool-inview\";\nimport classNames from \"classnames\";\nimport TipRibbon from \"./TipRibbon\";\nimport \"../../../styles/video.js.css\";\nimport \"../css/index.css\";\n\nconst Video = ({ id, item, index, postId, tipValue, tipCounter }) => {\n  const videoRef = useRef();\n  const [playing, setPlaying] = useState(false);\n  const { observe } = useInView({\n    trackVisibility: true,\n    delay: 100,\n    onEnter: () => {\n      if (videoRef.current) {\n        setPlaying(true);\n        videoRef.current.play();\n      }\n    },\n    onLeave: () => {\n      if (!videoRef.current) {\n        return;\n      }\n\n      setPlaying(false);\n      videoRef.current.pause();\n    }\n  });\n\n  const togglePlayingStatus = useCallback(() => {\n    const updatedPlaying = !playing;\n    setPlaying(updatedPlaying);\n    if (videoRef.current) {\n      if (!updatedPlaying) {\n        videoRef.current.pause();\n        return;\n      }\n\n      console.log(\"Playing video\", updatedPlaying);\n      videoRef.current.play();\n    }\n  }, [playing]);\n\n  const videoHeight = useMemo(() => {\n    if (CSS.supports(\"aspect-ratio: 16 / 9\")) {\n      return {\n        aspectRatio: \"16 / 9\"\n      };\n    }\n\n    return {\n      height: 400\n    };\n  }, []);\n\n  return (\n    <div className=\"media-container\">\n      <div\n        className=\"video-container\"\n        style={{\n          width: \"100%\",\n          cursor: \"pointer\",\n          ...videoHeight\n        }}\n        onClick={togglePlayingStatus}\n        ref={observe}\n      >\n        <div\n          className={classNames({\n            \"thumbnail-container\": true,\n            \"video-hidden\": playing\n          })}\n        >\n          <div className=\"play-btn\">\n            <i className=\"fas fa-play\" />\n          </div>\n          <img\n            className=\"video-thumbnail\"\n            data-torrent={item.magnetURI}\n            data-file-key={index}\n            alt=\"Video thumbnail\"\n          />\n        </div>\n        <video\n          className={classNames({\n            \"torrent-video video-js vjs-default-skin\": true,\n            \"video-hidden\": !playing\n          })}\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          data-played=\"false\"\n          controls\n          ref={videoRef}\n        />\n        <TipRibbon tipCounter={tipCounter} tipValue={tipValue} />\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { useState } from \"react\";\nimport { Controlled as ControlledZoom } from \"react-medium-image-zoom\";\nimport TipRibbon from \"./TipRibbon\";\nimport \"react-medium-image-zoom/dist/styles.css\";\nimport \"../css/index.css\";\nimport { useCallback } from \"react\";\n\nconst IMAGE_TRANSITION_MS = 200;\n\nconst Image = ({ id, item, index, postId, tipValue, tipCounter }) => {\n  const [zoomed, setZoomed] = useState(false);\n  const [zoomLoaded, setZoomLoaded] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(true);\n  const [animationTimer, setAnimationTimer] = useState(null);\n\n  const handleZoomChange = useCallback(\n    value => {\n      clearTimeout(animationTimer);\n      setZoomed(value);\n      if (!value && zoomLoaded) {\n        setZoomLoaded(false);\n        const timer = setTimeout(() => {\n          setPreviewVisible(true);\n        }, IMAGE_TRANSITION_MS);\n        setAnimationTimer(timer);\n      }\n\n      if (value) {\n        setPreviewVisible(false);\n      }\n    },\n    [animationTimer, zoomLoaded]\n  );\n\n  return (\n    <div className=\"media-container\">\n      <ControlledZoom\n        isZoomed={zoomed}\n        onZoomChange={handleZoomChange}\n        overlayBgColorStart=\"#16191c00\"\n        overlayBgColorEnd=\"#16191c\"\n      >\n        <img\n          className={`torrent-img torrent-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          src={decodeURIComponent(item.magnetURI.replace(/.*(ws=)/gi, \"\"))}\n          style={{ opacity: previewVisible ? 1 : 0 }}\n        />\n        <img\n          className={`enlarged-img enlarged-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-file-key={index}\n          onLoad={() => {\n            setZoomLoaded(true);\n          }}\n          style={{ opacity: zoomLoaded ? 1 : 0 }}\n          src={decodeURIComponent(item.magnetURI.replace(/.*(ws=)/gi, \"\"))}\n        />\n        <TipRibbon\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          zoomed={zoomed}\n        />\n      </ControlledZoom>\n    </div>\n  );\n};\n\nexport default Image;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport useInView from \"react-cool-inview\";\nimport TipRibbon from \"./TipRibbon\";\nimport videojs from \"video.js\";\n\nconst REACT_APP_SL_SEED_URI = \"https://webtorrent.shock.network\";\nconst STREAM_STATUS_URI = `${REACT_APP_SL_SEED_URI}/rtmpapi/api/streams/live`;\n\nconst Stream = ({\n  id,\n  item,\n  index,\n  postId,\n  tipValue,\n  tipCounter,\n  hideRibbon,\n  width\n}) => {\n  const playerDOM = useRef(null);\n  const { inView, observe } = useInView({\n    trackVisibility: true,\n    delay: 100,\n    unobserveOnEnter: true\n  });\n  const [isLive, setIsLive] = useState(false);\n  const videoStyle = { width: \"100%\" };\n  if (width) {\n    videoStyle.width = width;\n  }\n  useEffect(() => {\n    if (!item || !inView) {\n      return;\n    }\n\n    let recheckInterval = null;\n    const checkStatus = async () => {\n      try {\n        //TODO regex (?) `${REACT_APP_SL_RTMP_API_URI}/live/${seedToken}/index.m3u8`\n        const [seedToken] = item.magnetURI\n          .replace(/.*(\\/live\\/)/, \"\")\n          .split(\"/index.m3u8\");\n        const res = await fetch(`${STREAM_STATUS_URI}/${seedToken}`);\n        const resJ = await res.json();\n        if (!resJ.isLive) {\n          return false;\n        }\n        const player = videojs(playerDOM.current, {\n          autoplay: true,\n          muted: true,\n          aspectRatio: \"16:9\"\n        });\n        player.src({\n          src: item.magnetURI,\n          type: \"application/x-mpegURL\"\n        });\n        /*listen for 404s from the player\n        player.tech().on('retryplaylist', () => {\n          console.log('retryplaylist');\n        });*/\n        player.play();\n        return true;\n      } catch (err) {\n        console.log(err);\n        return false;\n      }\n    };\n    checkStatus().then(isLive => {\n      if (isLive) {\n        setIsLive(true);\n        return;\n      }\n      recheckInterval = setInterval(async () => {\n        const isLive = await checkStatus();\n        if (isLive) {\n          setIsLive(true);\n          clearInterval(recheckInterval);\n          return;\n        }\n      }, 10000);\n    });\n\n    return () => {\n      clearInterval(recheckInterval);\n    };\n  }, [item, inView]);\n  return (\n    <div className=\"media-container w-100\">\n      <div\n        className=\"video-container w-100\"\n        style={{\n          cursor: \"pointer\",\n          width: \"100%\"\n        }}\n      >\n        {!isLive && <p>The streamer has disconnected.</p>}\n        <div\n          style={\n            isLive ? { width: \"100%\" } : { display: \"none\", width: \"100%\" }\n          }\n          ref={observe}\n        >\n          <video\n            className=\"video-js vjs-default-skin\"\n            ref={playerDOM}\n            style={videoStyle}\n            preload=\"auto\"\n            controls\n            muted\n            autoPlay\n          />\n        </div>\n        {!hideRibbon && (\n          <TipRibbon\n            tipCounter={tipCounter}\n            tipValue={tipValue}\n            zoomed={false}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Stream;\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport CopyClipboard from \"react-copy-to-clipboard\";\nimport { supportedFormats } from \"../../../utils/Torrents\";\n\nconst ShareBtn = ({ publicKey, id, username, pinned, contentItems = [] }) => {\n  const [copiedLink, setCopiedLink] = useState(false);\n  const url = useMemo(() => {\n    const media = contentItems\n      .filter(item => [\"image/embedded\", \"video/embedded\"].includes(item.type))\n      .map((item, index) => {\n        const file = item.magnetURI.replace(/.*(ws=)/gi, \"\");\n        const type = item.type.replace(\"/embedded\", \"\");\n        const [compatibleURL] = supportedFormats.filter(format =>\n          file.toLowerCase().endsWith(`.${format.toLowerCase()}`)\n        );\n\n        if (compatibleURL) {\n          return {\n            url: compatibleURL,\n            type\n          };\n        }\n\n        const [url] =\n          item.magnetURI.match(/(?<=^magnet:\\?xs=)([\\w\\d]).*torrent/gi, \"\") ??\n          [];\n        const sanitizedUrl = decodeURIComponent(\n          url?.replace(\".torrent\", \"\") ?? \"\"\n        );\n\n        return {\n          url: `${sanitizedUrl}/${type}-${index}.mp4`,\n          thumbnail: `${sanitizedUrl}/${type}-${index}-thumb.png`,\n          type\n        };\n      });\n\n    const description =\n      contentItems\n        .filter(item => item.type === \"text/paragraph\")\n        .map(item => item.text)\n        .join(\"\\n\") || `View ${username}'s posts on ShockWallet`;\n\n    const metadata = {\n      title: `${username} Post`,\n      url: `https://${window.location.host}/${publicKey}/post/${id}`,\n      type: `website`,\n      media,\n      description\n    };\n\n    const metadataBase64 = btoa(JSON.stringify(metadata));\n    const shareLink = `https://${window.location.host}/${publicKey}/post/${id}?metadata=${metadataBase64}`;\n\n    return shareLink;\n  }, [contentItems, username, publicKey, id]);\n\n  const sharePost = useCallback(async () => {\n    if (navigator.share) {\n      navigator.share({\n        text: `Check out this post from ${username} on ShockWallet!`,\n        url\n      });\n      return;\n    }\n  }, [username, url]);\n\n  const onCopy = useCallback(() => {\n    setCopiedLink(true);\n  }, []);\n\n  const getShareMessage = useCallback(\n    () => (copiedLink ? \"Post link copied!\" : \"Share this post\"),\n    [copiedLink]\n  );\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n    const timeout = setTimeout(() => {\n      setCopiedLink(false);\n      ReactTooltip.rebuild();\n    }, 1000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [copiedLink]);\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n  }, []);\n\n  if (!navigator.share) {\n    const tooltipId = `share-${publicKey}-${pinned ? \"pinned\" : \"\"}-${id}`;\n    return (\n      <CopyClipboard text={url} onCopy={onCopy}>\n        <div className=\"share-btn-container\">\n          <div\n            className=\"share-btn\"\n            data-tip={getShareMessage()}\n            data-for={tooltipId}\n          >\n            <i className=\"fas fa-external-link-alt\"></i>\n          </div>\n          <ReactTooltip\n            effect=\"solid\"\n            backgroundColor=\"#3a4d67\"\n            getContent={[getShareMessage, 30]}\n            id={tooltipId}\n          />\n        </div>\n      </CopyClipboard>\n    );\n  }\n\n  return (\n    <div className=\"share-btn\" onClick={sharePost}>\n      <i className=\"fas fa-external-link-alt\"></i>\n    </div>\n  );\n};\n\nexport default ShareBtn;\n","import React, { useEffect, useCallback, useState } from \"react\";\nimport moment from \"moment\";\nimport Tooltip from \"react-tooltip\";\nimport { useDispatch } from \"react-redux\";\nimport { useEmblaCarousel } from \"embla-carousel/react\";\nimport classNames from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport useInView from \"react-cool-inview\";\nimport { updateWallPost } from \"../../actions/UserActions\";\nimport { openModal } from \"../../actions/TipActions\";\nimport { gunUser, fetchPath } from \"../../utils/Gun\";\nimport Video from \"./components/Video\";\nimport Image from \"./components/Image\";\nimport Stream from \"./components/Stream\";\nimport ShareBtn from \"./components/ShareBtn\";\nimport \"./css/index.css\";\nimport { attachMedia } from \"../../utils/Torrents\";\n\nconst Post = ({\n  id,\n  timestamp,\n  avatar,\n  tipCounter,\n  tipValue,\n  publicKey,\n  contentItems = {},\n  username,\n  isOnlineNode,\n  pinned\n}) => {\n  const dispatch = useDispatch();\n  const [carouselRef, carouselAPI] = useEmblaCarousel({\n    slidesToScroll: 1,\n    align: \"center\",\n    draggable: false\n  });\n  const { observe } = useInView({\n    trackVisibility: false,\n    unobserveOnEnter: true,\n    onEnter: () => {\n      const post = { contentItems, id };\n      attachMedia([post], false);\n    }\n  });\n\n  const [sliderLength, setSliderLength] = useState(0);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const [liveStatus, setLiveStatus] = useState(\"\");\n  const [viewersCounter, setViewersCounter] = useState(0);\n\n  //effect for liveStatus and viewers counter\n  useEffect(() => {\n    const values = Object.values(contentItems);\n    const videoContent = values.find(\n      item => item.type === \"video/embedded\" && item.liveStatus === \"wasLive\"\n    );\n    const streamContent = values.find(\n      item => item.type === \"stream/embedded\" && item.liveStatus === \"live\"\n    );\n    let status = \"\";\n    if (videoContent) {\n      status = \"was Live\";\n    }\n    if (streamContent) {\n      status = \"is Live\";\n      if (streamContent.viewersCounter) {\n        setViewersCounter(streamContent.viewersCounter);\n      }\n    }\n    if (status) {\n      setLiveStatus(status);\n    }\n  }, [contentItems, setLiveStatus]);\n\n  const getMediaContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type !== \"text/paragraph\"\n    );\n  };\n\n  const getTextContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type === \"text/paragraph\"\n    );\n  };\n\n  const parseContent = ([key, item], index) => {\n    if (item.type === \"text/paragraph\") {\n      return <p key={key}>{item.text}</p>;\n    }\n\n    if (item.type === \"image/embedded\") {\n      return (\n        <Image\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    if (item.type === \"video/embedded\") {\n      return (\n        <Video\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    if (item.type === \"stream/embedded\") {\n      return (\n        <Stream\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const nextSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollNext()) {\n      carouselAPI.scrollNext();\n    }\n  }, [carouselAPI]);\n\n  const prevSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollPrev()) {\n      carouselAPI.scrollPrev();\n    }\n  }, [carouselAPI]);\n\n  const handleUserKeyDown = useCallback(\n    e => {\n      if (sliderLength === 0) return;\n      const { key } = e;\n\n      if (key === \"ArrowRight\") {\n        nextSlide();\n      }\n\n      if (key === \"ArrowLeft\") {\n        prevSlide();\n      }\n    },\n    [sliderLength, prevSlide, nextSlide]\n  );\n\n  const updateActiveSlide = useCallback(() => {\n    setActiveSlide(carouselAPI.selectedScrollSnap());\n  }, [carouselAPI, setActiveSlide]);\n\n  useEffect(() => {\n    fetchPath({\n      path: `posts/${id}/tipsSet`,\n      gunPointer: gunUser(publicKey),\n      method: \"load\"\n    }).then(data => {\n      const tipSet = data ? Object.values(data) : [];\n      const lenSet = tipSet.length;\n      const tot =\n        lenSet > 0 ? tipSet.reduce((acc, val) => Number(val) + Number(acc)) : 0;\n      dispatch(\n        updateWallPost({\n          postID: id,\n          data: {\n            tipValue: tot,\n            tipCounter: lenSet\n          }\n        })\n      );\n    });\n  }, [dispatch, id, publicKey]);\n\n  useEffect(() => {\n    if (!carouselAPI) return;\n\n    carouselAPI.on(\"scroll\", updateActiveSlide);\n    setSliderLength(carouselAPI.scrollSnapList().length);\n    window.addEventListener(\"keydown\", handleUserKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyDown);\n      carouselAPI.off(\"scroll\", updateActiveSlide);\n    };\n  }, [carouselAPI, sliderLength, handleUserKeyDown, updateActiveSlide]);\n\n  const tipPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    dispatch(\n      openModal({\n        targetType: \"tip\",\n        ackInfo: id\n      })\n    );\n  }, [dispatch, id, isOnlineNode]);\n\n  useEffect(() => {\n    Tooltip.rebuild();\n  }, []);\n\n  return (\n    <div className=\"post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <Link\n            className=\"av\"\n            to={`/${publicKey}`}\n            style={{\n              backgroundImage: `url(${avatar})`\n            }}\n          />\n          <div className=\"details\">\n            <div className=\"username\">\n              <Link to={`/${publicKey}`}>{username}</Link>\n              {liveStatus && (\n                <p className=\"liveStatus\">\n                  {liveStatus}\n                  <i\n                    className={`fas fa-circle liveStatusIcon ${\n                      liveStatus === \"Is Live\" ? \"liveIcon\" : \"\"\n                    }`}\n                  ></i>\n                  {liveStatus === \"Is Live\" && (\n                    <span> | {viewersCounter} watching</span>\n                  )}\n                </p>\n              )}\n            </div>\n            <p>{moment.utc(timestamp).fromNow()}</p>\n          </div>\n        </div>\n        <ShareBtn\n          publicKey={publicKey}\n          id={id}\n          username={username}\n          pinned={pinned}\n          contentItems={contentItems}\n        />\n      </div>\n\n      <div className=\"content\" ref={observe}>\n        {getTextContent().map(parseContent)}\n        <div className=\"media-content-carousel\">\n          {sliderLength > 1 ? (\n            <div className=\"media-carousel-controls-container\">\n              <div\n                className=\"media-carousel-arrow fas fa-angle-left\"\n                onClick={prevSlide}\n              ></div>\n              <div className=\"media-carousel-pages\">\n                {Array.from({ length: sliderLength }).map((_, key) => (\n                  <div\n                    className={classNames({\n                      \"media-carousel-page\": true,\n                      \"active-carousel-page\": activeSlide === key\n                    })}\n                    onClick={() => carouselAPI?.scrollTo(key)}\n                  ></div>\n                ))}\n              </div>\n              <div\n                className=\"media-carousel-arrow fas fa-angle-right\"\n                onClick={nextSlide}\n              ></div>\n            </div>\n          ) : null}\n          <div className=\"media-content-root\" ref={carouselRef}>\n            <div className=\"media-content-container\">\n              {getMediaContent().map(parseContent)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"actions\">\n        <div\n          className=\"icon-tip-btn\"\n          data-tip=\"Tip this post\"\n          onClick={tipPost}\n        >\n          <i className=\"tip-icon icon-thin-feed\"></i>\n        </div>\n        {/* <div\n          className=\"tip-btn-container\"\n          onClick={tipPost}\n          data-tip={\n            isOnlineNode\n              ? tipCounter > 0\n                ? `${tipValue} Sats tipped so far`\n                : null\n              : \"You can only tip online users\"\n          }\n          style={{\n            opacity: isOnlineNode ? 1 : 0.5,\n            cursor: isOnlineNode ? \"pointer\" : \"default\"\n          }}\n        >\n          <div className=\"tip-btn-icon\">\n            <img src={lightning} alt=\"Send Tip\" />\n          </div>\n          <div className=\"tip-btn-text\">\n            <Counter value={tipCounter} /> {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n          </div>\n        </div> */}\n        <Tooltip backgroundColor=\"#3a4d67\" effect=\"solid\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n"],"sourceRoot":""}
{"version":3,"sources":["common/Post/components/TipRibbon.js","common/Post/components/Video.js","common/Post/components/Image.js","common/Post/components/Stream.js","common/Post/index.js","common/Post/SharedPost.js"],"names":["TipRibbon","tipCounter","tipValue","zoomed","className","style","opacity","Video","id","item","index","postId","cursor","data-torrent","magnetURI","data-file-key","controls","data-played","Image","useState","setZoomed","zoomLoaded","setZoomLoaded","previewVisible","setPreviewVisible","animationTimer","setAnimationTimer","handleZoomChange","useCallback","value","clearTimeout","timer","setTimeout","Controlled","isZoomed","onZoomChange","overlayBgColorStart","overlayBgColorEnd","alt","onLoad","src","decodeURIComponent","split","STREAM_STATUS_URI","Stream","hideRibbon","width","playerDOM","useRef","isLive","setIsLive","videoStyle","useEffect","recheckInterval","checkStatus","a","seedToken","fetch","res","json","player","videojs","current","autoplay","muted","aspectRatio","type","play","console","log","then","setInterval","clearInterval","display","ref","preload","autoPlay","Post","timestamp","avatar","publicKey","openTipModal","contentItems","username","isOnlineNode","dispatch","useDispatch","useEmblaCarousel","slidesToScroll","align","carouselRef","carouselAPI","sliderLength","setSliderLength","activeSlide","setActiveSlide","parseContent","key","text","nextSlide","canScrollNext","scrollNext","prevSlide","canScrollPrev","scrollPrev","handleUserKeyDown","e","updateActiveSlide","selectedScrollSnap","fetchPath","path","gunPointer","gunUser","method","data","tipSet","Object","values","lenSet","length","tot","reduce","acc","val","Number","updateWallPost","postID","on","scrollSnapList","window","addEventListener","removeEventListener","off","tipPost","targetType","ackInfo","Tooltip","rebuild","to","backgroundImage","moment","utc","fromNow","entries","filter","map","onClick","Array","from","_","classNames","scrollTo","data-tip","SharedPost","sharedPostId","sharerPublicKey","sharerUsername","sharerAvatar","sharedTimestamp","postPublicKey","postLoading","setPostLoading","postContent","setPostContent","postUser","setPostUser","listenPath","callback","loadPost","Promise","all","fetchUserProfile","includeAvatar","getUserPost","userProfile","userPost","attachMedia","date","av1","displayName","alias"],"mappings":"kPAYeA,EAVG,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,OAAzB,OAChBD,EAAW,EACT,yBAAKE,UAAU,mBAAmBC,MAAO,CAAEC,QAAUH,EAAa,EAAJ,IAC5D,uBAAGC,UAAU,gBAAb,cACA,uBAAGA,UAAU,gBACVH,EADH,IAC+B,IAAfA,EAAmB,MAAQ,SAG3C,MCgBSM,EAtBD,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,GAAIC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,OAAQT,EAA2B,EAA3BA,SAAUD,EAAiB,EAAjBA,WAClD,OACE,yBAAKG,UAAU,mBACb,yBACEA,UAAU,kBACVC,MAAO,CACLO,OAAQ,YAGV,2BACER,UAAS,sCAAiCO,EAAjC,YAA2CH,GACpDK,eAAcJ,EAAKK,UACnBC,gBAAeL,EACfM,UAAQ,EACRC,cAAY,UAEd,kBAAC,EAAD,CAAWhB,WAAYA,EAAYC,SAAUA,O,SCiDtCgB,G,OA5DD,SAAC,GAAuD,IAArDV,EAAoD,EAApDA,GAAIC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,OAAQT,EAA2B,EAA3BA,SAAUD,EAAiB,EAAjBA,WAAiB,EACvCkB,oBAAS,GAD8B,mBAC5DhB,EAD4D,KACpDiB,EADoD,OAE/BD,oBAAS,GAFsB,mBAE5DE,EAF4D,KAEhDC,EAFgD,OAGvBH,oBAAS,GAHc,mBAG5DI,EAH4D,KAG5CC,EAH4C,OAIvBL,mBAAS,MAJc,mBAI5DM,EAJ4D,KAI5CC,EAJ4C,KAM7DC,EAAmBC,uBACvB,SAAAC,GAGE,GAFAC,aAAaL,GACbL,EAAUS,IACLA,GAASR,EAAY,CACxBC,GAAc,GACd,IAAMS,EAAQC,YAAW,WACvBR,GAAkB,KAfA,KAiBpBE,EAAkBK,GAGhBF,GACFL,GAAkB,KAGtB,CAACC,EAAgBJ,IAGnB,OACE,yBAAKjB,UAAU,mBACb,kBAAC6B,EAAA,EAAD,CACEC,SAAU/B,EACVgC,aAAcR,EACdS,oBAAoB,YACpBC,kBAAkB,WAElB,yBACEjC,UAAS,kCAA6BO,EAA7B,YAAuCH,GAChD8B,IAAI,aACJzB,eAAcJ,EAAKK,UACnBC,gBAAeL,EACfL,MAAO,CAAEC,QAASiB,EAAiB,EAAI,KAEzC,yBACEnB,UAAS,oCAA+BO,EAA/B,YAAyCH,GAClD8B,IAAI,aACJvB,gBAAeL,EACf6B,OAAQ,WACNjB,GAAc,IAEhBjB,MAAO,CAAEC,QAASe,EAAa,EAAI,GACnCmB,IAAKC,mBAAmBhC,EAAKK,UAAU4B,MAAM,OAAO,MAEtD,kBAAC,EAAD,CACEzC,WAAYA,EACZC,SAAUA,EACVC,OAAQA,Q,gCCzDZwC,EAAiB,UADO,mCACP,6BA6FRC,EA3FA,SAAC,GAAwE,EAAtEpC,GAAuE,IAAnEC,EAAkE,EAAlEA,KAAqBP,GAA6C,EAA5DQ,MAA4D,EAArDC,OAAqD,EAA7CT,UAAUD,EAAmC,EAAnCA,WAAY4C,EAAuB,EAAvBA,WAAWC,EAAY,EAAZA,MACpEC,EAAYC,iBAAO,MAD6D,EAE3D7B,oBAAS,GAFkD,mBAE/E8B,EAF+E,KAExEC,EAFwE,KAGhFC,EAAa,CAAEL,MAAM,QA6D3B,OA5DGA,IACDK,EAAWL,MAAQA,GAErBM,qBAAU,WACR,GAAI3C,EAAJ,CAIA,IAAI4C,EAAkB,KAChBC,EAAW,uCAAG,oCAAAC,EAAA,wEAGI9C,EAAKK,UAAU4B,MAAM,UAAU,GAAGA,MAAM,eAH5C,mBAGTc,EAHS,cAIEC,MAAM,GAAD,OAAId,EAAJ,YAAyBa,IAJhC,cAIVE,EAJU,gBAKGA,EAAIC,OALP,iBAMPV,OANO,2CAOP,GAPO,eASVW,EAASC,YAAQd,EAAUe,QAAS,CACxCC,UAAU,EACVC,OAAO,EACPC,YAAa,UAGRzB,IAAI,CACTA,IAAK/B,EAAKK,UACVoD,KAAM,0BAMRN,EAAOO,OAvBS,mBAwBT,GAxBS,yCA0BhBC,QAAQC,IAAR,MA1BgB,mBA2BT,GA3BS,0DAAH,qDA8CjB,OAhBAf,IACCgB,MAAK,SAAArB,GACDA,EACDC,GAAU,GAGZG,EAAkBkB,YAAW,sBAAC,sBAAAhB,EAAA,sEACPD,IADO,yCAG1BJ,GAAU,GACVsB,cAAcnB,GAJY,8DAO5B,QAGG,WACLmB,cAAcnB,OAGhB,CAAC5C,IAED,yBAAKL,UAAU,yBACb,yBACEA,UAAU,wBACVC,MAAO,CACLO,OAAQ,UACRkC,MAAM,UAGNG,GAAU,6DACZ,yBAAK5C,MAAO4C,EAAS,CAACH,MAAM,QAAU,CAAC2B,QAAQ,OAAO3B,MAAM,SAC5D,2BACE1C,UAAU,4BACVsE,IAAK3B,EACL1C,MAAO8C,EACPwB,QAAQ,OACR3D,UAAQ,EACRgD,OAAK,EACLY,UAAQ,MAGR/B,GAAc,kBAAC,EAAD,CAAW5C,WAAYA,EAAYC,SAAUA,EAAUC,QAAQ,O,QC0LxE0E,UAxQF,SAAC,GAWP,IAVLrE,EAUI,EAVJA,GACAsE,EASI,EATJA,UACAC,EAQI,EARJA,OACA9E,EAOI,EAPJA,WACAC,EAMI,EANJA,SACA8E,EAKI,EALJA,UACAC,EAII,EAJJA,aAII,IAHJC,oBAGI,MAHW,GAGX,EAFJC,EAEI,EAFJA,SACAC,EACI,EADJA,aAEMC,EAAWC,cADb,EAE+BC,2BAAiB,CAClDC,eAAgB,EAChBC,MAAO,WAJL,mBAEGC,EAFH,KAEgBC,EAFhB,OAOoCxE,mBAAS,GAP7C,mBAOGyE,EAPH,KAOiBC,EAPjB,OAQkC1E,mBAAS,GAR3C,mBAQG2E,EARH,KAQgBC,EARhB,KAsBEC,EAAe,SAAC,EAAatF,GAAW,IAAD,mBAAtBuF,EAAsB,KAAjBxF,EAAiB,KAC3C,MAAkB,mBAAdA,EAAKyD,KACA,uBAAG+B,IAAKA,GAAMxF,EAAKyF,MAGV,mBAAdzF,EAAKyD,KAEL,kBAAC,EAAD,CACE1D,GAAIyF,EACJxF,KAAMA,EACNC,MAAOA,EACPC,OAAQH,EACRP,WAAYA,EACZC,SAAUA,EACV+F,IAAG,UAAKzF,EAAL,YAAWE,KAKF,mBAAdD,EAAKyD,KAEL,kBAAC,EAAD,CACE1D,GAAIyF,EACJxF,KAAMA,EACNC,MAAOA,EACPC,OAAQH,EACRP,WAAYA,EACZC,SAAUA,EACV+F,IAAG,UAAKzF,EAAL,YAAWE,KAKF,oBAAdD,EAAKyD,KAEL,kBAAC,EAAD,CACE1D,GAAIyF,EACJxF,KAAMA,EACNC,MAAOA,EACPC,OAAQH,EACRP,WAAYA,EACZC,SAAUA,EACV+F,IAAG,UAAKzF,EAAL,YAAWE,KAKb,MAOHyF,EAAYvE,uBAAY,WACvB+D,GAEDA,EAAYS,iBACdT,EAAYU,eAEb,CAACV,IAEEW,EAAY1E,uBAAY,WACvB+D,GAEDA,EAAYY,iBACdZ,EAAYa,eAEb,CAACb,IAEEc,EAAoB7E,uBACxB,SAAA8E,GACE,GAAqB,IAAjBd,EAAJ,CADG,IAEKK,EAAQS,EAART,IAEI,eAARA,GACFE,IAGU,cAARF,GACFK,OAGJ,CAACV,EAAcU,EAAWH,IAGtBQ,EAAoB/E,uBAAY,WACpCmE,EAAeJ,EAAYiB,wBAC1B,CAACjB,EAAaI,IAEjB3C,qBAAU,WACRyD,YAAU,CACRC,KAAK,SAAD,OAAUtG,EAAV,YACJuG,WAAYC,YAAQhC,GACpBiC,OAAO,SACN3C,MAAK,SAAA4C,GACN,IAAMC,EAASD,EACXE,OAAOC,OAAOH,GACd,GACEI,EAASH,EAAOI,OAChBC,EACJF,EAAS,EACPH,EAAOM,QAAO,SAACC,EAAKC,GAAN,OAAcC,OAAOD,GAAOC,OAAOF,MACjD,EACJrC,EACEwC,YAAe,CACbC,OAAQtH,EACR0G,KAAM,CACJhH,SAAUsH,EACVvH,WAAYqH,WAKnB,CAACjC,EAAU7E,EAAIwE,IAElB5B,qBAAU,WACR,GAAKuC,EAML,OAJAA,EAAYoC,GAAG,SAAUpB,GACzBd,EAAgBF,EAAYqC,iBAAiBT,QAC7CU,OAAOC,iBAAiB,UAAWzB,GAE5B,WACLwB,OAAOE,oBAAoB,UAAW1B,GACtCd,EAAYyC,IAAI,SAAUzB,MAE3B,CAAChB,EAAaC,EAAca,EAAmBE,IAElD,IAAM0B,EAAUzG,uBAAY,WACrBwD,GAILH,EAAa,CACXqD,WAAY,MACZC,QAAS/H,MAEV,CAACA,EAAI4E,EAAcH,IAMtB,OAJA7B,qBAAU,WACRoF,IAAQC,YACP,IAGD,yBAAKrI,UAAU,QACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CACEA,UAAU,KACVsI,GAAE,WAAM1D,GACR3E,MAAO,CACLsI,gBAAgB,OAAD,OAAS5D,EAAT,QAGnB,yBAAK3E,UAAU,WACb,kBAAC,IAAD,CAAMsI,GAAE,WAAM1D,IAAcG,GAC5B,2BAAIyD,IAAOC,IAAI/D,GAAWgE,cAKhC,yBAAK1I,UAAU,WAvKVgH,OAAO2B,QAAQ7D,GAAc8D,QAClC,+CAA6B,mBAA7B,KAAoB9E,QAuKA+E,IAAIjD,GACtB,yBAAK5F,UAAU,0BACZwF,EAAe,EACd,yBAAKxF,UAAU,qCACb,yBACEA,UAAU,yCACV8I,QAAS5C,IAEX,yBAAKlG,UAAU,wBACZ+I,MAAMC,KAAK,CAAE7B,OAAQ3B,IAAgBqD,KAAI,SAACI,EAAGpD,GAAJ,OACxC,yBACE7F,UAAWkJ,IAAW,CACpB,uBAAuB,EACvB,uBAAwBxD,IAAgBG,IAE1CiD,QAAS,yBAAMvD,QAAN,IAAMA,OAAN,EAAMA,EAAa4D,SAAStD,UAI3C,yBACE7F,UAAU,0CACV8I,QAAS/C,KAGX,KACJ,yBAAK/F,UAAU,qBAAqBsE,IAAKgB,GACvC,yBAAKtF,UAAU,2BAxMhBgH,OAAO2B,QAAQ7D,GAAc8D,QAClC,+CAA6B,mBAA7B,KAAoB9E,QAwMO+E,IAAIjD,OAM/B,yBAAK5F,UAAU,WACb,yBACEA,UAAU,eACVoJ,WAAS,gBACTN,QAASb,GAET,yBAAKjI,UAAU,iC,uOChHVqJ,UAvHI,SAAC,GAUb,IAAD,EATJC,EASI,EATJA,aACAC,EAQI,EARJA,gBACAC,EAOI,EAPJA,eACAC,EAMI,EANJA,aACAC,EAKI,EALJA,gBACA1E,EAII,EAJJA,aACA0C,EAGI,EAHJA,OACAiC,EAEI,EAFJA,cACA9E,EACI,EADJA,aAEMI,EAAWC,cADb,EAEkCnE,oBAAS,GAF3C,mBAEG6I,EAFH,KAEgBC,EAFhB,OAGkC9I,mBAAS,MAH3C,mBAGG+I,EAHH,KAGgBC,EAHhB,OAI4BhJ,mBAAS,MAJrC,mBAIGiJ,EAJH,KAIaC,EAJb,KAMJjH,qBAAU,WACRkH,YAAW,CACTxD,KAAK,SAAD,OAAW4C,EAAX,eACJ3C,WAAYC,YAAQ2C,GACpBY,SAAU,SAAArD,GACR7B,EACEwC,YAAe,CACbC,OAAQ4B,EACRxC,KAAM,CACJjH,WAAYiH,SAMtBoD,YAAW,CACTxD,KAAK,SAAD,OAAW4C,EAAX,aACJ3C,WAAYC,YAAQ2C,GACpBY,SAAU,SAAArD,GACR7B,EACEwC,YAAe,CACbC,OAAQ4B,EACRxC,KAAM,CACJhH,SAAUgH,WAMnB,CAAC7B,EAAUqE,EAAcC,IAE5B,IAAMa,EAAW5I,sBAAW,sBAAC,kCAAA2B,EAAA,yDAC3B0G,GAAe,GACVF,EAFsB,iEAGWU,QAAQC,IAAI,CAChDC,YAAiB,CAAE3F,UAAW+E,EAAea,eAAe,IAC5DC,YAAY,CACVrK,GAAIsH,EACJf,WAAYC,YAAQ+C,OAPG,mCAGpBe,EAHoB,KAGPC,EAHO,KAU3BV,EAAYS,GACZX,EAAeY,GACfd,GAAe,GACfe,YAAY,CAACD,IAAW,GAbG,4CAc1B,CAACjD,EAAQiC,IAOZ,OALA3G,qBAAU,WACRoF,IAAQC,UACR+B,MACC,CAACA,IAGF,yBAAKpK,UAAU,oBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QACb,yBACEA,UAAU,KACVC,MAAO,CACLsI,gBAAgB,OAAD,OAASkB,EAAT,QAGnB,yBAAKzJ,UAAU,WACb,2BAAIwJ,GACJ,2BAAIhB,IAAOC,IAAIiB,GAAiBhB,cAKtC,yBAAK1I,UAAU,kBACZ4J,EACC,kBAAC,IAAD,CAAQ9D,KAAK,oBACXgE,GAAeE,EACjB,kBAAC,UAAD,CACE5J,GAAI0J,EAAY1J,GAChBsE,UAAWoF,EAAYe,KACvBlG,OACEqF,EAASrF,OAAT,gCAA2CqF,EAASrF,QAAWmG,IAEjEjL,WAAYiK,EAAYjK,WACxBC,SAAUgK,EAAYhK,SACtB8E,UAAW+E,EACX9E,aAAcA,EACdC,aAAcgF,EAAYhF,aAC1BC,SAAQ,UAAEiF,EAASe,mBAAX,QAA0Bf,EAASgB,MAC3ChG,aAAcA,IAEd,S","file":"static/js/6.66879c11.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TipRibbon = ({ tipCounter, tipValue, zoomed }) =>\n  tipValue > 0 ? (\n    <div className=\"ribbon-container\" style={{ opacity: !zoomed ? 1 : 0 }}>\n      <p className=\"ribbon-title\">Total Tips</p>\n      <p className=\"ribbon-value\">\n        {tipCounter} {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n      </p>\n    </div>\n  ) : null;\n\nexport default TipRibbon;\n","import React from \"react\";\nimport TipRibbon from \"./TipRibbon\";\nimport \"../css/index.css\";\n\nconst Video = ({ id, item, index, postId, tipValue, tipCounter }) => {\n  return (\n    <div className=\"media-container\">\n      <div\n        className=\"video-container\"\n        style={{\n          cursor: \"pointer\"\n        }}\n      >\n        <video\n          className={`torrent-video torrent-video-${postId}-${id}`}\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          controls\n          data-played=\"false\"\n        />\n        <TipRibbon tipCounter={tipCounter} tipValue={tipValue} />\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { useState } from \"react\";\nimport { Controlled as ControlledZoom } from \"react-medium-image-zoom\";\nimport TipRibbon from \"./TipRibbon\";\nimport \"react-medium-image-zoom/dist/styles.css\";\nimport \"../css/index.css\";\nimport { useCallback } from \"react\";\n\nconst IMAGE_TRANSITION_MS = 200;\n\nconst Image = ({ id, item, index, postId, tipValue, tipCounter }) => {\n  const [zoomed, setZoomed] = useState(false);\n  const [zoomLoaded, setZoomLoaded] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(true);\n  const [animationTimer, setAnimationTimer] = useState(null);\n\n  const handleZoomChange = useCallback(\n    value => {\n      clearTimeout(animationTimer);\n      setZoomed(value);\n      if (!value && zoomLoaded) {\n        setZoomLoaded(false);\n        const timer = setTimeout(() => {\n          setPreviewVisible(true);\n        }, IMAGE_TRANSITION_MS);\n        setAnimationTimer(timer);\n      }\n\n      if (value) {\n        setPreviewVisible(false);\n      }\n    },\n    [animationTimer, zoomLoaded]\n  );\n\n  return (\n    <div className=\"media-container\">\n      <ControlledZoom\n        isZoomed={zoomed}\n        onZoomChange={handleZoomChange}\n        overlayBgColorStart=\"#16191c00\"\n        overlayBgColorEnd=\"#16191c\"\n      >\n        <img\n          className={`torrent-img torrent-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          style={{ opacity: previewVisible ? 1 : 0 }}\n        />\n        <img\n          className={`enlarged-img enlarged-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-file-key={index}\n          onLoad={() => {\n            setZoomLoaded(true);\n          }}\n          style={{ opacity: zoomLoaded ? 1 : 0 }}\n          src={decodeURIComponent(item.magnetURI.split(\"ws=\")[1])}\n        />\n        <TipRibbon\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          zoomed={zoomed}\n        />\n      </ControlledZoom>\n    </div>\n  );\n};\n\nexport default Image;\n","import React, {    useRef, useEffect,useState } from \"react\";\nimport TipRibbon from \"./TipRibbon\";\nimport videojs from \"video.js\";\n\nconst REACT_APP_SL_SEED_URI = \"https://webtorrent.shock.network\"\nconst STREAM_STATUS_URI = `${REACT_APP_SL_SEED_URI}/rtmpapi/api/streams/live`\n\nconst Stream = ({ id, item, index, postId, tipValue, tipCounter, hideRibbon,width }) => {\n  const playerDOM = useRef(null)\n  const [isLive,setIsLive] = useState(false)\n  const videoStyle = { width:\"100%\"}\n  if(width){\n    videoStyle.width = width\n  }\n  useEffect(() => {\n    if(!item){\n      return\n    }\n    \n    let recheckInterval = null\n    const checkStatus = async () => {\n      try{\n        //TODO regex (?) `${REACT_APP_SL_RTMP_API_URI}/live/${seedToken}/index.m3u8`\n        const [seedToken] = item.magnetURI.split(\"/live/\")[1].split(\"/index.m3u8\") \n        const res = await fetch(`${STREAM_STATUS_URI}/${seedToken}`)\n        const resJ = await res.json()\n        if(!resJ.isLive){\n          return false\n        }\n        const player = videojs(playerDOM.current, {\n          autoplay: true,\n          muted: true,\n          aspectRatio: \"16:9\",\n          \n        });\n        player.src({\n          src: item.magnetURI,\n          type: \"application/x-mpegURL\"\n        });\n        /*listen for 404s from the player\n        player.tech().on('retryplaylist', () => {\n          console.log('retryplaylist');\n        });*/\n        player.play();\n        return true\n      }catch(err){\n        console.log(err)\n        return false\n      }\n    }\n    checkStatus()\n    .then(isLive => {\n      if(isLive){\n        setIsLive(true)\n        return\n      }\n      recheckInterval = setInterval(async ()=> {\n        const isLive = await checkStatus()\n        if(isLive){\n          setIsLive(true)\n          clearInterval(recheckInterval)\n          return\n        }\n      },10000)\n    })\n    \n    return () => {\n      clearInterval(recheckInterval)\n    }\n    \n  },[item])\n  return (\n    <div className=\"media-container w-100\">\n      <div\n        className=\"video-container w-100\"\n        style={{\n          cursor: \"pointer\",\n          width:\"100%\"\n        }}\n      >\n        {!isLive && <p>The streamer has disconnected.</p>}\n        <div style={isLive ? {width:\"100%\"} : {display:'none',width:\"100%\"}}>\n        <video\n          className=\"video-js vjs-default-skin\"\n          ref={playerDOM}\n          style={videoStyle}\n          preload=\"auto\"\n          controls\n          muted\n          autoPlay\n        />\n        </div>\n        {!hideRibbon && <TipRibbon tipCounter={tipCounter} tipValue={tipValue} zoomed={false} />}\n      </div>\n    </div>\n  );\n};\n\nexport default Stream;\n","import React, { useEffect, useCallback, useState } from \"react\";\nimport moment from \"moment\";\nimport Tooltip from \"react-tooltip\";\nimport { useDispatch } from \"react-redux\";\nimport { useEmblaCarousel } from \"embla-carousel/react\";\nimport classNames from \"classnames\";\nimport { updateWallPost } from \"../../actions/UserActions\";\nimport \"./css/index.css\";\nimport { gunUser, fetchPath } from \"../../utils/Gun\";\nimport Video from \"./components/Video\";\nimport Image from \"./components/Image\";\nimport Stream from \"./components/Stream\";\nimport { Link } from \"react-router-dom\";\n\nconst Post = ({\n  id,\n  timestamp,\n  avatar,\n  tipCounter,\n  tipValue,\n  publicKey,\n  openTipModal,\n  contentItems = {},\n  username,\n  isOnlineNode\n}) => {\n  const dispatch = useDispatch();\n  const [carouselRef, carouselAPI] = useEmblaCarousel({\n    slidesToScroll: 1,\n    align: \"center\"\n  });\n\n  const [sliderLength, setSliderLength] = useState(0);\n  const [activeSlide, setActiveSlide] = useState(0);\n\n  const getMediaContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type !== \"text/paragraph\"\n    );\n  };\n\n  const getTextContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type === \"text/paragraph\"\n    );\n  };\n\n  const parseContent = ([key, item], index) => {\n    if (item.type === \"text/paragraph\") {\n      return <p key={key}>{item.text}</p>;\n    }\n\n    if (item.type === \"image/embedded\") {\n      return (\n        <Image\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    if (item.type === \"video/embedded\") {\n      return (\n        <Video\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    if (item.type === \"stream/embedded\") {\n      return (\n        <Stream\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  // useEffect(() => {\n  //   attachMedia();\n  // }, [contentItems.length]);\n\n  const nextSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollNext()) {\n      carouselAPI.scrollNext();\n    }\n  }, [carouselAPI]);\n\n  const prevSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollPrev()) {\n      carouselAPI.scrollPrev();\n    }\n  }, [carouselAPI]);\n\n  const handleUserKeyDown = useCallback(\n    e => {\n      if (sliderLength === 0) return;\n      const { key } = e;\n\n      if (key === \"ArrowRight\") {\n        nextSlide();\n      }\n\n      if (key === \"ArrowLeft\") {\n        prevSlide();\n      }\n    },\n    [sliderLength, prevSlide, nextSlide]\n  );\n\n  const updateActiveSlide = useCallback(() => {\n    setActiveSlide(carouselAPI.selectedScrollSnap());\n  }, [carouselAPI, setActiveSlide]);\n\n  useEffect(() => {\n    fetchPath({\n      path:`posts/${id}/tipsSet`,\n      gunPointer: gunUser(publicKey),\n      method:'load'\n    }).then(data => {\n      const tipSet = data\n        ? Object.values(data)\n        : [];\n      const lenSet = tipSet.length;\n      const tot =\n        lenSet > 0\n        ? tipSet.reduce((acc, val) => Number(val) + Number(acc))\n        : 0;\n      dispatch(\n        updateWallPost({\n          postID: id,\n          data: {\n            tipValue: tot,\n            tipCounter: lenSet\n          }\n        })\n      );\n    })\n  }, [dispatch, id, publicKey]);\n\n  useEffect(() => {\n    if (!carouselAPI) return;\n\n    carouselAPI.on(\"scroll\", updateActiveSlide);\n    setSliderLength(carouselAPI.scrollSnapList().length);\n    window.addEventListener(\"keydown\", handleUserKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyDown);\n      carouselAPI.off(\"scroll\", updateActiveSlide);\n    };\n  }, [carouselAPI, sliderLength, handleUserKeyDown, updateActiveSlide]);\n\n  const tipPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openTipModal({\n      targetType: \"tip\",\n      ackInfo: id\n    });\n  }, [id, isOnlineNode, openTipModal]);\n\n  useEffect(() => {\n    Tooltip.rebuild();\n  }, []);\n\n  return (\n    <div className=\"post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <Link\n            className=\"av\"\n            to={`/${publicKey}`}\n            style={{\n              backgroundImage: `url(${avatar})`\n            }}\n          />\n          <div className=\"details\">\n            <Link to={`/${publicKey}`}>{username}</Link>\n            <p>{moment.utc(timestamp).fromNow()}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {getTextContent().map(parseContent)}\n        <div className=\"media-content-carousel\">\n          {sliderLength > 1 ? (\n            <div className=\"media-carousel-controls-container\">\n              <div\n                className=\"media-carousel-arrow fas fa-angle-left\"\n                onClick={prevSlide}\n              ></div>\n              <div className=\"media-carousel-pages\">\n                {Array.from({ length: sliderLength }).map((_, key) => (\n                  <div\n                    className={classNames({\n                      \"media-carousel-page\": true,\n                      \"active-carousel-page\": activeSlide === key\n                    })}\n                    onClick={() => carouselAPI?.scrollTo(key)}\n                  ></div>\n                ))}\n              </div>\n              <div\n                className=\"media-carousel-arrow fas fa-angle-right\"\n                onClick={nextSlide}\n              ></div>\n            </div>\n          ) : null}\n          <div className=\"media-content-root\" ref={carouselRef}>\n            <div className=\"media-content-container\">\n              {getMediaContent().map(parseContent)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"actions\">\n        <div\n          className=\"icon-tip-btn\"\n          data-tip=\"Tip this post\"\n          onClick={tipPost}\n        >\n          <div className=\"tip-icon icon-thin-feed\"></div>\n        </div>\n        {/* <div\n          className=\"tip-btn-container\"\n          onClick={tipPost}\n          data-tip={\n            isOnlineNode\n              ? tipCounter > 0\n                ? `${tipValue} Sats tipped so far`\n                : null\n              : \"You can only tip online users\"\n          }\n          style={{\n            opacity: isOnlineNode ? 1 : 0.5,\n            cursor: isOnlineNode ? \"pointer\" : \"default\"\n          }}\n        >\n          <div className=\"tip-btn-icon\">\n            <img src={lightning} alt=\"Send Tip\" />\n          </div>\n          <div className=\"tip-btn-text\">\n            <Counter value={tipCounter} /> {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n          </div>\n        </div> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React, { useEffect, useCallback, useState } from \"react\";\nimport moment from \"moment\";\nimport Tooltip from \"react-tooltip\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  updateWallPost,\n  getUserPost,\n  fetchUserProfile\n} from \"../../actions/UserActions\";\nimport { listenPath, gunUser, Gun } from \"../../utils/Gun\";\n\nimport Post from \".\";\n\nimport av1 from \"../../images/av1.jpg\";\nimport \"../Post/css/index.css\";\nimport { attachMedia } from \"../../utils/Torrents\";\nimport Loader from \"../Loader\";\n\nconst SharedPost = ({\n  sharedPostId,\n  sharerPublicKey,\n  sharerUsername,\n  sharerAvatar,\n  sharedTimestamp,\n  isOnlineNode,\n  postID,\n  postPublicKey,\n  openTipModal\n}) => {\n  const dispatch = useDispatch();\n  const [postLoading, setPostLoading] = useState(true);\n  const [postContent, setPostContent] = useState(null);\n  const [postUser, setPostUser] = useState(null);\n\n  useEffect(() => {\n    listenPath({\n      path: `posts/${sharedPostId}/tipCounter`,\n      gunPointer: gunUser(sharerPublicKey),\n      callback: data => {\n        dispatch(\n          updateWallPost({\n            postID: sharedPostId,\n            data: {\n              tipCounter: data\n            }\n          })\n        );\n      }\n    });\n    listenPath({\n      path: `posts/${sharedPostId}/tipValue`,\n      gunPointer: gunUser(sharerPublicKey),\n      callback: data => {\n        dispatch(\n          updateWallPost({\n            postID: sharedPostId,\n            data: {\n              tipValue: data\n            }\n          })\n        );\n      }\n    });\n  }, [dispatch, sharedPostId, sharerPublicKey]);\n\n  const loadPost = useCallback(async () => {\n    setPostLoading(true);\n    if (!postPublicKey) return;\n    const [userProfile, userPost] = await Promise.all([\n      fetchUserProfile({ publicKey: postPublicKey, includeAvatar: true }),\n      getUserPost({\n        id: postID,\n        gunPointer: gunUser(postPublicKey)\n      })\n    ]);\n    setPostUser(userProfile);\n    setPostContent(userPost);\n    setPostLoading(false);\n    attachMedia([userPost], false);\n  }, [postID, postPublicKey]);\n\n  useEffect(() => {\n    Tooltip.rebuild();\n    loadPost();\n  }, [loadPost]);\n\n  return (\n    <div className=\"post shared-post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <div\n            className=\"av\"\n            style={{\n              backgroundImage: `url(${sharerAvatar})`\n            }}\n          ></div>\n          <div className=\"details\">\n            <p>{sharerUsername}</p>\n            <p>{moment.utc(sharedTimestamp).fromNow()}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"shared-content\">\n        {postLoading ? (\n          <Loader text=\"Loading Post...\" />\n        ) : postContent && postUser ? (\n          <Post\n            id={postContent.id}\n            timestamp={postContent.date}\n            avatar={\n              postUser.avatar ? `data:image/png;base64,${postUser.avatar}` : av1\n            }\n            tipCounter={postContent.tipCounter}\n            tipValue={postContent.tipValue}\n            publicKey={postPublicKey}\n            openTipModal={openTipModal}\n            contentItems={postContent.contentItems}\n            username={postUser.displayName ?? postUser.alias}\n            isOnlineNode={isOnlineNode}\n          />\n        ) : null}\n      </div>\n\n      {/* <div className=\"actions\">\n        <div\n          className=\"icon-tip-btn\"\n          data-tip=\"Tip this post\"\n          onClick={tipPost}\n        >\n          <div className=\"tip-icon icon-thin-feed\"></div>\n        </div>\n      </div> */}\n    </div>\n  );\n};\n\nexport default SharedPost;\n"],"sourceRoot":""}
{"version":3,"sources":["images/av1.jpg","hooks/useOnlineStatus.js","common/TipModal/index.js","common/NavBar/index.js","pages/Post/index.js","utils/Cache.js","utils/Promise.js","utils/Torrents.js"],"names":["module","exports","useOnlineStatus","publicKey","dispatch","useDispatch","profile","useSelector","user","useState","lastSeenApp","setLastSeenApp","lastSeenNode","setLastSeenNode","isOnlineApp","setIsOnlineApp","isOnlineNode","setIsOnlineNode","onlineCheckTimer","setOnlineCheckTimer","updateUserStatus","useCallback","onlineThreshold","Moment","utc","subtract","isSameOrAfter","useEffect","clearTimeout","timer","setTimeout","lastSeenAppListener","listenPath","path","gunPointer","gunUser","callback","event","lastSeenNodeListener","off","TipModalContent","React","lazy","TipModal","props","modalOpen","tip","close","closeModal","loader","useMemo","text","className","onClick","fallback","placeholderIcon","NavBar","title","goBack","Post","SharedPost","PostPage","useParams","postId","type","userId","history","useHistory","pinnedPost","wall","loading","setLoading","username","displayName","alias","fetchUser","a","resetUserData","getUserProfile","getUserAvatar","fetchSelectedPost","getPinnedPost","initializeData","push","renderPost","post","avatar","av1","Loader","key","id","postID","postPublicKey","originalAuthor","sharedPostId","sharedTimestamp","date","sharerAvatar","sharerPublicKey","sharerUsername","timestamp","contentItems","page","tipValue","tipCounter","pinned","getCachedFile","fileName","FileCache","_init","Promise","resolve","reject","init","then","console","log","persist","status","persistent","load","cachedFile","createURL","warn","renderCachedFile","fileURL","selector","elements","document","querySelectorAll","length","forEach","element","src","muted","saveFile","buffer","save","runSerial","tasks","result","task","supportedFileTypes","formats","options","autoplay","supportedFormats","Object","values","reduce","fileType","_getFileType","file","extension","name","split","slice","entries","filter","includes","supportedFileType","webTorrentClient","initializeClient","WebTorrent","default","showDynamicThumbnail","thumbnailFile","item","thumbnailFileType","thumbnailTarget","magnetURI","dynamicThumbnailTarget","querySelector","classList","add","remove","getCacheId","renderTorrent","torrentMode","torrent","target","torrentElements","torrentElement","contains","contentURL","decodeURIComponent","replace","format","toLowerCase","endsWith","compatibleURL","setAttribute","renderTo","getThumbnailRenderer","thumbnailFileNames","getCacheFileName","thumbnails","sanitizedName","join","thumbnailName","thumbnailIndex","indexOf","cachedThumbnail","attachMedia","posts","all","map","supportedItems","get","files","match","renderThumbnail","destroy","on","getBlob","err","blob","dataset","played","getAttribute","torrentTasks","torrents"],"mappings":"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","file":"static/js/11.a4d07975.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/av1.48bf5c6a.jpg\";","import { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Moment from \"moment\";\nimport { gunUser, listenPath } from \"../utils/Gun\";\n\nconst ONLINE_INTERVAL = 30 * 1000;\n\nconst useOnlineStatus = publicKey => {\n  const dispatch = useDispatch();\n  const profile = useSelector(({ user }) => user.profile);\n\n  const [lastSeenApp, setLastSeenApp] = useState(false);\n  const [lastSeenNode, setLastSeenNode] = useState(false);\n  const [isOnlineApp, setIsOnlineApp] = useState(false);\n  const [isOnlineNode, setIsOnlineNode] = useState(false);\n  const [onlineCheckTimer, setOnlineCheckTimer] = useState();\n\n  const updateUserStatus = useCallback(() => {\n    const onlineThreshold = Moment.utc().subtract(1, \"minutes\");\n    const isOnlineNode =\n      Moment.utc(lastSeenNode).isSameOrAfter(onlineThreshold);\n    const isOnlineApp = Moment.utc(lastSeenApp).isSameOrAfter(onlineThreshold);\n\n    setIsOnlineNode(isOnlineNode);\n    setIsOnlineApp(isOnlineApp);\n  }, [lastSeenApp, lastSeenNode]);\n\n  useEffect(() => {\n    if (onlineCheckTimer) {\n      clearTimeout(onlineCheckTimer);\n    }\n\n    updateUserStatus();\n\n    const timer = setTimeout(() => {\n      updateUserStatus();\n    }, ONLINE_INTERVAL);\n\n    setOnlineCheckTimer(timer);\n\n    return () => clearTimeout(onlineCheckTimer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [profile, updateUserStatus]);\n\n  useEffect(() => {\n    const lastSeenAppListener = listenPath({\n      path: \"Profile/lastSeenApp\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        setLastSeenApp(event);\n      }\n    });\n\n    const lastSeenNodeListener = listenPath({\n      path: \"Profile/lastSeenNode\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        setLastSeenNode(event);\n      }\n    });\n\n    return () => {\n      lastSeenAppListener.off();\n      lastSeenNodeListener.off();\n    };\n  }, [dispatch, publicKey]);\n\n  return {\n    isOnlineApp,\n    isOnlineNode\n  };\n};\n\nexport default useOnlineStatus;\n","import React, { Suspense, useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { closeModal } from \"../../actions/TipActions\";\nimport Loader from \"../Loader\";\nimport \"./css/index.css\";\n\nconst TipModalContent = React.lazy(() => import(\"./components/Modal\"));\n\nconst TipModal = props => {\n  const dispatch = useDispatch();\n  const modalOpen = useSelector(({ tip }) => tip.modalOpen);\n\n  const close = useCallback(() => {\n    dispatch(closeModal());\n  }, [dispatch]);\n\n  const loader = useMemo(() => <Loader text=\"Loading...\" />, []);\n\n  if (!modalOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal-overlay\" onClick={close}></div>\n      <div className=\"modal-content\">\n        <Suspense fallback={loader}>\n          <TipModalContent {...props} />\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default TipModal;\n","import React from \"react\";\nimport \"./css/index.css\";\n\n// Placeholder to center flexbox alignment\nconst placeholderIcon = <div className=\"navbar-icon\"></div>;\n\nconst NavBar = ({ title, goBack }) => {\n  return (\n    <div className=\"navbar\">\n      {goBack ? (\n        <div className=\"navbar-icon\" onClick={goBack}>\n          <i className=\"fas fa-arrow-left\" />\n        </div>\n      ) : (\n        placeholderIcon\n      )}\n      <p className=\"navbar-title\">{title}</p>\n      {placeholderIcon}\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React, {\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  getPinnedPost,\n  getUserAvatar,\n  getUserProfile,\n  resetUserData\n} from \"../../actions/UserActions\";\nimport { attachMedia } from \"../../utils/Torrents\";\nimport useOnlineStatus from \"../../hooks/useOnlineStatus\";\nimport Loader from \"../../common/Loader\";\nimport NavBar from \"../../common/NavBar\";\nimport av1 from \"../../images/av1.jpg\";\nimport \"./css/index.css\";\nimport TipModal from \"../../common/TipModal\";\n\nconst Post = React.lazy(() => import(\"../../common/Post\"));\nconst SharedPost = React.lazy(() => import(\"../../common/Post/SharedPost\"));\n\nconst PostPage = () => {\n  // Third-party hooks\n  const dispatch = useDispatch();\n  const { postId, type, userId } = useParams();\n  const history = useHistory();\n  const profile = useSelector(({ user }) => user.profile);\n  const pinnedPost = useSelector(({ user }) => user.wall?.pinnedPost);\n\n  // States\n  const [loading, setLoading] = useState(true);\n  const { isOnlineNode } = useOnlineStatus(userId);\n\n  // Memos\n  const username = useMemo(\n    () => profile.displayName ?? profile.alias ?? `POSTS`,\n    [profile.alias, profile.displayName]\n  );\n\n  // Callbacks\n  const fetchUser = useCallback(async () => {\n    dispatch(resetUserData());\n    await dispatch(getUserProfile(userId));\n    dispatch(getUserAvatar(userId));\n  }, [dispatch, userId]);\n\n  const fetchSelectedPost = useCallback(async () => {\n    dispatch(\n      getPinnedPost({\n        postId,\n        type,\n        publicKey: userId\n      })\n    );\n  }, [dispatch, postId, type, userId]);\n\n  const initializeData = useCallback(async () => {\n    setLoading(true);\n    await fetchUser();\n    fetchSelectedPost();\n    setLoading(false);\n  }, [fetchSelectedPost, fetchUser]);\n\n  const goBack = useCallback(() => {\n    history.push(`/${userId}`);\n  }, [history, userId]);\n\n  const renderPost = useCallback(\n    post => {\n      if (!post) {\n        return;\n      }\n\n      const avatar = profile.avatar\n        ? `data:image/png;base64,${profile.avatar}`\n        : av1;\n\n      if (post.type === \"shared\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <SharedPost\n              postID={post.id}\n              postPublicKey={post.originalAuthor}\n              sharedPostId={post.id}\n              sharedTimestamp={post.date}\n              sharerAvatar={avatar}\n              sharerPublicKey={userId}\n              sharerUsername={username}\n              isOnlineNode={isOnlineNode}\n            />\n          </Suspense>\n        );\n      }\n\n      if (post.type === \"post\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <Post\n              timestamp={post.date}\n              contentItems={post.contentItems}\n              username={username}\n              avatar={avatar}\n              publicKey={userId}\n              page={post.page}\n              id={post.id}\n              tipValue={post.tipValue ?? 0}\n              tipCounter={post.tipCounter ?? 0}\n              isOnlineNode={isOnlineNode}\n              pinned={true}\n            />\n          </Suspense>\n        );\n      }\n    },\n    [isOnlineNode, profile.avatar, userId, username]\n  );\n\n  // Effects\n  useEffect(() => {\n    initializeData();\n  }, [initializeData]);\n\n  if (loading) {\n    return <Loader text=\"Loading Post...\" />;\n  }\n\n  return (\n    <div className=\"post-page has-nav\">\n      <NavBar title={username} goBack={goBack} />\n      <div className=\"posts-container\">{renderPost(pinnedPost)}</div>\n      <TipModal publicKey={userId} />\n    </div>\n  );\n};\n\nexport default PostPage;\n","import FileCache from \"browser-file-storage\";\n\nexport const DB_NAME = \"ShockWalletStore\";\n\nexport const init = () =>\n  new Promise((resolve, reject) => {\n    FileCache.init(DB_NAME)\n      .then(() => {\n        console.log(\"File cache initialized!\");\n        return FileCache.persist();\n      })\n      .then(status => {\n        if (status.persistent) {\n          resolve(status);\n        } else {\n          reject(status);\n        }\n      });\n  });\n\nexport const getCachedFile = async fileName => {\n  try {\n    if (!FileCache._init) {\n      await init();\n    }\n\n    const cachedFile = await FileCache.load(fileName);\n    return cachedFile.createURL();\n  } catch (err) {\n    console.warn(err);\n    return false;\n  }\n};\n\nexport const renderCachedFile = (fileURL, selector) => {\n  const elements = document.querySelectorAll(selector);\n  if (elements && elements.length) {\n    elements.forEach(element => {\n      element.src = fileURL;\n      element.muted = true;\n    });\n  }\n  return !!elements && !!elements.length;\n};\n\nexport const saveFile = (fileName, buffer) => {\n  return FileCache.save(fileName, buffer);\n};\n","export const runSerial = tasks => {\n  let result = Promise.resolve();\n  tasks.forEach(task => {\n    result = result.then(() => task());\n  });\n  return result;\n};\n","import { getCachedFile, renderCachedFile, saveFile } from \"./Cache\";\nimport { runSerial } from \"./Promise\";\n\nexport const supportedFileTypes = {\n  \"video/embedded\": {\n    formats: [\"mp4\", \"webm\"],\n    element: \"video\",\n    options: {\n      autoplay: false,\n      muted: true\n    }\n  },\n  \"image/embedded\": {\n    formats: [\"jpg\", \"png\", \"webp\", \"jpeg\"],\n    element: \"img\",\n    options: {}\n  }\n};\n\nexport const supportedFormats = Object.values(supportedFileTypes).reduce(\n  (supportedFormats, fileType) => [...supportedFormats, ...fileType.formats],\n  []\n);\n\nconst _getFileType = file => {\n  if (!file) {\n    return null;\n  }\n\n  const extension = file.name?.split(\".\")?.slice(-1)[0];\n  const [supportedFileType] = Object.entries(supportedFileTypes).filter(\n    ([type, options]) => options.formats.includes(extension)\n  );\n\n  if (supportedFileType) {\n    const [name, fileType] = supportedFileType;\n    return {\n      name,\n      ...fileType\n    };\n  }\n\n  return null;\n};\n\nexport let webTorrentClient = null;\n\nexport const initializeClient = async () => {\n  if (!webTorrentClient) {\n    const WebTorrent = await import(\"webtorrent\");\n    webTorrentClient = new WebTorrent.default();\n  }\n\n  return webTorrentClient;\n};\n\nconst showDynamicThumbnail = ({ thumbnailFile, fileType, item }) => {\n  const thumbnailFileType = _getFileType(thumbnailFile);\n  const thumbnailTarget = `${\n    thumbnailFileType?.element ?? \"img\"\n  }[data-torrent=\"${item.magnetURI}\"]`;\n  const dynamicThumbnailTarget = `.dynamic-thumbnail[data-torrent=\"${item.magnetURI}\"]`;\n\n  if (!thumbnailFile && fileType.element === \"video\") {\n    document.querySelector(thumbnailTarget).classList.add(\"hidden\");\n    document.querySelector(dynamicThumbnailTarget).classList.remove(\"hidden\");\n  }\n};\n\nconst getCacheId =\n  ({ id, key }) =>\n  file =>\n    `${id}-${key}-${file.name}`;\n\nconst renderTorrent = ({ file, type, torrentMode, torrent }) => {\n  const element = type.element;\n  const target = `${element}[data-torrent=\"${torrent.magnetURI}\"]`;\n  const torrentElements = document.querySelectorAll(target);\n  console.log(\"Torrent Elements:\", torrentElements);\n  torrentElements.forEach(torrentElement => {\n    // Don't render hidden videos\n    if (torrentElement.classList.contains(\"hidden\")) {\n      return;\n    }\n    const contentURL = decodeURIComponent(\n      torrent.magnetURI.replace(/.*(ws=)/gi, \"\")\n    );\n    const [compatibleURL] = type.formats.filter(format =>\n      contentURL.toLowerCase().endsWith(`.${format.toLowerCase()}`)\n    );\n\n    if (torrentMode || !compatibleURL) {\n      file.renderTo(torrentElement, type.options);\n      return;\n    }\n\n    torrentElement.setAttribute(\"src\", contentURL);\n  });\n};\n\nconst getThumbnailRenderer =\n  ({ thumbnailFileNames, getCacheFileName, torrentMode }) =>\n  async ({ fileName, thumbnails, item, fileType }) => {\n    const sanitizedName = fileName.split(\".\").slice(0, -1).join(\".\");\n    const thumbnailName = `${sanitizedName}-thumb`;\n    const thumbnailIndex = thumbnailFileNames.indexOf(thumbnailName);\n    const thumbnailFile = thumbnails[thumbnailIndex];\n    const thumbnailFileType = thumbnailFile\n      ? _getFileType(thumbnailFile)\n      : null;\n    const thumbnailTarget = `${\n      thumbnailFileType?.element ?? \"img\"\n    }[data-torrent=\"${item.magnetURI}\"]`;\n\n    if (fileType.element === \"video\" && thumbnailFile) {\n      const cachedThumbnail = await getCachedFile(\n        getCacheFileName(thumbnailFile)\n      );\n\n      if (cachedThumbnail) {\n        renderCachedFile(cachedThumbnail, thumbnailTarget);\n        return;\n      }\n\n      renderTorrent({\n        file: thumbnailFile,\n        type: thumbnailFileType,\n        torrentMode,\n        torrent: item\n      });\n\n      return;\n    }\n\n    if (fileType.element === \"video\" && !thumbnailFile) {\n      showDynamicThumbnail({\n        thumbnailFile,\n        fileType,\n        item\n      });\n\n      return;\n    }\n\n    return {\n      thumbnailFile\n    };\n  };\n\nexport const attachMedia = async (posts = [], torrentMode = true) => {\n  const torrentTasks = await Promise.all(\n    posts.map(async post => {\n      const { contentItems, id } = post;\n      const supportedItems = Object.entries(contentItems).filter(\n        ([, item]) => supportedFileTypes[item.type]\n      );\n\n      if (!supportedItems) {\n        return [];\n      }\n\n      const webTorrentClient = await initializeClient();\n\n      return supportedItems.map(\n        ([key, item]) =>\n          () =>\n            new Promise(resolve => {\n              const getCacheFileName = getCacheId({ id, key });\n              const torrentExists = webTorrentClient.get(item.magnetURI);\n\n              if (torrentExists) {\n                resolve(true);\n                return;\n              }\n\n              webTorrentClient.add(item.magnetURI, async torrent => {\n                // Proceed to the next torrent in queue\n                resolve(true);\n\n                const files = torrent.files.filter(file => {\n                  const extension = file.name?.split(\".\")?.slice(-1)[0];\n                  const supportedFileType = Object.values(\n                    supportedFileTypes\n                  ).filter(options => options.formats.includes(extension))[0];\n                  if (supportedFileType) {\n                    const fileType = supportedFileType;\n                    const matched = fileType.formats.includes(extension);\n                    return matched;\n                  }\n                  return false;\n                });\n\n                const thumbnails = files.filter(file =>\n                  file.name.match(/-thumb\\.([\\w\\d]){2,4}$/gi)\n                );\n                const thumbnailFileNames = thumbnails.map(file =>\n                  file.name.replace(/\\.([\\w\\d]){2,4}$/gi, \"\")\n                );\n                const renderThumbnail = getThumbnailRenderer({\n                  getCacheFileName,\n                  thumbnailFileNames,\n                  torrentMode\n                });\n\n                files.map(async file => {\n                  // Skip thumbnails\n                  if (thumbnailFileNames.includes(file.name)) {\n                    return;\n                  }\n\n                  const fileType = _getFileType(file);\n\n                  if (!fileType) {\n                    return;\n                  }\n\n                  const fileName = getCacheFileName(file);\n\n                  const element = fileType.element;\n                  const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n                  const cachedFile = await getCachedFile(fileName);\n\n                  renderThumbnail({\n                    fileName: file.name,\n                    thumbnails,\n                    fileType,\n                    item\n                  });\n\n                  if (cachedFile) {\n                    const torrent = webTorrentClient.get(item.magnetURI);\n\n                    if (torrent) {\n                      torrent.destroy();\n                    }\n\n                    renderCachedFile(cachedFile, target);\n                    return;\n                  }\n\n                  renderTorrent({\n                    file,\n                    type: fileType,\n                    torrentMode,\n                    torrent: item\n                  });\n                });\n\n                torrent.on(\"done\", () => {\n                  files.map(file => {\n                    const fileType = _getFileType(file);\n                    const fileName = getCacheFileName(file);\n                    const element = fileType.element;\n                    const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n\n                    file.getBlob(async (err, blob) => {\n                      if (err) {\n                        console.warn(err);\n                        return;\n                      }\n\n                      console.log(\"Caching loaded file...\", fileName, blob);\n                      await saveFile(fileName, blob);\n                      const element = document.querySelector(target);\n                      if (\n                        element?.dataset.played === \"false\" &&\n                        !element?.getAttribute(\"src\")\n                      ) {\n                        const cachedFile = await getCachedFile(fileName);\n                        renderCachedFile(cachedFile, target);\n                      }\n                    });\n                  });\n                });\n              });\n            })\n      );\n    })\n  );\n  const contentItems = torrentTasks.reduce(\n    (torrents, contentItems) => [...torrents, ...contentItems],\n    []\n  );\n\n  runSerial(contentItems);\n};\n"],"sourceRoot":""}
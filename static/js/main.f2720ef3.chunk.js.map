{"version":3,"sources":["utils/Gun.js","actions/UserActions.js","actions/TipActions.js","utils/Prerender.js","common/Loader/index.js","../node_modules/gun sync","actions/AuthActions.js","common/DownloadBtn/index.js","App.js","reducers/UserReducer.js","reducers/AuthReducer.js","reducers/TipReducer.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["peersConfig","data","JSON","parse","err","safeParse","process","PEERS","peers","wait","ms","Promise","resolve","reject","setTimeout","_randomString","length","randomString","randomChar","n","Math","floor","random","String","fromCharCode","_filterGunProps","key","_isIncompleteGunResponse","console","log","undefined","Array","isArray","reduce","empty","item","stringifiedData","stringify","filteredGunProps","Object","entries","filter","warn","parseGunPath","path","gunPointer","node","Gun","split","get","GunDB","window","gun","fetchPath","retryDelay","retryLimit","retryCondition","method","_retryCount","_fallbackResult","parsedRetryLimit","isCrawler","parsedRetryDelay","GunContext","event","a","retryResult","setPath","response","set","listenPath","callback","on","createRandomGunUser","randomAlias","randomPass","user","create","error","field","message","_error","_event","alias","pass","authUser","auth","gunUser","publicKey","Error","$$_SHOCKWALLET__ENCRYPTED__","$$__SHOCKWALLET__MSG__","ACTIONS","LOAD_USER_WALL","LOAD_USER_WALL_TOTAL_PAGES","RESET_USER_WALL","PIN_WALL_POST","UPDATE_WALL_POST","LOAD_WALL_POST_INFO","LOAD_WALL_POST_CONTENT","LOAD_WALL_POST_CONTENT_LENGTH","RESET_USER_DATA","LOAD_USER_DATA","LOAD_USER_AVATAR","UPDATE_USER_PROFILE","getUserAvatar","dispatch","avatar","type","getUserHeader","header","fetchUserProfile","includeAvatar","all","bio","displayName","lastSeenApp","lastSeenNode","getUserProfile","getUserPost","id","wallPostKey","contentItemsKey","start","Date","now","wallPost","contentItems","filteredContentItems","map","text","magnetURI","width","height","liveStatus","playbackMagnet","viewersCounter","finalType","finalMagnet","fetchedContentItems","getSharedPost","sharedGunPointer","sharedPostKey","sharedPost","date","shareDate","originalAuthor","getUserWallPostInfo","postInfo","getUserWallPostContent","contentId","contentItem","getUserPosts","rawPosts","filteredRawPosts","content","fetchedPosts","posts","page","getUserSharedPosts","rawSharedPosts","filteredRawSharedPosts","getUserWall","any","getPinnedPost","postId","post","updateUserProfile","updateWallPost","resetUserWall","resetUserData","LOAD_PAYMENT_REQUEST","RESET_PAYMENT_REQUEST","OPEN_TIP_MODAL","CLOSE_TIP_MODAL","UPDATE_METADATA","openModal","metadata","closeModal","payUser","senderPair","recipientPublicKey","amount","me","recipientUser","recipientUserEPub","orderAddress","SEA","secret","sea","encrypt","toString","encryptedAmount","encryptedMemo","order","from","pub","memo","timestamp","newOrder","_","slice","newOrderId","encryptedOrder","decrypt","replace","decryptedResponse","decryptedOrder","paymentRequest","ackNode","navigator","userAgent","includes","Loader","className","webpackEmptyContext","req","e","code","keys","module","exports","LOAD_GUN_PAIR","generateGunPair","localStorage","getItem","ePublicKey","randomUser","setItem","newUserEPublicKey","epub","DownloadBtn","href","target","rel","UserPage","React","lazy","PostPage","withRouter","Helmet","property","location","fallback","component","to","INITIAL_STATE","wall","totalPages","profile","state","action","sort","b","loadedPosts","sortedPosts","matched","updatedPost","postID","pinnedPost","pinned","pair","tip","modalOpen","reducers","combineReducers","UserReducer","AuthReducer","TipReducer","store","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootReducer","compose","applyMiddleware","thunk","Boolean","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f2720ef3.chunk.js","sourcesContent":["import GunDB from \"gun/gun\";\nimport \"gun/sea\";\nimport { isCrawler } from \"./Prerender\";\n\nconst safeParse = data => {\n  try {\n    return JSON.parse(data);\n  } catch (err) {\n    return null;\n  }\n};\n\nconst peersConfig = safeParse(process.env.PEERS);\n\nconst peers = peersConfig\n  ? peersConfig\n  : [\"https://gun.shock.network/gun\", \"https://gun-eu.shock.network/gun\"];\n\nconst wait = ms =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(true);\n    }, ms);\n  });\n\nconst _randomString = length => {\n  let randomString = \"\";\n  const randomChar = function () {\n    const n = Math.floor(Math.random() * 62);\n    if (n < 10) return n; //1-10\n    if (n < 36) return String.fromCharCode(n + 55); //A-Z\n    return String.fromCharCode(n + 61); //a-z\n  };\n  while (randomString.length < length) randomString += randomChar();\n  return randomString;\n};\n\nconst _filterGunProps = ([key, item]) => item && key !== \"_\" && key !== \"#\";\n\nconst _isIncompleteGunResponse = data => {\n  try {\n    console.log(\"Incomplete Gun Response Check:\", typeof data, data);\n    if (data === null || data === undefined) {\n      return true;\n    }\n\n    if (Array.isArray(data)) {\n      if (!data.length) {\n        return true;\n      }\n\n      const incompleteCollection = data.reduce((empty, item) => {\n        if (empty) {\n          return empty;\n        }\n\n        return _isIncompleteGunResponse(item);\n      });\n\n      return incompleteCollection;\n    }\n\n    if (typeof data === \"object\") {\n      if (!data || typeof data.err === \"number\") {\n        return true;\n      }\n\n      const stringifiedData = JSON.stringify(data);\n      console.log(data, stringifiedData);\n\n      if (stringifiedData === \"{}\") {\n        return true;\n      }\n\n      const filteredGunProps = Object.entries(data).filter(_filterGunProps);\n\n      console.log(filteredGunProps, filteredGunProps?.length);\n\n      if (!filteredGunProps?.length) {\n        return true;\n      }\n    }\n\n    return false;\n  } catch (err) {\n    console.warn(\"An error has occurred:\", err);\n    return true;\n  }\n};\n\nconst parseGunPath = ({ path, gunPointer = Gun }) => {\n  let node = gunPointer;\n\n  for (const key of path.split(\"/\")) {\n    node = node.get(key);\n  }\n\n  return node;\n};\n\nexport const Gun = GunDB({ peers: peers });\n\nwindow.gun = Gun;\n\nexport const fetchPath = ({\n  path = \"\",\n  retryDelay = 500,\n  retryLimit = 3,\n  retryCondition = _isIncompleteGunResponse,\n  gunPointer = Gun,\n  method = \"once\",\n\n  _retryCount = 0,\n  _fallbackResult\n}) =>\n  new Promise(resolve => {\n    const parsedRetryLimit = isCrawler() ? 1 : retryLimit;\n    const parsedRetryDelay = isCrawler() ? 200 : retryDelay;\n\n    if (_retryCount > parsedRetryLimit) {\n      resolve(_fallbackResult);\n      return;\n    }\n\n    if (_retryCount > 0) {\n      console.log(\n        \"Retrying event:\",\n        path,\n        `${_retryCount}/${parsedRetryLimit}`\n      );\n    }\n    const GunContext = parseGunPath({ path, gunPointer });\n    console.log(\"Fetching Path:\", path, GunContext);\n\n    GunContext[method](async event => {\n      console.log(path + \" Response:\", event);\n      if (retryCondition && retryCondition(event)) {\n        await wait(parsedRetryDelay);\n        const retryResult = await fetchPath({\n          path,\n          retryDelay: parsedRetryDelay,\n          retryLimit: parsedRetryLimit,\n          retryCondition,\n          gunPointer,\n\n          _retryCount: _retryCount + 1,\n          _fallbackResult: event\n        });\n        resolve(retryResult);\n        return;\n      }\n\n      resolve(event);\n    });\n  });\n\n// Wraps GunDB data callbacks to provide better error handling\nexport const wrap = callback => event => {\n  console.log(\"Event received!\", event);\n  if (event?.err) {\n    console.error(\"[GunDB] Event error:\", event?.err, event);\n  }\n\n  if (!event?.put) {\n    console.warn(\"[GunDB] Item not found:\", event?.put, event);\n  }\n\n  return callback(\n    event,\n    event.err || !event.put\n      ? {\n          field: !event.put ? \"key\" : \"unknown\",\n          message: event.err\n            ? event.err\n            : !event.put\n            ? \"Key not found\"\n            : \"Unknown\",\n          gunErr: event.err\n        }\n      : null\n  );\n};\n\nexport const putPath = ({ path = \"\", data = {}, gunPointer = Gun }) =>\n  new Promise((resolve, reject) => {\n    const GunContext = parseGunPath({ path, gunPointer });\n    GunContext.put(\n      data,\n      wrap((event, err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(event);\n      })\n    );\n  });\n\nexport const setPath = ({ path = \"\", data = {}, gunPointer = Gun }) =>\n  new Promise((resolve, reject) => {\n    const GunContext = parseGunPath({ path, gunPointer });\n    const response = GunContext.set(data, event => {\n      console.log(data);\n      resolve(response);\n    });\n  });\n\nexport const listenPath = ({ path = \"\", gunPointer = Gun, callback }) => {\n  const GunContext = parseGunPath({ path, gunPointer });\n  return GunContext.on(event => {\n    callback(event);\n  });\n};\n\nexport const createRandomGunUser = () =>\n  new Promise((resolve, reject) => {\n    const randomAlias = _randomString(10);\n    const randomPass = _randomString(10);\n    Gun.user().create(randomAlias, randomPass, event => {\n      if (event.err) {\n        console.error(\"An error has occurred while initializing a new user\");\n        reject({\n          field: \"gundb\",\n          message: \"An error has occurred while initializing a new user\",\n          _error: event.err,\n          _event: event\n        });\n        return;\n      }\n      resolve({ ...event, alias: randomAlias, pass: randomPass });\n    });\n  });\n\nexport const authUser = (alias, pass) =>\n  new Promise((resolve, reject) => {\n    Gun.user().auth(alias, pass, user => {\n      resolve(user);\n    });\n  });\n\nexport const gunUser = publicKey => {\n  console.log(\"Getting Gun User:\", publicKey);\n  if (!publicKey) {\n    throw new Error(\"Undefined public key\");\n  }\n  return Gun.user(publicKey);\n};\n\n// Magic number provided from GunDB docs\nexport const DEFAULT_ONCE_WAIT_MS = 99;\n\nexport const $$_SHOCKWALLET__ENCRYPTED__ = \"$$_SHOCKWALLET__ENCRYPTED__\";\n\nexport const $$__SHOCKWALLET__MSG__ = \"$$__SHOCKWALLET__MSG__\";\n","import { Gun, fetchPath } from \"../utils/Gun\";\n\nexport const ACTIONS = {\n  LOAD_USER_WALL: \"wall/load\",\n  LOAD_USER_WALL_TOTAL_PAGES: \"wall/loadTotalPages\",\n  RESET_USER_WALL: \"wall/reset\",\n  PIN_WALL_POST: \"wall/pin\",\n  UPDATE_WALL_POST: \"wall/post/update\",\n  LOAD_WALL_POST_INFO: \"post/info/load\",\n  LOAD_WALL_POST_CONTENT: \"post/contentItems/load\",\n  LOAD_WALL_POST_CONTENT_LENGTH: \"post/contentItems/allocate\",\n  RESET_USER_DATA: \"user/reset\",\n  LOAD_USER_DATA: \"user/load\",\n  LOAD_USER_AVATAR: \"avatar/load\",\n  UPDATE_USER_PROFILE: \"user/update\"\n};\n\nconst _filterGunProps = ([key, item]) => item && key !== \"_\" && key !== \"#\";\n\nconst GUN_POSTS_KEY = `posts`;\nconst GUN_SHARED_POSTS_KEY = `sharedPosts`;\n\nexport const getUserAvatar = publicKey => async dispatch => {\n  const gunUser = Gun.user(publicKey);\n  const avatar = await fetchPath({\n    path: \"profileBinary/avatar\",\n    gunPointer: gunUser\n  });\n\n  dispatch({\n    type: ACTIONS.UPDATE_USER_PROFILE,\n    data: { avatar }\n  });\n\n  return avatar;\n};\n\nexport const getUserHeader = publicKey => async dispatch => {\n  const gunUser = Gun.user(publicKey);\n  const header = await fetchPath({\n    path: \"profileBinary/header\",\n    gunPointer: gunUser\n  });\n\n  dispatch({\n    type: ACTIONS.UPDATE_USER_PROFILE,\n    data: { header }\n  });\n\n  return header;\n};\n\nexport const fetchUserProfile = async ({\n  publicKey,\n  includeAvatar = false\n}) => {\n  const gunUser = Gun.user(publicKey);\n  const [bio, displayName, alias, lastSeenApp, lastSeenNode, avatar] =\n    await Promise.all([\n      fetchPath({\n        path: \"Profile/bio\",\n        gunPointer: gunUser\n      }),\n      fetchPath({\n        path: \"Profile/displayName\",\n        gunPointer: gunUser\n      }),\n      fetchPath({\n        path: \"alias\",\n        gunPointer: gunUser\n      }),\n      fetchPath({\n        path: \"Profile/lastSeenApp\",\n        gunPointer: gunUser\n      }),\n      fetchPath({\n        path: \"Profile/lastSeenNode\",\n        gunPointer: gunUser\n      }),\n      includeAvatar\n        ? fetchPath({\n            path: \"profileBinary/avatar\",\n            gunPointer: gunUser\n          })\n        : undefined\n    ]);\n\n  const user = {\n    publicKey,\n    bio,\n    displayName,\n    alias,\n    lastSeenNode,\n    lastSeenApp,\n    avatar\n  };\n\n  return user;\n};\n\nexport const getUserProfile = publicKey => async dispatch => {\n  const user = await fetchUserProfile({ publicKey });\n\n  console.log(\"User:\", user);\n\n  dispatch({\n    type: ACTIONS.LOAD_USER_DATA,\n    data: user\n  });\n\n  return user;\n};\n\nexport const getWallTotalPages = publicKey => async dispatch => {\n  const totalPages = await fetchPath({\n    path: \"wall/numOfPages\",\n    gunPointer: Gun.user(publicKey)\n  });\n\n  if (!totalPages && totalPages !== 0) {\n    throw {\n      field: \"publicKey\",\n      message: \"Wall was not found for the specified user\"\n    };\n  }\n\n  dispatch({\n    type: ACTIONS.LOAD_USER_WALL_TOTAL_PAGES,\n    data: totalPages\n  });\n\n  return totalPages;\n};\n\nexport const getUserPost = async ({ id, gunPointer }) => {\n  const wallPostKey = `${GUN_POSTS_KEY}/${id}`;\n  const contentItemsKey = `${wallPostKey}/contentItems`;\n  const start = Date.now();\n\n  console.log(`Fetching Post (${id})...`);\n\n  const [wallPost, contentItems] = await Promise.all([\n    fetchPath({\n      path: wallPostKey,\n      gunPointer\n    }),\n    fetchPath({\n      path: contentItemsKey,\n      gunPointer\n    })\n  ]);\n  const filteredContentItems =\n    Object.entries(contentItems).filter(_filterGunProps);\n  console.log(\"Filtered Content Items:\", filteredContentItems);\n  const fetchedContentItems = await Promise.all(\n    filteredContentItems.map(async ([id, item]) => {\n      console.log(\"Content Item:\", { id, item });\n      const type = await fetchPath({\n        path: `${contentItemsKey}/${id}/type`,\n        gunPointer\n      });\n\n      if (type === \"text/paragraph\") {\n        console.log(\n          `Loading Post (${id}) text: Started at ${Date.now() - start}ms`\n        );\n        const text = await fetchPath({\n          path: `${contentItemsKey}/${id}/text`,\n          gunPointer\n        });\n\n        console.log(`Loaded Post (${id}) text in ${Date.now() - start}ms`);\n\n        return {\n          text,\n          type\n        };\n      }\n\n      if (type === \"video/embedded\") {\n        console.log(\n          `Loading Post (${id}) video: Started at ${Date.now() - start}ms`\n        );\n        const [magnetURI, width, height] = await Promise.all([\n          fetchPath({\n            path: `${contentItemsKey}/${id}/magnetURI`,\n            gunPointer\n          }),\n          fetchPath({\n            path: `${contentItemsKey}/${id}/width`,\n            gunPointer\n          }),\n          fetchPath({\n            path: `${contentItemsKey}/${id}/height`,\n            gunPointer\n          })\n        ]);\n        console.log(`Loaded Post (${id}) video in ${Date.now() - start}ms`);\n        return {\n          magnetURI,\n          width,\n          height,\n          type\n        };\n      }\n\n      if (type === \"image/embedded\") {\n        console.log(\n          `Loading Post (${id}) image: Started at ${Date.now() - start}ms`\n        );\n        const [magnetURI, width, height] = await Promise.all([\n          fetchPath({\n            path: `${contentItemsKey}/${id}/magnetURI`,\n            gunPointer\n          }),\n          fetchPath({\n            path: `${contentItemsKey}/${id}/width`,\n            gunPointer\n          }),\n          fetchPath({\n            path: `${contentItemsKey}/${id}/height`,\n            gunPointer\n          })\n        ]);\n        console.log(`Loaded Post (${id}) image in ${Date.now() - start}ms`);\n        return {\n          magnetURI,\n          width,\n          height,\n          type\n        };\n      }\n      if (type === \"stream/embedded\") {\n        console.log(\n          `Loading Post (${id}) stream: Started at ${Date.now() - start}ms`\n        );\n        const [magnetURI, liveStatus, playbackMagnet, viewersCounter] =\n          await Promise.all([\n            fetchPath({\n              path: `${contentItemsKey}/${id}/magnetURI`,\n              gunPointer\n            }),\n            fetchPath({\n              path: `${contentItemsKey}/${id}/liveStatus`,\n              gunPointer\n            }),\n            fetchPath({\n              path: `${contentItemsKey}/${id}/playbackMagnet`,\n              gunPointer\n            }),\n            fetchPath({\n              path: `${contentItemsKey}/${id}/viewersCounter`,\n              gunPointer\n            })\n          ]);\n        console.log(`Loaded Post (${id}) stream in ${Date.now() - start}ms`);\n        let finalType = type;\n        let finalMagnet = magnetURI;\n        if (liveStatus === \"wasLive\" && playbackMagnet) {\n          finalMagnet = playbackMagnet;\n          finalType = \"video/embedded\";\n        }\n        return {\n          magnetURI: finalMagnet,\n          width: 0,\n          height: 0,\n          type: finalType,\n          liveStatus,\n          playbackMagnet,\n          viewersCounter\n        };\n      }\n\n      return {\n        text: \"Unsupported media type\",\n        type\n      };\n    })\n  );\n\n  console.log(`Post (${id}) took ${Date.now() - start}ms to load!`);\n\n  return {\n    ...(wallPost ?? {}),\n    id,\n    contentItems: fetchedContentItems ?? [],\n    type: \"post\"\n  };\n};\n\nexport const getSharedPost = async ({ id, sharedGunPointer }) => {\n  const sharedPostKey = `${GUN_SHARED_POSTS_KEY}/${id}`;\n\n  const sharedPost = await fetchPath({\n    path: sharedPostKey,\n    gunPointer: sharedGunPointer\n  });\n\n  return {\n    id,\n    date: sharedPost.shareDate,\n    originalAuthor: sharedPost.originalAuthor,\n    type: \"shared\"\n  };\n};\n\nexport const getUserWallPostInfo =\n  ({ publicKey, id }) =>\n  async dispatch => {\n    const gunPointer = Gun.user(publicKey);\n    const wallPostKey = `${GUN_POSTS_KEY}/${id}`;\n    const postInfo = await fetchPath({\n      path: wallPostKey,\n      gunPointer\n    });\n\n    dispatch({\n      type: ACTIONS.LOAD_WALL_POST_INFO,\n      data: {\n        id,\n        postInfo\n      }\n    });\n  };\n\nexport const getUserWallPostContent =\n  ({ publicKey, id }) =>\n  async dispatch => {\n    const gunPointer = Gun.user(publicKey);\n    const wallPostKey = `${GUN_POSTS_KEY}/${id}`;\n    const contentItemsKey = `${wallPostKey}/contentItems`;\n    const start = Date.now();\n\n    const contentItems = await fetchPath({\n      path: contentItemsKey,\n      gunPointer\n    });\n    const filteredContentItems =\n      Object.entries(contentItems).filter(_filterGunProps);\n\n    console.log(\"Filtered Content Items:\", filteredContentItems);\n\n    dispatch({\n      type: ACTIONS.LOAD_WALL_POST_CONTENT_LENGTH,\n      data: { id, length: filteredContentItems.length }\n    });\n\n    await Promise.all(\n      filteredContentItems.map(async ([contentId, item], key) => {\n        console.log(\"Content Item:\", { id: contentId, item });\n        const type = await fetchPath({\n          path: `${contentItemsKey}/${contentId}/type`,\n          gunPointer,\n          retryLimit: 8,\n          retryDelay: 1000\n        });\n\n        if (type === \"text/paragraph\") {\n          console.log(\n            `Loading Post (${contentId}) text: Started at ${\n              Date.now() - start\n            }ms`\n          );\n          const text = await fetchPath({\n            path: `${contentItemsKey}/${contentId}/text`,\n            gunPointer,\n            retryLimit: 8,\n            retryDelay: 1000\n          });\n\n          console.log(\n            `Loaded Post (${contentId}) text in ${Date.now() - start}ms`\n          );\n\n          const contentItem = {\n            text,\n            type\n          };\n\n          dispatch({\n            type: ACTIONS.LOAD_WALL_POST_CONTENT,\n            data: {\n              key,\n              id,\n              contentItem\n            }\n          });\n\n          return contentItem;\n        }\n\n        if (type === \"video/embedded\") {\n          console.log(\n            `Loading Post (${contentId}) video: Started at ${\n              Date.now() - start\n            }ms`\n          );\n          const magnetURI = await fetchPath({\n            path: `${contentItemsKey}/${contentId}/magnetURI`,\n            gunPointer,\n            retryLimit: 8,\n            retryDelay: 1000\n          });\n          console.log(\n            `Loaded Post (${contentId}) video in ${Date.now() - start}ms`\n          );\n          const contentItem = {\n            magnetURI,\n            type\n          };\n\n          dispatch({\n            type: ACTIONS.LOAD_WALL_POST_CONTENT,\n            data: {\n              key,\n              id,\n              contentItem\n            }\n          });\n\n          return contentItem;\n        }\n\n        if (type === \"image/embedded\") {\n          console.log(\n            `Loading Post (${contentId}) image: Started at ${\n              Date.now() - start\n            }ms`\n          );\n          const magnetURI = await fetchPath({\n            path: `${contentItemsKey}/${contentId}/magnetURI`,\n            gunPointer,\n            retryLimit: 8,\n            retryDelay: 1000\n          });\n          console.log(\n            `Loaded Post (${contentId}) image in ${Date.now() - start}ms`\n          );\n          const contentItem = {\n            magnetURI,\n            type\n          };\n\n          dispatch({\n            type: ACTIONS.LOAD_WALL_POST_CONTENT,\n            data: {\n              key,\n              id,\n              contentItem\n            }\n          });\n\n          return contentItem;\n        }\n\n        if (type === \"stream/embedded\") {\n          console.log(\n            `Loading Post (${contentId}) stream: Started at ${\n              Date.now() - start\n            }ms`\n          );\n          const [magnetURI, liveStatus, playbackMagnet, viewersCounter] =\n            await Promise.all([\n              fetchPath({\n                path: `${contentItemsKey}/${contentId}/magnetURI`,\n                gunPointer,\n                retryLimit: 8,\n                retryDelay: 1000\n              }),\n              fetchPath({\n                path: `${contentItemsKey}/${contentId}/liveStatus`,\n                gunPointer,\n                retryLimit: 8,\n                retryDelay: 1000\n              }),\n              fetchPath({\n                path: `${contentItemsKey}/${contentId}/playbackMagnet`,\n                gunPointer,\n                retryLimit: 8,\n                retryDelay: 1000\n              }),\n              fetchPath({\n                path: `${contentItemsKey}/${contentId}/viewersCounter`,\n                gunPointer,\n                retryLimit: 8,\n                retryDelay: 1000\n              })\n            ]);\n          console.log(\n            `Loaded Post (${contentId}) stream in ${Date.now() - start}ms`\n          );\n          let finalType = type;\n          let finalMagnet = magnetURI;\n          if (liveStatus === \"wasLive\" && playbackMagnet) {\n            finalMagnet = playbackMagnet;\n            finalType = \"video/embedded\";\n          }\n          const contentItem = {\n            magnetURI: finalMagnet,\n            width: 0,\n            height: 0,\n            type: finalType,\n            liveStatus,\n            playbackMagnet,\n            viewersCounter\n          };\n\n          dispatch({\n            type: ACTIONS.LOAD_WALL_POST_CONTENT,\n            data: {\n              key,\n              id,\n              contentItem\n            }\n          });\n\n          return contentItem;\n        }\n\n        return {\n          text: \"Unsupported media type\",\n          type\n        };\n      })\n    );\n  };\n\nconst getUserPosts = async ({ gunPointer, publicKey, dispatch }) => {\n  const rawPosts = await fetchPath({\n    path: GUN_POSTS_KEY,\n    gunPointer\n  });\n  console.log(\"Posts:\", rawPosts);\n  const filteredRawPosts = Object.entries(rawPosts ?? {}).filter(\n    _filterGunProps\n  );\n  const fetchedPosts = await Promise.all(\n    filteredRawPosts.map(([id, content]) => {\n      dispatch(getUserWallPostInfo({ publicKey, id }));\n      dispatch(getUserWallPostContent({ publicKey, id }));\n      return { id, ...content, type: \"post\" };\n    })\n  );\n\n  console.log(`User wall`, fetchedPosts);\n\n  dispatch({\n    type: ACTIONS.LOAD_USER_WALL,\n    data: { posts: fetchedPosts, page: 0 }\n  });\n\n  return fetchedPosts;\n};\n\nconst getUserSharedPosts = async ({ gunPointer, publicKey, dispatch }) => {\n  const rawSharedPosts = await fetchPath({\n    path: GUN_SHARED_POSTS_KEY,\n    gunPointer\n  });\n  console.log(\"Shared Posts:\", rawSharedPosts);\n  const filteredRawSharedPosts = Object.entries(rawSharedPosts ?? {}).filter(\n    _filterGunProps\n  );\n  const fetchedPosts = await Promise.all(\n    filteredRawSharedPosts.map(([id]) =>\n      getSharedPost({\n        id,\n        sharedGunPointer: Gun.user(publicKey)\n      })\n    )\n  );\n\n  dispatch({\n    type: ACTIONS.LOAD_USER_WALL,\n    data: { posts: fetchedPosts, page: 0 }\n  });\n\n  return fetchedPosts;\n};\n\nexport const getUserWall = publicKey => async dispatch => {\n  try {\n    const gunPointer = Gun.user(publicKey);\n    await Promise.any([\n      getUserPosts({\n        gunPointer,\n        publicKey,\n        dispatch\n      }),\n      getUserSharedPosts({\n        gunPointer,\n        dispatch,\n        publicKey\n      })\n    ]);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const getPinnedPost =\n  ({ publicKey, postId, type = \"post\" }) =>\n  async dispatch => {\n    console.log(\"Getting Pinned post:\", publicKey, postId, type);\n\n    if (!publicKey || !postId) {\n      return;\n    }\n\n    const gunPointer = Gun.user(publicKey);\n\n    if (type === \"post\") {\n      const post = await getUserPost({ id: postId, gunPointer });\n\n      if (post) {\n        dispatch({\n          type: ACTIONS.PIN_WALL_POST,\n          data: post\n        });\n      }\n\n      return post;\n    }\n\n    if (type === \"sharedPost\") {\n      const post = await getSharedPost({\n        id: postId,\n        sharedGunPointer: gunPointer\n      });\n\n      if (post) {\n        dispatch({\n          type: ACTIONS.PIN_WALL_POST,\n          data: post\n        });\n      }\n\n      return post;\n    }\n  };\n\nexport const updateUserProfile = data => dispatch => {\n  dispatch({\n    type: ACTIONS.UPDATE_USER_PROFILE,\n    data\n  });\n};\n\nexport const updateWallPost = data => dispatch => {\n  dispatch({\n    type: ACTIONS.UPDATE_WALL_POST,\n    data\n  });\n};\n\nexport const resetUserWall = () => dispatch => {\n  dispatch({\n    type: ACTIONS.RESET_USER_WALL\n  });\n};\n\nexport const resetUserData = () => dispatch => {\n  dispatch({\n    type: ACTIONS.RESET_USER_DATA\n  });\n};\n","import SEA from \"gun/sea\";\nimport {\n  Gun,\n  fetchPath,\n  setPath,\n  authUser,\n  $$__SHOCKWALLET__MSG__,\n  $$_SHOCKWALLET__ENCRYPTED__\n} from \"../utils/Gun\";\n\nexport const ACTIONS = {\n  LOAD_PAYMENT_REQUEST: \"tip/paymentRequest/load\",\n  RESET_PAYMENT_REQUEST: \"tip/paymentRequest/reset\",\n  OPEN_TIP_MODAL: \"tip/modal/open\",\n  CLOSE_TIP_MODAL: \"tip/modal/close\",\n  UPDATE_METADATA: \"tip/metadata/update\"\n};\n\nexport const openModal = metadata => ({\n  type: ACTIONS.OPEN_TIP_MODAL,\n  data: metadata\n});\n\nexport const closeModal = () => ({\n  type: ACTIONS.CLOSE_TIP_MODAL\n});\n\nexport const updateMetadata = metadata => ({\n  type: ACTIONS.UPDATE_METADATA,\n  data: metadata\n});\n\nexport const payUser =\n  ({ senderPair, recipientPublicKey, amount, metadata }) =>\n  async dispatch => {\n    const me = await authUser(senderPair.alias, senderPair.pass);\n    const recipientUser = Gun.user(recipientPublicKey);\n    const [recipientUserEPub, orderAddress] = await Promise.all([\n      fetchPath({\n        path: \"epub\",\n        gunPointer: recipientUser\n      }),\n      fetchPath({\n        path: \"currentOrderAddress\",\n        gunPointer: recipientUser\n      })\n    ]);\n\n    const secret = await SEA.secret(recipientUserEPub, me.sea);\n\n    console.log(\"Order Address:\", orderAddress);\n\n    const [encryptedAmount, encryptedMemo] = await Promise.all([\n      SEA.encrypt($$__SHOCKWALLET__MSG__ + amount.toString(), secret),\n      SEA.encrypt($$__SHOCKWALLET__MSG__ + \"Tipped user!\", secret)\n    ]);\n\n    const order = {\n      amount: $$_SHOCKWALLET__ENCRYPTED__ + encryptedAmount,\n      from: me.sea.pub,\n      memo: $$_SHOCKWALLET__ENCRYPTED__ + encryptedMemo,\n      timestamp: Date.now(),\n      // Tip type\n      ...metadata\n    };\n\n    console.log(\"Order:\", order);\n\n    const newOrder = await setPath({\n      path: `orderNodes/${orderAddress}`,\n      data: order\n    });\n    console.log(\n      \"New Order:\",\n      newOrder,\n      newOrder._[\"#\"].split(\"/\").slice(-1)[0]\n    );\n\n    const newOrderId = newOrder._[\"#\"].split(\"/\").slice(-1)[0];\n\n    console.log(\"New Order ID:\", newOrderId, `orderToResponse/${newOrderId}`);\n\n    await fetchPath({\n      path: `orderToResponse/${newOrderId}`,\n      gunPointer: Gun.user(recipientPublicKey),\n      method: \"on\"\n    });\n    const encryptedOrder = await fetchPath({\n      path: `orderToResponse/${newOrderId}`,\n      gunPointer: Gun.user(recipientPublicKey)\n    });\n\n    console.log(\n      \"Encrypted Order:\",\n      encryptedOrder.response,\n      encryptedOrder.response?.toString()\n    );\n\n    const decryptedResponse = await SEA.decrypt(\n      encryptedOrder.response.replace($$_SHOCKWALLET__ENCRYPTED__, \"\"),\n      secret\n    );\n\n    const decryptedOrder = {\n      response: decryptedResponse?.replace?.($$__SHOCKWALLET__MSG__, \"\"),\n      type: encryptedOrder.type\n    };\n\n    console.log(\"[ORDER] Decrypted order:\", decryptedOrder);\n\n    if (decryptedOrder.type === \"err\") {\n      throw {\n        field: \"order\",\n        message: \"An error has occurred while retrieving the order\",\n        data: decryptedOrder.response.replace($$_SHOCKWALLET__ENCRYPTED__, \"\")\n      };\n    }\n\n    dispatch({\n      type: ACTIONS.LOAD_PAYMENT_REQUEST,\n      data: decryptedOrder.response.replace($$_SHOCKWALLET__ENCRYPTED__, \"\")\n    });\n\n    return {\n      paymentRequest: decryptedOrder.response.replace(\n        $$_SHOCKWALLET__ENCRYPTED__,\n        \"\"\n      ),\n      ackNode: encryptedOrder.ackNode\n    };\n  };\n\nexport const resetPaymentRequest = () => dispatch => {\n  dispatch({\n    type: ACTIONS.RESET_PAYMENT_REQUEST\n  });\n};\n","export const isCrawler = () => navigator.userAgent.includes(\"Prerender\");\n","import React from \"react\";\nimport \"./css/index.css\";\n\nconst Loader = ({ text = \"Loading...\" }) => (\n  <div className=\"loading-wall\">\n    <div className=\"loading-wall-icon\">\n      <span className=\"loading-circle loading-circle-1\"></span>\n      <span className=\"loading-circle loading-circle-2\"></span>\n      <span className=\"loading-circle loading-circle-3\"></span>\n      <span className=\"loading-circle loading-circle-4\"></span>\n      <span className=\"loading-circle loading-circle-5\"></span>\n    </div>\n    <div className=\"loading-wall-text\">{text}</div>\n  </div>\n);\n\nexport default Loader;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 37;","import { Gun, createRandomGunUser, fetchPath } from \"../utils/Gun\";\n\nexport const ACTIONS = {\n  LOAD_GUN_PAIR: \"auth/loadPair\"\n};\n\nexport const generateGunPair = () => async dispatch => {\n  const alias = localStorage.getItem(\"shocknet/gun/alias\");\n  const pass = localStorage.getItem(\"shocknet/gun/pass\");\n  const publicKey = localStorage.getItem(\"shocknet/gun/pub\");\n  const ePublicKey = localStorage.getItem(\"shocknet/gun/epub\");\n\n  if (!alias || !pass) {\n    console.log(\"[Gun] Keypair not found, generating a new one...\");\n\n    const randomUser = await createRandomGunUser();\n    localStorage.setItem(\"shocknet/gun/alias\", randomUser.alias);\n    localStorage.setItem(\"shocknet/gun/pass\", randomUser.pass);\n    localStorage.setItem(\"shocknet/gun/pub\", randomUser.pub);\n\n    const gunPointer = Gun.user(randomUser.pub);\n    const newUserEPublicKey = await fetchPath({\n      path: \"epub\",\n      gunPointer\n    });\n    localStorage.setItem(\"shocknet/gun/epub\", newUserEPublicKey);\n    dispatch({\n      type: ACTIONS.LOAD_GUN_PAIR,\n      data: randomUser\n    });\n    return;\n  }\n\n  console.log(\"[Gun] Keypair exists!\");\n\n  const user = {\n    pub: publicKey,\n    alias: alias,\n    epub: ePublicKey,\n    pass: pass\n  };\n\n  console.log(\"[Gun] User Authenticated\");\n\n  dispatch({\n    type: ACTIONS.LOAD_GUN_PAIR,\n    data: user\n  });\n\n  return user;\n};\n","import React from \"react\";\nimport \"./css/index.css\";\n\nconst DownloadBtn = () => {\n  return (\n    <a\n      href=\"https://My.Lightning.Page\"\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n      className=\"download-shockwallet-btn\"\n    >\n      <i className=\"download-shockwallet-btn-icon fas fa-user\"></i>\n      <p className=\"download-shockwallet-btn-text\">Create a Lightning Page</p>\n    </a>\n  );\n};\n\nexport default DownloadBtn;\n","import React, { Suspense } from \"react\";\nimport { withRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport Loader from \"./common/Loader\";\nimport DownloadBtn from \"./common/DownloadBtn\";\nimport \"./styles/App.css\";\nimport { Helmet } from \"react-helmet\";\n\nconst UserPage = React.lazy(() => import(\"./pages/User\"));\nconst PostPage = React.lazy(() => import(\"./pages/Post\"));\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <meta property=\"twitter:site\" content=\"@shocknet\" />\n        <meta property=\"twitter:card\" content=\"summary\" />\n        <meta property=\"og:url\" content={window.location.href} />\n        <meta property=\"og:type\" content=\"website\" />\n      </Helmet>\n      <Suspense fallback={<Loader />}>\n        <Switch>\n          <Route path=\"/user/:userId\" component={UserPage} />\n          <Route path=\"/:userId/:type/:postId\" component={PostPage} />\n          <Route path=\"/:userId\" component={UserPage} />\n          <Redirect to=\"/tcUUzRkyzXYhIZQbmopiCLREyZ_kQJqQ-C4XesecOm4.GX1Dv-eGcfKuOPobBK9Q-Sc-o697XgVCQzOCfqfimIo\" />\n        </Switch>\n      </Suspense>\n      <DownloadBtn />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","import { ACTIONS } from \"../actions/UserActions\";\n\nconst INITIAL_STATE = {\n  wall: {\n    posts: [],\n    // Specifying -1 is helpful for determining whether or not\n    // the wall was loaded at all\n    page: -1,\n    totalPages: 0\n  },\n  profile: {}\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  const { data } = action;\n\n  switch (action.type) {\n    case ACTIONS.LOAD_USER_WALL: {\n      return {\n        ...state,\n        wall: {\n          ...state.wall,\n          posts: [...state.wall.posts, ...data.posts].sort(\n            (a, b) => b.date - a.date\n          ),\n          page: data.page\n        }\n      };\n    }\n    case ACTIONS.LOAD_USER_WALL_TOTAL_PAGES: {\n      return {\n        ...state,\n        wall: {\n          ...state.wall,\n          totalPages: data\n        }\n      };\n    }\n    case ACTIONS.LOAD_WALL_POST_CONTENT_LENGTH: {\n      return {\n        ...state,\n        wall: {\n          ...state.wall,\n          posts: state.wall.posts?.map(post =>\n            data.id === post.id\n              ? {\n                  ...post,\n                  contentItems: Array.from({ length: data.length })\n                }\n              : post\n          )\n        }\n      };\n    }\n    case ACTIONS.LOAD_WALL_POST_INFO: {\n      const loadedPosts = state.wall.posts?.map(post =>\n        data.id === post.id\n          ? {\n              ...post,\n              ...data.postInfo,\n              contentItems: post.contentItems ?? []\n            }\n          : post\n      );\n      const sortedPosts = loadedPosts.sort((a, b) => b.date - a.date);\n      return {\n        ...state,\n        wall: {\n          ...state.wall,\n          posts: sortedPosts\n        }\n      };\n    }\n    case ACTIONS.LOAD_WALL_POST_CONTENT: {\n      return {\n        ...state,\n        wall: {\n          ...state.wall,\n          posts: state.wall.posts?.map(post => {\n            const matched = data.id === post.id;\n\n            console.log({ post, data });\n\n            if (!matched) {\n              return post;\n            }\n\n            return {\n              ...post,\n              contentItems: post.contentItems?.map((item, key) =>\n                data.key === key\n                  ? { ...(item ?? {}), ...(data.contentItem ?? {}) }\n                  : item\n              )\n            };\n          })\n        }\n      };\n    }\n    case ACTIONS.LOAD_USER_DATA: {\n      return {\n        ...state,\n        profile: data\n      };\n    }\n    case ACTIONS.LOAD_USER_AVATAR: {\n      return {\n        ...state,\n        profile: {\n          ...state.profile,\n          avatar: data\n        }\n      };\n    }\n    case ACTIONS.UPDATE_USER_PROFILE: {\n      return {\n        ...state,\n        profile: {\n          ...state.profile,\n          ...data\n        }\n      };\n    }\n    case ACTIONS.UPDATE_WALL_POST: {\n      const { data: updatedPost } = action;\n      return {\n        ...state,\n        wall: {\n          ...state.wall,\n          posts: state.wall.posts.map(post =>\n            updatedPost.postID === post.id\n              ? {\n                  ...post,\n                  ...updatedPost.data\n                }\n              : post\n          )\n        }\n      };\n    }\n    case ACTIONS.PIN_WALL_POST: {\n      return {\n        ...state,\n        wall: {\n          ...state.wall,\n          pinnedPost: { ...data, pinned: true }\n        }\n      };\n    }\n    case ACTIONS.RESET_USER_WALL: {\n      return { ...state, wall: INITIAL_STATE.wall };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default user;\n","import { ACTIONS } from \"../actions/AuthActions\";\n\nconst INITIAL_STATE = {\n  pair: {}\n};\n\nconst auth = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.LOAD_GUN_PAIR: {\n      const { data } = action;\n      return {\n        ...state,\n        pair: data\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","import { ACTIONS } from \"../actions/TipActions\";\n\nconst INITIAL_STATE = {\n  paymentRequest: null\n};\n\nconst tip = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.LOAD_PAYMENT_REQUEST: {\n      const { data } = action;\n      return {\n        ...state,\n        paymentRequest: data\n      };\n    }\n    case ACTIONS.RESET_PAYMENT_REQUEST: {\n      return {\n        ...state,\n        paymentRequest: null\n      };\n    }\n    case ACTIONS.OPEN_TIP_MODAL: {\n      const { data } = action;\n\n      return {\n        ...state,\n        modalOpen: true,\n        metadata: data\n      };\n    }\n    case ACTIONS.CLOSE_TIP_MODAL: {\n      return {\n        ...state,\n        modalOpen: false,\n        metadata: {}\n      };\n    }\n    case ACTIONS.UPDATE_METADATA: {\n      const { data } = action;\n\n      return {\n        ...state,\n        metadata: data\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default tip;\n","import { combineReducers } from \"redux\";\nimport UserReducer from \"./UserReducer\";\nimport AuthReducer from \"./AuthReducer\";\nimport TipReducer from \"./TipReducer\";\n\nconst reducers = combineReducers({\n  user: UserReducer,\n  auth: AuthReducer,\n  tip: TipReducer\n});\n\nexport default reducers;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nconst store = window.__REDUX_DEVTOOLS_EXTENSION__\n  ? createStore(\n      rootReducer,\n      compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__())\n    )\n  : createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <Router basename=\"/\">\n        <App />\n      </Router>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
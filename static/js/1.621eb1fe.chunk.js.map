{"version":3,"sources":["common/Post/components/TipRibbon.js","common/Post/components/Video.js","common/Post/components/Image.js","common/Post/components/Stream.js","common/Post/components/ShareBtn.js","common/Post/index.js"],"names":["TipRibbon","tipCounter","tipValue","zoomed","className","style","opacity","Video","id","item","index","postId","cursor","data-torrent","magnetURI","data-file-key","controls","data-played","Image","useState","setZoomed","zoomLoaded","setZoomLoaded","previewVisible","setPreviewVisible","animationTimer","setAnimationTimer","handleZoomChange","useCallback","value","clearTimeout","timer","setTimeout","Controlled","isZoomed","onZoomChange","overlayBgColorStart","overlayBgColorEnd","alt","src","decodeURIComponent","split","onLoad","STREAM_STATUS_URI","Stream","hideRibbon","width","playerDOM","useRef","isLive","setIsLive","videoStyle","useEffect","recheckInterval","checkStatus","a","seedToken","fetch","res","json","player","videojs","current","autoplay","muted","aspectRatio","type","play","console","log","then","setInterval","clearInterval","display","ref","preload","autoPlay","ShareBtn","publicKey","username","pinned","copiedLink","setCopiedLink","url","useMemo","sharePost","navigator","share","text","onCopy","getShareMessage","ReactTooltip","rebuild","timeout","tooltipId","data-tip","data-for","effect","backgroundColor","getContent","onClick","insertMetaTag","attributes","meta","document","createElement","Object","entries","map","key","setAttribute","head","querySelector","insertBefore","firstChild","Post","timestamp","avatar","contentItems","isOnlineNode","shared","dispatch","useDispatch","useEmblaCarousel","slidesToScroll","align","carouselRef","carouselAPI","sliderLength","setSliderLength","activeSlide","setActiveSlide","liveStatus","setLiveStatus","viewersCounter","setViewersCounter","values","videoContent","find","streamContent","status","property","content","filter","join","includes","parseContent","nextSlide","canScrollNext","scrollNext","prevSlide","canScrollPrev","scrollPrev","handleUserKeyDown","e","updateActiveSlide","selectedScrollSnap","fetchPath","path","gunPointer","gunUser","method","data","tipSet","lenSet","length","tot","reduce","acc","val","Number","updateWallPost","postID","on","scrollSnapList","window","addEventListener","removeEventListener","off","tipPost","openModal","targetType","ackInfo","Tooltip","to","backgroundImage","moment","utc","fromNow","Array","from","_","classNames","scrollTo"],"mappings":"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","file":"static/js/1.621eb1fe.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TipRibbon = ({ tipCounter, tipValue, zoomed }) =>\n  tipValue > 0 ? (\n    <div className=\"ribbon-container\" style={{ opacity: !zoomed ? 1 : 0 }}>\n      <p className=\"ribbon-title\">Total Tips</p>\n      <p className=\"ribbon-value\">\n        {tipCounter} {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n      </p>\n    </div>\n  ) : null;\n\nexport default TipRibbon;\n","import React from \"react\";\nimport TipRibbon from \"./TipRibbon\";\nimport \"../../../styles/video.js.css\";\nimport \"../css/index.css\";\n\nconst Video = ({ id, item, index, postId, tipValue, tipCounter }) => {\n  return (\n    <div className=\"media-container\">\n      <div\n        className=\"video-container\"\n        style={{\n          cursor: \"pointer\"\n        }}\n      >\n        <video\n          className={`torrent-video torrent-video-${postId}-${id}`}\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          controls\n          data-played=\"false\"\n        />\n        <TipRibbon tipCounter={tipCounter} tipValue={tipValue} />\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { useState } from \"react\";\nimport { Controlled as ControlledZoom } from \"react-medium-image-zoom\";\nimport TipRibbon from \"./TipRibbon\";\nimport \"react-medium-image-zoom/dist/styles.css\";\nimport \"../css/index.css\";\nimport { useCallback } from \"react\";\n\nconst IMAGE_TRANSITION_MS = 200;\n\nconst Image = ({ id, item, index, postId, tipValue, tipCounter }) => {\n  const [zoomed, setZoomed] = useState(false);\n  const [zoomLoaded, setZoomLoaded] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(true);\n  const [animationTimer, setAnimationTimer] = useState(null);\n\n  const handleZoomChange = useCallback(\n    value => {\n      clearTimeout(animationTimer);\n      setZoomed(value);\n      if (!value && zoomLoaded) {\n        setZoomLoaded(false);\n        const timer = setTimeout(() => {\n          setPreviewVisible(true);\n        }, IMAGE_TRANSITION_MS);\n        setAnimationTimer(timer);\n      }\n\n      if (value) {\n        setPreviewVisible(false);\n      }\n    },\n    [animationTimer, zoomLoaded]\n  );\n\n  return (\n    <div className=\"media-container\">\n      <ControlledZoom\n        isZoomed={zoomed}\n        onZoomChange={handleZoomChange}\n        overlayBgColorStart=\"#16191c00\"\n        overlayBgColorEnd=\"#16191c\"\n      >\n        <img\n          className={`torrent-img torrent-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          src={decodeURIComponent(item.magnetURI.split(\"ws=\")[1])}\n          style={{ opacity: previewVisible ? 1 : 0 }}\n        />\n        <img\n          className={`enlarged-img enlarged-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-file-key={index}\n          onLoad={() => {\n            setZoomLoaded(true);\n          }}\n          style={{ opacity: zoomLoaded ? 1 : 0 }}\n          src={decodeURIComponent(item.magnetURI.split(\"ws=\")[1])}\n        />\n        <TipRibbon\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          zoomed={zoomed}\n        />\n      </ControlledZoom>\n    </div>\n  );\n};\n\nexport default Image;\n","import React, {    useRef, useEffect,useState } from \"react\";\nimport TipRibbon from \"./TipRibbon\";\nimport videojs from \"video.js\";\n\nconst REACT_APP_SL_SEED_URI = \"https://webtorrent.shock.network\"\nconst STREAM_STATUS_URI = `${REACT_APP_SL_SEED_URI}/rtmpapi/api/streams/live`\n\nconst Stream = ({ id, item, index, postId, tipValue, tipCounter, hideRibbon,width }) => {\n  const playerDOM = useRef(null)\n  const [isLive,setIsLive] = useState(false)\n  const videoStyle = { width:\"100%\"}\n  if(width){\n    videoStyle.width = width\n  }\n  useEffect(() => {\n    if(!item){\n      return\n    }\n    \n    let recheckInterval = null\n    const checkStatus = async () => {\n      try{\n        //TODO regex (?) `${REACT_APP_SL_RTMP_API_URI}/live/${seedToken}/index.m3u8`\n        const [seedToken] = item.magnetURI.split(\"/live/\")[1].split(\"/index.m3u8\") \n        const res = await fetch(`${STREAM_STATUS_URI}/${seedToken}`)\n        const resJ = await res.json()\n        if(!resJ.isLive){\n          return false\n        }\n        const player = videojs(playerDOM.current, {\n          autoplay: true,\n          muted: true,\n          aspectRatio: \"16:9\",\n          \n        });\n        player.src({\n          src: item.magnetURI,\n          type: \"application/x-mpegURL\"\n        });\n        /*listen for 404s from the player\n        player.tech().on('retryplaylist', () => {\n          console.log('retryplaylist');\n        });*/\n        player.play();\n        return true\n      }catch(err){\n        console.log(err)\n        return false\n      }\n    }\n    checkStatus()\n    .then(isLive => {\n      if(isLive){\n        setIsLive(true)\n        return\n      }\n      recheckInterval = setInterval(async ()=> {\n        const isLive = await checkStatus()\n        if(isLive){\n          setIsLive(true)\n          clearInterval(recheckInterval)\n          return\n        }\n      },10000)\n    })\n    \n    return () => {\n      clearInterval(recheckInterval)\n    }\n    \n  },[item])\n  return (\n    <div className=\"media-container w-100\">\n      <div\n        className=\"video-container w-100\"\n        style={{\n          cursor: \"pointer\",\n          width:\"100%\"\n        }}\n      >\n        {!isLive && <p>The streamer has disconnected.</p>}\n        <div style={isLive ? {width:\"100%\"} : {display:'none',width:\"100%\"}}>\n        <video\n          className=\"video-js vjs-default-skin\"\n          ref={playerDOM}\n          style={videoStyle}\n          preload=\"auto\"\n          controls\n          muted\n          autoPlay\n        />\n        </div>\n        {!hideRibbon && <TipRibbon tipCounter={tipCounter} tipValue={tipValue} zoomed={false} />}\n      </div>\n    </div>\n  );\n};\n\nexport default Stream;\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport CopyClipboard from \"react-copy-to-clipboard\";\n\nconst ShareBtn = ({ publicKey, id, username, pinned }) => {\n  const [copiedLink, setCopiedLink] = useState(false);\n  const url = useMemo(\n    () => `https://shock.pub/${publicKey}/post/${id}`,\n    [publicKey, id]\n  );\n\n  const sharePost = useCallback(async () => {\n    if (navigator.share) {\n      navigator.share({\n        text: `Check out this post from ${username} on ShockWallet!`,\n        url\n      });\n      return;\n    }\n  }, [username, url]);\n\n  const onCopy = useCallback(() => {\n    setCopiedLink(true);\n  }, []);\n\n  const getShareMessage = useCallback(\n    () => (copiedLink ? \"Post link copied!\" : \"Share this post\"),\n    [copiedLink]\n  );\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n    const timeout = setTimeout(() => {\n      setCopiedLink(false);\n      ReactTooltip.rebuild();\n    }, 1000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [copiedLink]);\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n  }, []);\n\n  if (!navigator.share) {\n    const tooltipId = `share-${publicKey}-${pinned ? \"pinned\" : \"\"}-${id}`;\n    return (\n      <CopyClipboard text={url} onCopy={onCopy}>\n        <div className=\"share-btn-container\">\n          <div\n            className=\"share-btn\"\n            data-tip={getShareMessage()}\n            data-for={tooltipId}\n          >\n            <i className=\"fas fa-external-link-alt\"></i>\n          </div>\n          <ReactTooltip\n            effect=\"solid\"\n            backgroundColor=\"#3a4d67\"\n            getContent={[getShareMessage, 30]}\n            id={tooltipId}\n          />\n        </div>\n      </CopyClipboard>\n    );\n  }\n\n  return (\n    <div className=\"share-btn\" onClick={sharePost}>\n      <i className=\"fas fa-external-link-alt\"></i>\n    </div>\n  );\n};\n\nexport default ShareBtn;\n","import React, { useEffect, useCallback, useState } from \"react\";\nimport moment from \"moment\";\nimport Tooltip from \"react-tooltip\";\nimport { useDispatch } from \"react-redux\";\nimport { useEmblaCarousel } from \"embla-carousel/react\";\nimport classNames from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport { updateWallPost } from \"../../actions/UserActions\";\nimport { openModal } from \"../../actions/TipActions\";\nimport { gunUser, fetchPath } from \"../../utils/Gun\";\nimport Video from \"./components/Video\";\nimport Image from \"./components/Image\";\nimport Stream from \"./components/Stream\";\nimport ShareBtn from \"./components/ShareBtn\";\nimport \"./css/index.css\";\n\nconst insertMetaTag = ({ ...attributes }) => {\n  const meta = document.createElement(\"meta\");\n  Object.entries(attributes).map(([key, value]) =>\n    meta.setAttribute(key, value)\n  );\n  const head = document.querySelector(\"head\");\n  head.insertBefore(meta, head.firstChild);\n  return meta;\n};\n\nconst Post = ({\n  id,\n  timestamp,\n  avatar,\n  tipCounter,\n  tipValue,\n  publicKey,\n  contentItems = {},\n  username,\n  isOnlineNode,\n  shared,\n  pinned\n}) => {\n  const dispatch = useDispatch();\n  const [carouselRef, carouselAPI] = useEmblaCarousel({\n    slidesToScroll: 1,\n    align: \"center\"\n  });\n\n  const [sliderLength, setSliderLength] = useState(0);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const [liveStatus, setLiveStatus] = useState(\"\");\n  const [viewersCounter, setViewersCounter] = useState(0);\n\n  //effect for liveStatus and viewers counter\n  useEffect(() => {\n    const values = Object.values(contentItems);\n    const videoContent = values.find(\n      item => item.type === \"video/embedded\" && item.liveStatus === \"wasLive\"\n    );\n    const streamContent = values.find(\n      item => item.type === \"stream/embedded\" && item.liveStatus === \"live\"\n    );\n    let status = \"\";\n    if (videoContent) {\n      status = \"was Live\";\n    }\n    if (streamContent) {\n      status = \"is Live\";\n      if (streamContent.viewersCounter) {\n        setViewersCounter(streamContent.viewersCounter);\n      }\n    }\n    if (status) {\n      setLiveStatus(status);\n    }\n  }, [contentItems, setLiveStatus]);\n\n  useEffect(() => {\n    if (pinned) {\n      insertMetaTag({\n        property: \"og:title\",\n        content: `${username} Post`\n      });\n      insertMetaTag({\n        property: \"og:url\",\n        content: `https://shock.pub/${publicKey}/post/${id}`\n      });\n      insertMetaTag({\n        property: `og:type`,\n        content: `website`\n      });\n      insertMetaTag({\n        property: \"og:description\",\n        content:\n          contentItems\n            .filter(item => item.type === \"text/paragraph\")\n            .map(item => item.text)\n            .join(\"\\n\") || `View ${username}'s posts on ShockWallet`\n      });\n\n      contentItems\n        .filter(item =>\n          [\"image/embedded\", \"video/embedded\"].includes(item.type)\n        )\n        .map(item => {\n          const [type] = item.type.split(\"/\");\n\n          insertMetaTag({\n            property: `og:${type}:height`,\n            content: \"314\"\n          });\n\n          insertMetaTag({\n            property: `og:${type}:width`,\n            content: \"600\"\n          });\n\n          insertMetaTag({\n            property: `og:${type}`,\n            content: decodeURIComponent(item.magnetURI.split(\"ws=\")[1])\n          });\n        });\n    }\n  }, [pinned, username, contentItems, publicKey, id]);\n\n  const getMediaContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type !== \"text/paragraph\"\n    );\n  };\n\n  const getTextContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type === \"text/paragraph\"\n    );\n  };\n\n  const parseContent = ([key, item], index) => {\n    if (item.type === \"text/paragraph\") {\n      return <p key={key}>{item.text}</p>;\n    }\n\n    if (item.type === \"image/embedded\") {\n      return (\n        <Image\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    if (item.type === \"video/embedded\") {\n      return (\n        <Video\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    if (item.type === \"stream/embedded\") {\n      return (\n        <Stream\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const nextSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollNext()) {\n      carouselAPI.scrollNext();\n    }\n  }, [carouselAPI]);\n\n  const prevSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollPrev()) {\n      carouselAPI.scrollPrev();\n    }\n  }, [carouselAPI]);\n\n  const handleUserKeyDown = useCallback(\n    e => {\n      if (sliderLength === 0) return;\n      const { key } = e;\n\n      if (key === \"ArrowRight\") {\n        nextSlide();\n      }\n\n      if (key === \"ArrowLeft\") {\n        prevSlide();\n      }\n    },\n    [sliderLength, prevSlide, nextSlide]\n  );\n\n  const updateActiveSlide = useCallback(() => {\n    setActiveSlide(carouselAPI.selectedScrollSnap());\n  }, [carouselAPI, setActiveSlide]);\n\n  useEffect(() => {\n    fetchPath({\n      path: `posts/${id}/tipsSet`,\n      gunPointer: gunUser(publicKey),\n      method: \"load\"\n    }).then(data => {\n      const tipSet = data ? Object.values(data) : [];\n      const lenSet = tipSet.length;\n      const tot =\n        lenSet > 0 ? tipSet.reduce((acc, val) => Number(val) + Number(acc)) : 0;\n      dispatch(\n        updateWallPost({\n          postID: id,\n          data: {\n            tipValue: tot,\n            tipCounter: lenSet\n          }\n        })\n      );\n    });\n  }, [dispatch, id, publicKey]);\n\n  useEffect(() => {\n    if (!carouselAPI) return;\n\n    carouselAPI.on(\"scroll\", updateActiveSlide);\n    setSliderLength(carouselAPI.scrollSnapList().length);\n    window.addEventListener(\"keydown\", handleUserKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyDown);\n      carouselAPI.off(\"scroll\", updateActiveSlide);\n    };\n  }, [carouselAPI, sliderLength, handleUserKeyDown, updateActiveSlide]);\n\n  const tipPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    dispatch(\n      openModal({\n        targetType: \"tip\",\n        ackInfo: id\n      })\n    );\n  }, [dispatch, id, isOnlineNode]);\n\n  useEffect(() => {\n    Tooltip.rebuild();\n  }, []);\n\n  return (\n    <div className=\"post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <Link\n            className=\"av\"\n            to={`/${publicKey}`}\n            style={{\n              backgroundImage: `url(${avatar})`\n            }}\n          />\n          <div className=\"details\">\n            <div className=\"username\">\n              <Link to={`/otherUser/${publicKey}`}>{username}</Link>\n              {liveStatus && (\n                <p className=\"liveStatus\">\n                  {liveStatus}\n                  <i\n                    className={`fas fa-circle liveStatusIcon ${\n                      liveStatus === \"Is Live\" ? \"liveIcon\" : \"\"\n                    }`}\n                  ></i>\n                  {liveStatus === \"Is Live\" && (\n                    <span> | {viewersCounter} watching</span>\n                  )}\n                </p>\n              )}\n            </div>\n            <p>{moment.utc(timestamp).fromNow()}</p>\n          </div>\n        </div>\n        <ShareBtn\n          publicKey={publicKey}\n          id={id}\n          username={username}\n          pinned={pinned}\n        />\n      </div>\n\n      <div className=\"content\">\n        {getTextContent().map(parseContent)}\n        <div className=\"media-content-carousel\">\n          {sliderLength > 1 ? (\n            <div className=\"media-carousel-controls-container\">\n              <div\n                className=\"media-carousel-arrow fas fa-angle-left\"\n                onClick={prevSlide}\n              ></div>\n              <div className=\"media-carousel-pages\">\n                {Array.from({ length: sliderLength }).map((_, key) => (\n                  <div\n                    className={classNames({\n                      \"media-carousel-page\": true,\n                      \"active-carousel-page\": activeSlide === key\n                    })}\n                    onClick={() => carouselAPI?.scrollTo(key)}\n                  ></div>\n                ))}\n              </div>\n              <div\n                className=\"media-carousel-arrow fas fa-angle-right\"\n                onClick={nextSlide}\n              ></div>\n            </div>\n          ) : null}\n          <div className=\"media-content-root\" ref={carouselRef}>\n            <div className=\"media-content-container\">\n              {getMediaContent().map(parseContent)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"actions\">\n        <div\n          className=\"icon-tip-btn\"\n          data-tip=\"Tip this post\"\n          onClick={tipPost}\n        >\n          <i className=\"tip-icon icon-thin-feed\"></i>\n        </div>\n        {/* <div\n          className=\"tip-btn-container\"\n          onClick={tipPost}\n          data-tip={\n            isOnlineNode\n              ? tipCounter > 0\n                ? `${tipValue} Sats tipped so far`\n                : null\n              : \"You can only tip online users\"\n          }\n          style={{\n            opacity: isOnlineNode ? 1 : 0.5,\n            cursor: isOnlineNode ? \"pointer\" : \"default\"\n          }}\n        >\n          <div className=\"tip-btn-icon\">\n            <img src={lightning} alt=\"Send Tip\" />\n          </div>\n          <div className=\"tip-btn-text\">\n            <Counter value={tipCounter} /> {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n          </div>\n        </div> */}\n        <Tooltip backgroundColor=\"#3a4d67\" effect=\"solid\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n"],"sourceRoot":""}
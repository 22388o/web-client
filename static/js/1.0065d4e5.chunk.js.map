{"version":3,"sources":["common/Post/components/TipRibbon.js","common/Post/components/Video.js","common/Post/components/Image.js","common/Post/components/Stream.js","common/Post/components/ShareBtn.js","common/Post/index.js"],"names":["TipRibbon","tipCounter","tipValue","zoomed","className","style","opacity","Video","id","item","index","postId","videoRef","useRef","useState","observe","useInView","trackVisibility","delay","onEnter","current","play","onLeave","pause","cursor","ref","data-torrent","magnetURI","data-file-key","controls","data-played","Image","setZoomed","zoomLoaded","setZoomLoaded","previewVisible","setPreviewVisible","animationTimer","setAnimationTimer","handleZoomChange","useCallback","value","clearTimeout","timer","setTimeout","Controlled","isZoomed","onZoomChange","overlayBgColorStart","overlayBgColorEnd","alt","src","decodeURIComponent","replace","onLoad","STREAM_STATUS_URI","Stream","hideRibbon","width","playerDOM","unobserveOnEnter","inView","isLive","setIsLive","videoStyle","useEffect","recheckInterval","checkStatus","a","split","seedToken","fetch","res","json","player","videojs","autoplay","muted","aspectRatio","type","console","log","then","setInterval","clearInterval","display","preload","autoPlay","ShareBtn","publicKey","username","pinned","contentItems","copiedLink","setCopiedLink","url","useMemo","media","filter","includes","map","description","text","join","metadata","title","window","location","host","metadataBase64","btoa","JSON","stringify","sharePost","navigator","share","onCopy","getShareMessage","ReactTooltip","rebuild","timeout","tooltipId","data-tip","data-for","effect","backgroundColor","getContent","onClick","Post","timestamp","avatar","isOnlineNode","dispatch","useDispatch","useEmblaCarousel","slidesToScroll","align","draggable","carouselRef","carouselAPI","post","attachMedia","sliderLength","setSliderLength","activeSlide","setActiveSlide","liveStatus","setLiveStatus","viewersCounter","setViewersCounter","values","Object","videoContent","find","streamContent","status","parseContent","key","nextSlide","canScrollNext","scrollNext","prevSlide","canScrollPrev","scrollPrev","handleUserKeyDown","e","updateActiveSlide","selectedScrollSnap","fetchPath","path","gunPointer","gunUser","method","data","tipSet","lenSet","length","tot","reduce","acc","val","Number","updateWallPost","postID","on","scrollSnapList","addEventListener","removeEventListener","off","tipPost","openModal","targetType","ackInfo","Tooltip","to","backgroundImage","moment","utc","fromNow","entries","Array","from","_","classNames","scrollTo"],"mappings":"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","file":"static/js/1.0065d4e5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TipRibbon = ({ tipCounter, tipValue, zoomed }) =>\n  tipValue > 0 ? (\n    <div className=\"ribbon-container\" style={{ opacity: !zoomed ? 1 : 0 }}>\n      <p className=\"ribbon-title\">Total Tips</p>\n      <p className=\"ribbon-value\">\n        {tipCounter} {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n      </p>\n    </div>\n  ) : null;\n\nexport default TipRibbon;\n","import React, { useRef, useState } from \"react\";\nimport useInView from \"react-cool-inview\";\nimport videojs from \"video.js\";\nimport TipRibbon from \"./TipRibbon\";\nimport \"../../../styles/video.js.css\";\nimport \"../css/index.css\";\n\nconst Video = ({ id, item, index, postId, tipValue, tipCounter }) => {\n  const videoRef = useRef();\n  const [initialized, setInitialized] = useState(false);\n  const { observe } = useInView({\n    trackVisibility: true,\n    delay: 100,\n    onEnter: () => {\n      if (videoRef.current) {\n        videoRef.current.play();\n      }\n    },\n    onLeave: () => {\n      if (!videoRef.current) {\n        return;\n      }\n\n      videoRef.current.pause();\n    }\n  });\n\n  return (\n    <div className=\"media-container\">\n      <div\n        className=\"video-container\"\n        style={{\n          cursor: \"pointer\"\n        }}\n        ref={observe}\n      >\n        <video\n          className={`torrent-video torrent-video-${postId}-${id} torrent-video-${postId} video-js vjs-default-skin`}\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          controls\n          data-played=\"false\"\n          ref={videoRef}\n        />\n        <TipRibbon tipCounter={tipCounter} tipValue={tipValue} />\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { useState } from \"react\";\nimport { Controlled as ControlledZoom } from \"react-medium-image-zoom\";\nimport TipRibbon from \"./TipRibbon\";\nimport \"react-medium-image-zoom/dist/styles.css\";\nimport \"../css/index.css\";\nimport { useCallback } from \"react\";\n\nconst IMAGE_TRANSITION_MS = 200;\n\nconst Image = ({ id, item, index, postId, tipValue, tipCounter }) => {\n  const [zoomed, setZoomed] = useState(false);\n  const [zoomLoaded, setZoomLoaded] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(true);\n  const [animationTimer, setAnimationTimer] = useState(null);\n\n  const handleZoomChange = useCallback(\n    value => {\n      clearTimeout(animationTimer);\n      setZoomed(value);\n      if (!value && zoomLoaded) {\n        setZoomLoaded(false);\n        const timer = setTimeout(() => {\n          setPreviewVisible(true);\n        }, IMAGE_TRANSITION_MS);\n        setAnimationTimer(timer);\n      }\n\n      if (value) {\n        setPreviewVisible(false);\n      }\n    },\n    [animationTimer, zoomLoaded]\n  );\n\n  return (\n    <div className=\"media-container\">\n      <ControlledZoom\n        isZoomed={zoomed}\n        onZoomChange={handleZoomChange}\n        overlayBgColorStart=\"#16191c00\"\n        overlayBgColorEnd=\"#16191c\"\n      >\n        <img\n          className={`torrent-img torrent-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          src={decodeURIComponent(item.magnetURI.replace(/.*(ws=)/gi, \"\"))}\n          style={{ opacity: previewVisible ? 1 : 0 }}\n        />\n        <img\n          className={`enlarged-img enlarged-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-file-key={index}\n          onLoad={() => {\n            setZoomLoaded(true);\n          }}\n          style={{ opacity: zoomLoaded ? 1 : 0 }}\n          src={decodeURIComponent(item.magnetURI.replace(/.*(ws=)/gi, \"\"))}\n        />\n        <TipRibbon\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          zoomed={zoomed}\n        />\n      </ControlledZoom>\n    </div>\n  );\n};\n\nexport default Image;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport useInView from \"react-cool-inview\";\nimport TipRibbon from \"./TipRibbon\";\nimport videojs from \"video.js\";\n\nconst REACT_APP_SL_SEED_URI = \"https://webtorrent.shock.network\";\nconst STREAM_STATUS_URI = `${REACT_APP_SL_SEED_URI}/rtmpapi/api/streams/live`;\n\nconst Stream = ({\n  id,\n  item,\n  index,\n  postId,\n  tipValue,\n  tipCounter,\n  hideRibbon,\n  width\n}) => {\n  const playerDOM = useRef(null);\n  const { inView, observe } = useInView({\n    trackVisibility: true,\n    delay: 100,\n    unobserveOnEnter: true\n  });\n  const [isLive, setIsLive] = useState(false);\n  const videoStyle = { width: \"100%\" };\n  if (width) {\n    videoStyle.width = width;\n  }\n  useEffect(() => {\n    if (!item || !inView) {\n      return;\n    }\n\n    let recheckInterval = null;\n    const checkStatus = async () => {\n      try {\n        //TODO regex (?) `${REACT_APP_SL_RTMP_API_URI}/live/${seedToken}/index.m3u8`\n        const [seedToken] = item.magnetURI\n          .replace(/.*(\\/live\\/)/, \"\")\n          .split(\"/index.m3u8\");\n        const res = await fetch(`${STREAM_STATUS_URI}/${seedToken}`);\n        const resJ = await res.json();\n        if (!resJ.isLive) {\n          return false;\n        }\n        const player = videojs(playerDOM.current, {\n          autoplay: true,\n          muted: true,\n          aspectRatio: \"16:9\"\n        });\n        player.src({\n          src: item.magnetURI,\n          type: \"application/x-mpegURL\"\n        });\n        /*listen for 404s from the player\n        player.tech().on('retryplaylist', () => {\n          console.log('retryplaylist');\n        });*/\n        player.play();\n        return true;\n      } catch (err) {\n        console.log(err);\n        return false;\n      }\n    };\n    checkStatus().then(isLive => {\n      if (isLive) {\n        setIsLive(true);\n        return;\n      }\n      recheckInterval = setInterval(async () => {\n        const isLive = await checkStatus();\n        if (isLive) {\n          setIsLive(true);\n          clearInterval(recheckInterval);\n          return;\n        }\n      }, 10000);\n    });\n\n    return () => {\n      clearInterval(recheckInterval);\n    };\n  }, [item, inView]);\n  return (\n    <div className=\"media-container w-100\">\n      <div\n        className=\"video-container w-100\"\n        style={{\n          cursor: \"pointer\",\n          width: \"100%\"\n        }}\n      >\n        {!isLive && <p>The streamer has disconnected.</p>}\n        <div\n          style={\n            isLive ? { width: \"100%\" } : { display: \"none\", width: \"100%\" }\n          }\n          ref={observe}\n        >\n          <video\n            className=\"video-js vjs-default-skin\"\n            ref={playerDOM}\n            style={videoStyle}\n            preload=\"auto\"\n            controls\n            muted\n            autoPlay\n          />\n        </div>\n        {!hideRibbon && (\n          <TipRibbon\n            tipCounter={tipCounter}\n            tipValue={tipValue}\n            zoomed={false}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Stream;\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport CopyClipboard from \"react-copy-to-clipboard\";\n\nconst ShareBtn = ({ publicKey, id, username, pinned, contentItems = [] }) => {\n  const [copiedLink, setCopiedLink] = useState(false);\n  const url = useMemo(() => {\n    const media = contentItems\n      .filter(item => [\"image/embedded\", \"video/embedded\"].includes(item.type))\n      .map(item => ({\n        url: decodeURIComponent(item.magnetURI.replace(/.*(ws=)/gi, \"\")),\n        type: item.type.replace(\"/embedded\", \"\")\n      }));\n\n    const description =\n      contentItems\n        .filter(item => item.type === \"text/paragraph\")\n        .map(item => item.text)\n        .join(\"\\n\") || `View ${username}'s posts on ShockWallet`;\n\n    const metadata = {\n      title: `${username} Post`,\n      url: `https://${window.location.host}/${publicKey}/post/${id}`,\n      type: `website`,\n      media,\n      description\n    };\n\n    const metadataBase64 = btoa(JSON.stringify(metadata));\n    const shareLink = `https://${window.location.host}/${publicKey}/post/${id}?metadata=${metadataBase64}`;\n\n    return shareLink;\n  }, [contentItems, username, publicKey, id]);\n\n  const sharePost = useCallback(async () => {\n    if (navigator.share) {\n      navigator.share({\n        text: `Check out this post from ${username} on ShockWallet!`,\n        url\n      });\n      return;\n    }\n  }, [username, url]);\n\n  const onCopy = useCallback(() => {\n    setCopiedLink(true);\n  }, []);\n\n  const getShareMessage = useCallback(\n    () => (copiedLink ? \"Post link copied!\" : \"Share this post\"),\n    [copiedLink]\n  );\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n    const timeout = setTimeout(() => {\n      setCopiedLink(false);\n      ReactTooltip.rebuild();\n    }, 1000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [copiedLink]);\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n  }, []);\n\n  if (!navigator.share) {\n    const tooltipId = `share-${publicKey}-${pinned ? \"pinned\" : \"\"}-${id}`;\n    return (\n      <CopyClipboard text={url} onCopy={onCopy}>\n        <div className=\"share-btn-container\">\n          <div\n            className=\"share-btn\"\n            data-tip={getShareMessage()}\n            data-for={tooltipId}\n          >\n            <i className=\"fas fa-external-link-alt\"></i>\n          </div>\n          <ReactTooltip\n            effect=\"solid\"\n            backgroundColor=\"#3a4d67\"\n            getContent={[getShareMessage, 30]}\n            id={tooltipId}\n          />\n        </div>\n      </CopyClipboard>\n    );\n  }\n\n  return (\n    <div className=\"share-btn\" onClick={sharePost}>\n      <i className=\"fas fa-external-link-alt\"></i>\n    </div>\n  );\n};\n\nexport default ShareBtn;\n","import React, { useEffect, useCallback, useState } from \"react\";\nimport moment from \"moment\";\nimport Tooltip from \"react-tooltip\";\nimport { useDispatch } from \"react-redux\";\nimport { useEmblaCarousel } from \"embla-carousel/react\";\nimport classNames from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport useInView from \"react-cool-inview\";\nimport { updateWallPost } from \"../../actions/UserActions\";\nimport { openModal } from \"../../actions/TipActions\";\nimport { gunUser, fetchPath } from \"../../utils/Gun\";\nimport Video from \"./components/Video\";\nimport Image from \"./components/Image\";\nimport Stream from \"./components/Stream\";\nimport ShareBtn from \"./components/ShareBtn\";\nimport \"./css/index.css\";\nimport { attachMedia } from \"../../utils/Torrents\";\n\nconst Post = ({\n  id,\n  timestamp,\n  avatar,\n  tipCounter,\n  tipValue,\n  publicKey,\n  contentItems = {},\n  username,\n  isOnlineNode,\n  pinned\n}) => {\n  const dispatch = useDispatch();\n  const [carouselRef, carouselAPI] = useEmblaCarousel({\n    slidesToScroll: 1,\n    align: \"center\",\n    draggable: false\n  });\n  const { observe } = useInView({\n    trackVisibility: false,\n    unobserveOnEnter: true,\n    onEnter: () => {\n      const post = { contentItems, id };\n      attachMedia([post], false);\n    }\n  });\n\n  const [sliderLength, setSliderLength] = useState(0);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const [liveStatus, setLiveStatus] = useState(\"\");\n  const [viewersCounter, setViewersCounter] = useState(0);\n\n  //effect for liveStatus and viewers counter\n  useEffect(() => {\n    const values = Object.values(contentItems);\n    const videoContent = values.find(\n      item => item.type === \"video/embedded\" && item.liveStatus === \"wasLive\"\n    );\n    const streamContent = values.find(\n      item => item.type === \"stream/embedded\" && item.liveStatus === \"live\"\n    );\n    let status = \"\";\n    if (videoContent) {\n      status = \"was Live\";\n    }\n    if (streamContent) {\n      status = \"is Live\";\n      if (streamContent.viewersCounter) {\n        setViewersCounter(streamContent.viewersCounter);\n      }\n    }\n    if (status) {\n      setLiveStatus(status);\n    }\n  }, [contentItems, setLiveStatus]);\n\n  const getMediaContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type !== \"text/paragraph\"\n    );\n  };\n\n  const getTextContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type === \"text/paragraph\"\n    );\n  };\n\n  const parseContent = ([key, item], index) => {\n    if (item.type === \"text/paragraph\") {\n      return <p key={key}>{item.text}</p>;\n    }\n\n    if (item.type === \"image/embedded\") {\n      return (\n        <Image\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    if (item.type === \"video/embedded\") {\n      return (\n        <Video\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    if (item.type === \"stream/embedded\") {\n      return (\n        <Stream\n          id={key}\n          item={item}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const nextSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollNext()) {\n      carouselAPI.scrollNext();\n    }\n  }, [carouselAPI]);\n\n  const prevSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollPrev()) {\n      carouselAPI.scrollPrev();\n    }\n  }, [carouselAPI]);\n\n  const handleUserKeyDown = useCallback(\n    e => {\n      if (sliderLength === 0) return;\n      const { key } = e;\n\n      if (key === \"ArrowRight\") {\n        nextSlide();\n      }\n\n      if (key === \"ArrowLeft\") {\n        prevSlide();\n      }\n    },\n    [sliderLength, prevSlide, nextSlide]\n  );\n\n  const updateActiveSlide = useCallback(() => {\n    setActiveSlide(carouselAPI.selectedScrollSnap());\n  }, [carouselAPI, setActiveSlide]);\n\n  useEffect(() => {\n    fetchPath({\n      path: `posts/${id}/tipsSet`,\n      gunPointer: gunUser(publicKey),\n      method: \"load\"\n    }).then(data => {\n      const tipSet = data ? Object.values(data) : [];\n      const lenSet = tipSet.length;\n      const tot =\n        lenSet > 0 ? tipSet.reduce((acc, val) => Number(val) + Number(acc)) : 0;\n      dispatch(\n        updateWallPost({\n          postID: id,\n          data: {\n            tipValue: tot,\n            tipCounter: lenSet\n          }\n        })\n      );\n    });\n  }, [dispatch, id, publicKey]);\n\n  useEffect(() => {\n    if (!carouselAPI) return;\n\n    carouselAPI.on(\"scroll\", updateActiveSlide);\n    setSliderLength(carouselAPI.scrollSnapList().length);\n    window.addEventListener(\"keydown\", handleUserKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyDown);\n      carouselAPI.off(\"scroll\", updateActiveSlide);\n    };\n  }, [carouselAPI, sliderLength, handleUserKeyDown, updateActiveSlide]);\n\n  const tipPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    dispatch(\n      openModal({\n        targetType: \"tip\",\n        ackInfo: id\n      })\n    );\n  }, [dispatch, id, isOnlineNode]);\n\n  useEffect(() => {\n    Tooltip.rebuild();\n  }, []);\n\n  return (\n    <div className=\"post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <Link\n            className=\"av\"\n            to={`/${publicKey}`}\n            style={{\n              backgroundImage: `url(${avatar})`\n            }}\n          />\n          <div className=\"details\">\n            <div className=\"username\">\n              <Link to={`/otherUser/${publicKey}`}>{username}</Link>\n              {liveStatus && (\n                <p className=\"liveStatus\">\n                  {liveStatus}\n                  <i\n                    className={`fas fa-circle liveStatusIcon ${\n                      liveStatus === \"Is Live\" ? \"liveIcon\" : \"\"\n                    }`}\n                  ></i>\n                  {liveStatus === \"Is Live\" && (\n                    <span> | {viewersCounter} watching</span>\n                  )}\n                </p>\n              )}\n            </div>\n            <p>{moment.utc(timestamp).fromNow()}</p>\n          </div>\n        </div>\n        <ShareBtn\n          publicKey={publicKey}\n          id={id}\n          username={username}\n          pinned={pinned}\n          contentItems={contentItems}\n        />\n      </div>\n\n      <div className=\"content\" ref={observe}>\n        {getTextContent().map(parseContent)}\n        <div className=\"media-content-carousel\">\n          {sliderLength > 1 ? (\n            <div className=\"media-carousel-controls-container\">\n              <div\n                className=\"media-carousel-arrow fas fa-angle-left\"\n                onClick={prevSlide}\n              ></div>\n              <div className=\"media-carousel-pages\">\n                {Array.from({ length: sliderLength }).map((_, key) => (\n                  <div\n                    className={classNames({\n                      \"media-carousel-page\": true,\n                      \"active-carousel-page\": activeSlide === key\n                    })}\n                    onClick={() => carouselAPI?.scrollTo(key)}\n                  ></div>\n                ))}\n              </div>\n              <div\n                className=\"media-carousel-arrow fas fa-angle-right\"\n                onClick={nextSlide}\n              ></div>\n            </div>\n          ) : null}\n          <div className=\"media-content-root\" ref={carouselRef}>\n            <div className=\"media-content-container\">\n              {getMediaContent().map(parseContent)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"actions\">\n        <div\n          className=\"icon-tip-btn\"\n          data-tip=\"Tip this post\"\n          onClick={tipPost}\n        >\n          <i className=\"tip-icon icon-thin-feed\"></i>\n        </div>\n        {/* <div\n          className=\"tip-btn-container\"\n          onClick={tipPost}\n          data-tip={\n            isOnlineNode\n              ? tipCounter > 0\n                ? `${tipValue} Sats tipped so far`\n                : null\n              : \"You can only tip online users\"\n          }\n          style={{\n            opacity: isOnlineNode ? 1 : 0.5,\n            cursor: isOnlineNode ? \"pointer\" : \"default\"\n          }}\n        >\n          <div className=\"tip-btn-icon\">\n            <img src={lightning} alt=\"Send Tip\" />\n          </div>\n          <div className=\"tip-btn-text\">\n            <Counter value={tipCounter} /> {tipCounter === 1 ? \"Tip\" : \"Tips\"}\n          </div>\n        </div> */}\n        <Tooltip backgroundColor=\"#3a4d67\" effect=\"solid\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n"],"sourceRoot":""}
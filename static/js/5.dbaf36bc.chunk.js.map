{"version":3,"sources":["images/av1.jpg","utils/Cache.js","utils/Promise.js","utils/Torrents.js","images/banner-bg.jpg","images/lightning-logo.svg","common/Divider/index.js","pages/User/index.js"],"names":["module","exports","getCachedFile","fileName","a","FileCache","_init","Promise","resolve","reject","init","then","console","log","persist","status","persistent","load","cachedFile","createURL","warn","renderCachedFile","fileURL","selector","elements","document","querySelectorAll","length","forEach","element","src","muted","autoplay","saveFile","buffer","save","runSerial","tasks","result","task","supportedFileTypes","formats","options","_getFileType","file","extension","name","split","slice","supportedFileType","Object","entries","filter","includes","fileType","webTorrentClient","WebTorrent","attachMedia","posts","torrentMode","torrentTasks","map","post","contentItems","id","item","type","key","get","magnetURI","add","torrent","files","target","destroy","torrentElements","torrentElement","contentURL","decodeURIComponent","replace","format","toLowerCase","endsWith","compatibleURL","setAttribute","renderTo","on","getBlob","err","blob","querySelector","dataset","played","reduce","torrents","Divider","text","className","Post","React","lazy","SharedPost","UserPage","dispatch","useDispatch","params","useParams","wall","useSelector","user","profile","me","auth","pair","paymentRequest","transaction","useState","setUserLoading","wallLoading","setWallLoading","tipModalOpen","setTipModalOpen","tipLoading","setTipLoading","tipAmount","setTipAmount","isOnlineApp","setIsOnlineApp","isOnlineNode","setIsOnlineNode","copied","setCopied","onlineCheckTimer","setOnlineCheckTimer","targetType","tipMetadata","setTipMetadata","publicKey","userId","fetchUserData","useCallback","resetUserData","getUserProfile","getUserHeader","getUserAvatar","error","fetchUserWall","resetUserWall","getUserWall","sendTip","payUser","senderPair","recipientPublicKey","amount","metadata","openTipModal","closeTipModal","resetPaymentRequest","initializeUserWall","postId","generateGunPair","getPinnedPost","useEffect","lastSeenAppListener","listenPath","path","gunPointer","gunUser","callback","event","updateUserProfile","lastSeenApp","lastSeenNodeListener","lastSeenNode","displayNameListener","displayName","bioListener","bio","off","clearTimeout","timer","setTimeout","onlineThreshold","Moment","utc","subtract","isSameOrAfter","setCopiedStatus","Tooltip","rebuild","username","alias","renderPost","avatar","av1","fallback","Loader","postID","postPublicKey","originalAuthor","sharedPostId","sharedTimestamp","date","sharerAvatar","sharerPublicKey","sharerUsername","pinned","timestamp","page","tipValue","tipCounter","style","backgroundImage","header","defaultBanner","color","onClick","opacity","cursor","data-tip","shockLogo","alt","backgroundColor","effect","pinnedPost","value","size","bgColor","fgColor","href","onCopy","onChange","e","isIOS","rel"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,iC,0LCoB9BC,EAAa,uCAAG,WAAMC,GAAN,eAAAC,EAAA,kEAEpBC,IAAUC,MAFU,gCAf3B,IAAIC,SAAQ,SAACC,EAASC,GACpBJ,IAAUK,KAJS,oBAKhBC,MAAK,WAEJ,OADAC,QAAQC,IAAI,2BACLR,IAAUS,aAElBH,MAAK,SAAAI,GACAA,EAAOC,WACTR,EAAQO,GAERN,EAAOM,SAKY,uBAMAV,IAAUY,KAAKd,GANf,cAMnBe,EANmB,yBAOlBA,EAAWC,aAPO,yCASzBP,QAAQQ,KAAR,MATyB,mBAUlB,GAVkB,0DAAH,sDAcbC,EAAmB,SAACC,EAASC,GACxC,IAAMC,EAAWC,SAASC,iBAAiBH,GAQ3C,OAPIC,GAAYA,EAASG,QACvBH,EAASI,SAAQ,SAAAC,GACfA,EAAQC,IAAMR,EACdO,EAAQE,OAAQ,EAChBF,EAAQG,UAAW,OAGdR,KAAcA,EAASG,QAGrBM,EAAW,SAAC9B,EAAU+B,GACjC,OAAO7B,IAAU8B,KAAKhC,EAAU+B,IC/CrBE,EAAY,SAAAC,GACvB,IAAIC,EAAS/B,QAAQC,UAIrB,OAHA6B,EAAMT,SAAQ,SAAAW,GACZD,EAASA,EAAO3B,MAAK,kBAAM4B,UAEtBD,GCDHE,EAAqB,CACzB,iBAAkB,CAChBC,QAAS,CAAC,MAAO,QACjBZ,QAAS,QACTa,QAAS,CACPV,UAAU,EACVD,OAAO,IAGX,iBAAkB,CAChBU,QAAS,CAAC,MAAO,MAAO,OAAQ,QAChCZ,QAAS,MACTa,QAAS,KAIPC,EAAe,SAAAC,GAAS,IAAD,IACrBC,EAAS,UAAGD,EAAKE,YAAR,iBAAG,EAAWC,MAAM,YAApB,aAAG,EAAuBC,OAAO,GAAG,GAC7CC,EAAoBC,OAAOC,QAC/BX,GACAY,QAAO,oDAA6BX,QAAQY,SAASR,MAAY,GAEnE,GAAII,EAAmB,CAAC,IAAD,cACIA,EADJ,GACdH,EADc,KACRQ,EADQ,KAErB,OAAO,aACLR,QACGQ,GAIP,OAAO,MAGIC,EAAmB,IAAIC,IAEvBC,EAAc,WAAqC,IAApCC,EAAmC,uDAA3B,GAAIC,IAAuB,yDACvDC,EAAeF,EAClBG,KAAI,SAAAC,GAAS,IACJC,EAAqBD,EAArBC,aAAcC,EAAOF,EAAPE,GACtB,OAAOd,OAAOC,QAAQY,GACnBX,QAAO,mCAAOa,GAAP,kBAAiBzB,EAAmByB,EAAKC,SAChDL,KAAI,mCAAEM,EAAF,KAAOF,EAAP,YAAiB,kBACpB,IAAI1D,SAAQ,SAAAC,GACY+C,EAAiBa,IAAIH,EAAKI,WAG9C7D,GAAQ,GAIV+C,EAAiBe,IAAIL,EAAKI,UAA1B,uCAAqC,WAAME,GAAN,eAAAnE,EAAA,sDAEnCI,GAAQ,IAEFgE,EAAQD,EAAQC,MAAMpB,QAAO,SAAAR,GAAS,IAAD,IACnCC,EAAS,UAAGD,EAAKE,YAAR,iBAAG,EAAWC,MAAM,YAApB,aAAG,EAAuBC,OAAO,GAAG,GAC7CC,EAAoBC,OAAOC,QAC/BX,GACAY,QAAO,oDACCX,QAAQY,SAASR,MACzB,GACF,QAAII,GAAmB,YACAA,EADA,MAEIR,QAAQY,SAASR,OAMxCgB,IAAN,uCAAU,WAAMjB,GAAN,2BAAAxC,EAAA,yDACFkD,EAAWX,EAAaC,GADtB,wDAOFzC,EAPE,UAOY6D,EAPZ,YAOkBG,EAPlB,YAOyBvB,EAAKE,MAEhCjB,EAAUyB,EAASzB,QACnB4C,EAVE,UAUU5C,EAVV,0BAUmCoC,EAAKI,UAVxC,eAWiBnE,EAAcC,GAX/B,YAWFe,EAXE,gCAcAqD,EAAUhB,EAAiBa,IAAIH,EAAKI,aAGxCE,EAAQG,UAGVrD,EAAiBH,EAAYuD,GApBvB,2BAwBFE,EAAkBlD,SAASC,iBAAiB+C,GAClD7D,QAAQC,IAAI,oBAAqB8D,GACjCA,EAAgB/C,SAAQ,SAAAgD,GACtB,IAAMC,EAAaC,mBACjBb,EAAKI,UAAUU,QAAQ,YAAa,KAFE,EAIhBzB,EAASb,QAAQW,QAAO,SAAA4B,GAAM,OACpDH,EACGI,cACAC,SAFH,WAEgBF,EAAOC,mBAHlBE,EAJiC,qBAUpCxB,GAAgBwB,EAKpBP,EAAeQ,aAAa,MAAOP,GAJjCjC,EAAKyC,SAAST,EAAgBtB,EAASZ,YArCnC,4CAAV,uDA6CA6B,EAAQe,GAAG,QAAQ,WACjBd,EAAMX,KAAI,SAAAjB,GACR,IAAMU,EAAWX,EAAaC,GACxBzC,EAAQ,UAAM6D,EAAN,YAAYG,EAAZ,YAAmBvB,EAAKE,MAChCjB,EAAUyB,EAASzB,QACnB4C,EAAM,UAAM5C,EAAN,0BAA+BoC,EAAKI,UAApC,MAEZzB,EAAK2C,QAAL,uCAAa,WAAOC,EAAKC,GAAZ,eAAArF,EAAA,0DACPoF,EADO,uBAET5E,QAAQQ,KAAKoE,GAFJ,iCAMX5E,QAAQC,IAAI,yBAA0BV,EAAUsF,GANrC,SAOLxD,EAAS9B,EAAUsF,GAPd,UASoB,UADfhE,SAASiE,cAAcjB,GAC3BkB,QAAQC,OATT,kCAUgB1F,EAAcC,GAV9B,QAUHe,EAVG,OAWTG,EAAiBH,EAAYuD,GAXpB,4CAAb,+DAvE+B,2CAArC,iEA2FPoB,QAAO,SAACC,EAAU/B,GAAX,4BAAgC+B,GAAhC,YAA6C/B,MAAe,IAEtE3B,EAAUwB,K,81BCnJZ5D,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,8OCa5B8F,G,OAVC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,SACf,uBAAGA,UAAU,gBAAgBD,GAC7B,yBAAKC,UAAU,Y,wECyBfC,EAAOC,IAAMC,MAAK,kBAAM,uDACxBC,EAAaF,IAAMC,MAAK,kBAAM,uDAgbrBE,UA5aE,WAAO,IAAD,EACfC,EAAWC,cACXC,EAASC,cACTC,EAAOC,aAAY,qBAAGC,KAAgBF,QACtCG,EAAUF,aAAY,qBAAGC,KAAgBC,WACzCC,EAAKH,aAAY,qBAAGI,KAAgBC,QACpCC,EAAiBN,aACrB,qBAAGO,YAA8BD,kBAPd,EAWiBE,oBAAS,GAX1B,mBAWDC,GAXC,aAYiBD,oBAAS,GAZ1B,mBAYdE,EAZc,KAYDC,EAZC,OAamBH,oBAAS,GAb5B,mBAadI,EAbc,KAaAC,EAbA,OAceL,oBAAS,GAdxB,mBAcdM,EAdc,KAcFC,EAdE,OAeaP,mBAAS,IAftB,mBAedQ,EAfc,KAeHC,EAfG,OAgBiBT,oBAAS,GAhB1B,mBAgBdU,EAhBc,KAgBDC,EAhBC,QAiBmBX,oBAAS,GAjB5B,qBAiBdY,GAjBc,MAiBAC,GAjBA,SAkBOb,oBAAS,GAlBhB,qBAkBdc,GAlBc,MAkBNC,GAlBM,SAoB2Bf,mBAAS,MApBpC,qBAoBdgB,GApBc,MAoBIC,GApBJ,SAqBiBjB,mBAAS,CAAEkB,WAAY,SArBxC,qBAqBdC,GArBc,MAqBDC,GArBC,MAuBfC,GAAYhC,EAAOiC,OAEnBC,GAAgBC,sBAAW,sBAAC,sBAAAxI,EAAA,sDAChC,IACEiH,GAAe,GACfd,EAASsC,eACTtC,EAASuC,YAAeL,KACxBpB,GAAe,GAEfd,EAASwC,YAAcN,KACvBlC,EAASyC,YAAcP,KACvB,MAAOjD,GACP5E,QAAQqI,MAAMzD,GACd6B,GAAe,GAXe,2CAa/B,CAACd,EAAUkC,KAERS,GAAgBN,sBAAW,sBAAC,sBAAAxI,EAAA,sEAE9BQ,QAAQC,IAAI,8BAA8B,GAC1C0G,GAAe,GACfhB,EAAS4C,eAJqB,SAKxB5C,EAAS6C,YAAYX,KALG,OAM9B7H,QAAQC,IAAI,8BAA8B,GAC1C0G,GAAe,GAPe,kDAS9B3G,QAAQqI,MAAR,MACArI,QAAQC,IAAI,8BAA8B,GAC1C0G,GAAe,GAXe,0DAa/B,CAAChB,EAAUkC,KAERY,GAAUT,sBAAW,sBAAC,sBAAAxI,EAAA,sEAExBuH,GAAc,GAFU,SAGlBpB,EACJ+C,YAAQ,CACNC,WAAYxC,EACZyC,mBAAoBf,GACpBgB,OAAQ7B,EACR8B,SAAUnB,MARU,OAWxBZ,GAAc,GAXU,gDAaxB/G,QAAQqI,MAAR,MAbwB,yDAezB,CAAC1C,EAAUQ,EAAI0B,GAAWb,EAAWW,KAElCoB,GAAe,WAAsD,IAArDD,EAAoD,uDAAzC,CAAEpB,WAAY,sBAC7CE,GAAekB,GACfjC,GAAgB,IAGZmC,GAAgBhB,uBAAY,WAChCnB,GAAgB,GAChBe,GAAe,IACXtB,IACFX,EAASsD,eACTlC,GAAc,MAEf,CAACpB,EAAUW,IAER4C,GAAqBlB,sBAAW,sBAAC,gCAAAxI,EAAA,6DAC7B2J,EAAyBtD,EAAzBsD,OAAQrB,EAAiBjC,EAAjBiC,OAAQxE,EAASuC,EAATvC,KADa,SAE/ByE,KAF+B,uBAG/BpC,EAASyD,eAHsB,OAIrCd,KAEA3C,EACE0D,YAAc,CACZF,SACAtB,UAAWC,EACXxE,UAViC,2CAapC,CAACqC,EAAUoC,GAAeO,GAAezC,IAE5CyD,qBAAU,WACRJ,KAGA,IAAMK,EAAsBC,YAAW,CACrCC,KAAM,sBACNC,WAAYC,YAAQ9B,IACpB+B,SAAU,SAAAC,GACRlE,EAASmE,YAAkB,CAAEC,YAAaF,QAIxCG,EAAuBR,YAAW,CACtCC,KAAM,uBACNC,WAAYC,YAAQ9B,IACpB+B,SAAU,SAAAC,GACRlE,EAASmE,YAAkB,CAAEG,aAAcJ,QAIzCK,EAAsBV,YAAW,CACrCC,KAAM,sBACNC,WAAYC,YAAQ9B,IACpB+B,SAAU,SAAAC,GACRlE,EAASmE,YAAkB,CAAEK,YAAaN,QAIxCO,EAAcZ,YAAW,CAC7BC,KAAM,cACNC,WAAYC,YAAQ9B,IACpB+B,SAAU,SAAAC,GACRlE,EAASmE,YAAkB,CAAEO,IAAKR,QAItC,OAAO,WACLN,EAAoBe,MACpBN,EAAqBM,MACrBJ,EAAoBI,MACpBF,EAAYE,SAEb,CAAC3E,EAAUuD,GAAoBrB,KAElCyB,qBAAU,WACRzG,YACEkD,EAAKjD,MAAMN,QAAO,SAAAU,GAAI,MAAkB,SAAdA,EAAKI,SAC/B,KAED,CAACyC,EAAKjD,QAETwG,qBAAU,WACJ9B,IACF+C,aAAa/C,IAGf,IAAMgD,EAAQC,YAAW,WACvB,IAAMC,EAAkBC,IAAOC,MAAMC,SAhKnB,IAgK6C,MACzDzD,IAAelB,EAAQ+D,cACzBU,IAAOC,IAAI1E,EAAQ+D,cAAca,cAAcJ,GAE7CxD,IAAchB,EAAQ6D,aACxBY,IAAOC,IAAI1E,EAAQ6D,aAAae,cAAcJ,GAGlDrD,GAAgBD,GAChBD,EAAeD,KAzKG,KA8KpB,OAFAO,GAAoB+C,GAEb,kBAAMD,aAAa/C,OAEzB,CAACtB,IAEJoD,qBAAU,WACR,IAAMoB,EAAkBC,IAAOC,MAAMC,SAAS,EAAG,WAC3CzD,KAAsB,OAAPlB,QAAO,IAAPA,OAAA,EAAAA,EAAS+D,eAC1BU,IAAOC,IAAP,OAAW1E,QAAX,IAAWA,OAAX,EAAWA,EAAS+D,cAAca,cAAcJ,GAE9CxD,KAAqB,OAAPhB,QAAO,IAAPA,OAAA,EAAAA,EAAS6D,cACzBY,IAAOC,IAAP,OAAW1E,QAAX,IAAWA,OAAX,EAAWA,EAAS6D,aAAae,cAAcJ,GAGnDrD,GAAgBD,GAChBD,EAAeD,KACd,CAAChB,IAEJ,IAAM6E,GAAkB/C,uBAAY,WAClCT,IAAU,GACVyD,IAAQC,UACRR,YAAW,WACTlD,IAAU,GACVyD,IAAQC,YACP,OACF,IAEGC,GAAQ,UAAGhF,EAAQiE,mBAAX,QAA0BjE,EAAQiF,MAE1CC,GAAapD,uBACjB,SAAA9E,GACE,GAAKA,EAAL,CAIA,IA8B0B,IA9BpBmI,EAASnF,EAAQmF,OAAR,gCACcnF,EAAQmF,QACjCC,IAEJ,GAAkB,WAAdpI,EAAKI,KACP,OACE,kBAAC,WAAD,CACEiI,SACE,yBAAKlG,UAAU,gBACb,kBAACmG,EAAA,EAAD,CAAQpG,KAAK,qBAGjB7B,IAAKL,EAAKE,IAEV,kBAACqC,EAAD,CACEgG,OAAQvI,EAAKE,GACbsI,cAAexI,EAAKyI,eACpBC,aAAc1I,EAAKE,GACnByI,gBAAiB3I,EAAK4I,KACtBC,aAAcV,EACdW,gBAAiBnE,GACjBoE,eAAgBf,GAChB9D,aAAcA,GACd2B,aAAcA,GACdmD,OAAQhJ,EAAKgJ,UAMrB,GAAkB,SAAdhJ,EAAKI,KACP,OACE,kBAAC,WAAD,CACEiI,SACE,yBAAKlG,UAAU,gBACb,kBAACmG,EAAA,EAAD,CAAQpG,KAAK,qBAGjB7B,IAAKL,EAAKE,IAEV,kBAACkC,EAAD,CACE6G,UAAWjJ,EAAK4I,KAChB3I,aAAcD,EAAKC,aACnB+H,SAAUA,GACVG,OAAQA,EACRxD,UAAWA,GACXkB,aAAcA,GACdpG,iBAAkBA,IAClByJ,KAAMlJ,EAAKkJ,KACXhJ,GAAIF,EAAKE,GACTiJ,SAAQ,UAAEnJ,EAAKmJ,gBAAP,QAAmB,EAC3BC,WAAU,UAAEpJ,EAAKoJ,kBAAP,QAAqB,EAC/BlF,aAAcA,GACd8E,OAAQhJ,EAAKgJ,aAMvB,CAAC9E,GAAclB,EAAQmF,OAAQxD,GAAWqD,KAG5C,OACE,yBAAK7F,UAAU,aACb,yBACEA,UAAU,aACVkH,MAAO,CACLC,gBAAgB,OAAD,OACbtG,EAAQuG,OAAR,gCAC6BvG,EAAQuG,QACjCC,IAHS,QAOnB,yBAAKrH,UAAU,gBACb,yBACEA,UAAU,UACVkH,MAAO,CACLC,gBAAgB,OAAD,OACbtG,EAAQmF,OAAR,gCAA0CnF,EAAQmF,QAAWC,IADhD,QAMnB,yBAAKjG,UAAU,WACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,YAAY6F,IAEzB,yBAAK7F,UAAU,YACb,uBACEA,UAAU,SACVkH,MAAO,CACLI,MAAOzF,EACH,UACAE,GACA,UACA,SAGLF,EACG,kBACAE,GACA,cACA,iBAIPlB,EAAQmE,IACP,yBAAKhF,UAAU,QACb,uBAAGA,UAAU,SAAb,OACA,2BAAIa,EAAQmE,MAEZ,MAGN,yBACEhF,UAAU,eACVuH,QAAS,kBAAM7D,MACfwD,MAAO,CACLM,QAASzF,GAAe,EAAI,GAC5B0F,OAAQ1F,GAAe,UAAY,WAErC2F,WACG3F,GAA4D,KAA7C,4CAGlB,yBAAKlG,IAAK8L,IAAWC,IAAI,sBACzB,wCAGF,kBAAC,IAAD,CAASC,gBAAgB,UAAUC,OAAO,YAI9C,yBAAK9H,UAAU,eACb,uBAAGA,UAAU,cAAb,SAEF,yBAAKA,UAAU,gBACZ+F,GAAWrF,EAAKqH,YAChBrH,EAAKqH,YAAc,kBAAC,EAAD,CAAShI,KAAK,eACjCW,EAAKjD,MAAMG,IAAImI,KAEjB1E,EACC,kBAAC8E,EAAA,EAAD,CAAQpG,KAAI,kBAAaW,EAAKqG,MAAQ,EAAI,OAAS,OAAvC,eACV,KACHxF,EACC,yBAAKvB,UAAU,uBACb,yBAAKA,UAAU,oBAAoBuH,QAAS5D,KAC5C,yBAAK3D,UAAU,aACZyB,EACC,yBAAKzB,UAAU,qBACb,kBAACmG,EAAA,EAAD,CAAQpG,KAAK,+BAEb,KACJ,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,mBAAf,aAEDiB,EACC,yBAAKjB,UAAU,qBACb,uBAAGA,UAAU,0BAAb,6HAIA,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CACEA,UAAU,oBACVgI,MAAO/G,EACPgH,KAAM,IACNC,QAAQ,UACRC,QAAQ,aAGZ,yBAAKnI,UAAU,yBACb,uBACEoI,KAAI,oBAAenH,GACnBjB,UAAU,wBAFZ,eAMA,kBAAC,IAAD,CAAeD,KAAMkB,EAAgBoH,OAAQ3C,IAC3C,yBAAK1F,UAAU,wBACZiC,GAAS,kBAAoB,mBAMtC,yBAAKjC,UAAU,qBACb,uBAAGA,UAAU,0BAAb,2HAIA,2BACEA,UAAU,kBACVgI,MAAOrG,EACP2G,SAAU,SAAAC,GAAC,OAAI3G,EAAa2G,EAAE/J,OAAOwJ,WAIzC/G,EAIE,KAHF,yBAAKjB,UAAU,mBAAmBuH,QAASnE,IACzC,yBAAKpD,UAAU,oBAAf,eAKN,KACFwI,QAUE,KATF,uBACEJ,KAAK,2BACL5J,OAAO,SACPiK,IAAI,sBACJzI,UAAU,4BAEV,uBAAGA,UAAU,8CACb,uBAAGA,UAAU,iCAAb","file":"static/js/5.dbaf36bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/av1.48bf5c6a.jpg\";","import FileCache from \"browser-file-storage\";\n\nexport const DB_NAME = \"ShockWalletStore\";\n\nexport const init = () =>\n  new Promise((resolve, reject) => {\n    FileCache.init(DB_NAME)\n      .then(() => {\n        console.log(\"File cache initialized!\");\n        return FileCache.persist();\n      })\n      .then(status => {\n        if (status.persistent) {\n          resolve(status);\n        } else {\n          reject(status);\n        }\n      });\n  });\n\nexport const getCachedFile = async fileName => {\n  try {\n    if (!FileCache._init) {\n      await init();\n    }\n\n    const cachedFile = await FileCache.load(fileName);\n    return cachedFile.createURL();\n  } catch (err) {\n    console.warn(err);\n    return false;\n  }\n};\n\nexport const renderCachedFile = (fileURL, selector) => {\n  const elements = document.querySelectorAll(selector);\n  if (elements && elements.length) {\n    elements.forEach(element => {\n      element.src = fileURL;\n      element.muted = true;\n      element.autoplay = true;\n    });\n  }\n  return !!elements && !!elements.length;\n};\n\nexport const saveFile = (fileName, buffer) => {\n  return FileCache.save(fileName, buffer);\n};\n","export const runSerial = tasks => {\n  let result = Promise.resolve();\n  tasks.forEach(task => {\n    result = result.then(() => task());\n  });\n  return result;\n};\n","import WebTorrent from \"webtorrent\";\nimport { getCachedFile, renderCachedFile, saveFile } from \"./Cache\";\nimport { runSerial } from \"./Promise\";\n\nconst supportedFileTypes = {\n  \"video/embedded\": {\n    formats: [\"mp4\", \"webm\"],\n    element: \"video\",\n    options: {\n      autoplay: true,\n      muted: true\n    }\n  },\n  \"image/embedded\": {\n    formats: [\"jpg\", \"png\", \"webp\", \"jpeg\"],\n    element: \"img\",\n    options: {}\n  }\n};\n\nconst _getFileType = file => {\n  const extension = file.name?.split(\".\")?.slice(-1)[0];\n  const supportedFileType = Object.entries(\n    supportedFileTypes\n  ).filter(([type, options]) => options.formats.includes(extension))[0];\n\n  if (supportedFileType) {\n    const [name, fileType] = supportedFileType;\n    return {\n      name,\n      ...fileType\n    };\n  }\n\n  return null;\n};\n\nexport const webTorrentClient = new WebTorrent();\n\nexport const attachMedia = (posts = [], torrentMode = true) => {\n  const torrentTasks = posts\n    .map(post => {\n      const { contentItems, id } = post;\n      return Object.entries(contentItems)\n        .filter(([key, item]) => supportedFileTypes[item.type])\n        .map(([key, item]) => () =>\n          new Promise(resolve => {\n            const torrentExists = webTorrentClient.get(item.magnetURI);\n\n            if (torrentExists) {\n              resolve(true);\n              return;\n            }\n\n            webTorrentClient.add(item.magnetURI, async torrent => {\n              // Proceed to the next torrent in queue\n              resolve(true);\n\n              const files = torrent.files.filter(file => {\n                const extension = file.name?.split(\".\")?.slice(-1)[0];\n                const supportedFileType = Object.entries(\n                  supportedFileTypes\n                ).filter(([type, options]) =>\n                  options.formats.includes(extension)\n                )[0];\n                if (supportedFileType) {\n                  const [, fileType] = supportedFileType;\n                  const matched = fileType.formats.includes(extension);\n                  return matched;\n                }\n                return false;\n              });\n\n              files.map(async file => {\n                const fileType = _getFileType(file);\n\n                if (!fileType) {\n                  return;\n                }\n\n                const fileName = `${id}-${key}-${file.name}`;\n\n                const element = fileType.element;\n                const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n                const cachedFile = await getCachedFile(fileName);\n\n                if (cachedFile) {\n                  const torrent = webTorrentClient.get(item.magnetURI);\n\n                  if (torrent) {\n                    torrent.destroy();\n                  }\n\n                  renderCachedFile(cachedFile, target);\n                  return;\n                }\n\n                const torrentElements = document.querySelectorAll(target);\n                console.log(\"Torrent Elements:\", torrentElements);\n                torrentElements.forEach(torrentElement => {\n                  const contentURL = decodeURIComponent(\n                    item.magnetURI.replace(/.*(ws=)/gi, \"\")\n                  );\n                  const [compatibleURL] = fileType.formats.filter(format =>\n                    contentURL\n                      .toLowerCase()\n                      .endsWith(`.${format.toLowerCase()}`)\n                  );\n\n                  if (torrentMode || !compatibleURL) {\n                    file.renderTo(torrentElement, fileType.options);\n                    return;\n                  }\n\n                  torrentElement.setAttribute(\"src\", contentURL);\n                });\n              });\n\n              torrent.on(\"done\", () => {\n                files.map(file => {\n                  const fileType = _getFileType(file);\n                  const fileName = `${id}-${key}-${file.name}`;\n                  const element = fileType.element;\n                  const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n\n                  file.getBlob(async (err, blob) => {\n                    if (err) {\n                      console.warn(err);\n                      return;\n                    }\n\n                    console.log(\"Caching loaded file...\", fileName, blob);\n                    await saveFile(fileName, blob);\n                    const element = document.querySelector(target);\n                    if (element.dataset.played === \"false\") {\n                      const cachedFile = await getCachedFile(fileName);\n                      renderCachedFile(cachedFile, target);\n                    }\n                  });\n                });\n              });\n            });\n          })\n        );\n    })\n    .reduce((torrents, contentItems) => [...torrents, ...contentItems], []);\n\n  runSerial(torrentTasks);\n};\n","module.exports = __webpack_public_path__ + \"static/media/banner-bg.f59337b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lightning-logo.ea3bd789.svg\";","import React from \"react\";\nimport \"./css/index.css\";\n\nconst Divider = ({ text }) => {\n  return (\n    <div className=\"divider-container\">\n      <div className=\"dash\" />\n      <p className=\"divider-text\">{text}</p>\n      <div className=\"dash\" />\n    </div>\n  );\n};\n\nexport default Divider;\n","import React, { useEffect, useState, useCallback, Suspense } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport QRCode from \"react-qr-code\";\nimport Moment from \"moment\";\nimport CopyClipboard from \"react-copy-to-clipboard\";\nimport { isIOS } from \"react-device-detect\";\n\nimport {\n  getUserWall,\n  resetUserWall,\n  resetUserData,\n  getUserProfile,\n  getUserAvatar,\n  updateUserProfile,\n  getUserHeader,\n  getPinnedPost\n} from \"../../actions/UserActions\";\nimport { generateGunPair } from \"../../actions/AuthActions\";\nimport { payUser, resetPaymentRequest } from \"../../actions/TransactionActions\";\nimport { listenPath, gunUser } from \"../../utils/Gun\";\nimport { webTorrentClient, attachMedia } from \"../../utils/Torrents\";\n\nimport Loader from \"../../common/Loader\";\nimport Divider from \"../../common/Divider\";\n\n// Assets\nimport defaultBanner from \"../../images/banner-bg.jpg\";\nimport av1 from \"../../images/av1.jpg\";\nimport shockLogo from \"../../images/lightning-logo.svg\";\nimport \"./css/index.css\";\nimport Tooltip from \"react-tooltip\";\n\nconst Post = React.lazy(() => import(\"../../common/Post\"));\nconst SharedPost = React.lazy(() => import(\"../../common/Post/SharedPost\"));\n\nconst ONLINE_INTERVAL = 1 * 30 * 1000;\n\nconst UserPage = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const wall = useSelector(({ user }) => user.wall);\n  const profile = useSelector(({ user }) => user.profile);\n  const me = useSelector(({ auth }) => auth.pair);\n  const paymentRequest = useSelector(\n    ({ transaction }) => transaction.paymentRequest\n  );\n  // Reserved for future use\n  // eslint-disable-next-line no-unused-vars\n  const [userLoading, setUserLoading] = useState(true);\n  const [wallLoading, setWallLoading] = useState(true);\n  const [tipModalOpen, setTipModalOpen] = useState(false);\n  const [tipLoading, setTipLoading] = useState(false);\n  const [tipAmount, setTipAmount] = useState(10);\n  const [isOnlineApp, setIsOnlineApp] = useState(false);\n  const [isOnlineNode, setIsOnlineNode] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  const [onlineCheckTimer, setOnlineCheckTimer] = useState(null);\n  const [tipMetadata, setTipMetadata] = useState({ targetType: \"user\" });\n\n  const publicKey = params.userId;\n\n  const fetchUserData = useCallback(async () => {\n    try {\n      setUserLoading(true);\n      dispatch(resetUserData());\n      dispatch(getUserProfile(publicKey));\n      setUserLoading(false);\n      // Load user avatar in the background\n      dispatch(getUserHeader(publicKey));\n      dispatch(getUserAvatar(publicKey));\n    } catch (err) {\n      console.error(err);\n      setUserLoading(false);\n    }\n  }, [dispatch, publicKey]);\n\n  const fetchUserWall = useCallback(async () => {\n    try {\n      console.log(\"Setting Loading status to:\", true);\n      setWallLoading(true);\n      dispatch(resetUserWall());\n      await dispatch(getUserWall(publicKey));\n      console.log(\"Setting Loading status to:\", false);\n      setWallLoading(false);\n    } catch (err) {\n      console.error(err);\n      console.log(\"Setting Loading status to:\", false);\n      setWallLoading(false);\n    }\n  }, [dispatch, publicKey]);\n\n  const sendTip = useCallback(async () => {\n    try {\n      setTipLoading(true);\n      await dispatch(\n        payUser({\n          senderPair: me,\n          recipientPublicKey: publicKey,\n          amount: tipAmount,\n          metadata: tipMetadata\n        })\n      );\n      setTipLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }, [dispatch, me, publicKey, tipAmount, tipMetadata]);\n\n  const openTipModal = (metadata = { targetType: \"spontaneousPayment\" }) => {\n    setTipMetadata(metadata);\n    setTipModalOpen(true);\n  };\n\n  const closeTipModal = useCallback(() => {\n    setTipModalOpen(false);\n    setTipMetadata({});\n    if (paymentRequest) {\n      dispatch(resetPaymentRequest());\n      setTipLoading(false);\n    }\n  }, [dispatch, paymentRequest]);\n\n  const initializeUserWall = useCallback(async () => {\n    const { postId, userId, type } = params;\n    await fetchUserData();\n    await dispatch(generateGunPair());\n    fetchUserWall();\n\n    dispatch(\n      getPinnedPost({\n        postId,\n        publicKey: userId,\n        type\n      })\n    );\n  }, [dispatch, fetchUserData, fetchUserWall, params]);\n\n  useEffect(() => {\n    initializeUserWall();\n\n    // Subscribe for updates\n    const lastSeenAppListener = listenPath({\n      path: \"Profile/lastSeenApp\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        dispatch(updateUserProfile({ lastSeenApp: event }));\n      }\n    });\n\n    const lastSeenNodeListener = listenPath({\n      path: \"Profile/lastSeenNode\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        dispatch(updateUserProfile({ lastSeenNode: event }));\n      }\n    });\n\n    const displayNameListener = listenPath({\n      path: \"Profile/displayName\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        dispatch(updateUserProfile({ displayName: event }));\n      }\n    });\n\n    const bioListener = listenPath({\n      path: \"Profile/bio\",\n      gunPointer: gunUser(publicKey),\n      callback: event => {\n        dispatch(updateUserProfile({ bio: event }));\n      }\n    });\n\n    return () => {\n      lastSeenAppListener.off();\n      lastSeenNodeListener.off();\n      displayNameListener.off();\n      bioListener.off();\n    };\n  }, [dispatch, initializeUserWall, publicKey]);\n\n  useEffect(() => {\n    attachMedia(\n      wall.posts.filter(post => post.type === \"post\"),\n      false\n    );\n  }, [wall.posts]);\n\n  useEffect(() => {\n    if (onlineCheckTimer) {\n      clearTimeout(onlineCheckTimer);\n    }\n\n    const timer = setTimeout(() => {\n      const onlineThreshold = Moment.utc().subtract(ONLINE_INTERVAL, \"ms\");\n      const isOnlineNode = profile.lastSeenNode\n        ? Moment.utc(profile.lastSeenNode).isSameOrAfter(onlineThreshold)\n        : false;\n      const isOnlineApp = profile.lastSeenApp\n        ? Moment.utc(profile.lastSeenApp).isSameOrAfter(onlineThreshold)\n        : false;\n\n      setIsOnlineNode(isOnlineNode);\n      setIsOnlineApp(isOnlineApp);\n    }, ONLINE_INTERVAL);\n\n    setOnlineCheckTimer(timer);\n\n    return () => clearTimeout(onlineCheckTimer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [profile]);\n\n  useEffect(() => {\n    const onlineThreshold = Moment.utc().subtract(1, \"minutes\");\n    const isOnlineNode = profile?.lastSeenNode\n      ? Moment.utc(profile?.lastSeenNode).isSameOrAfter(onlineThreshold)\n      : false;\n    const isOnlineApp = profile?.lastSeenApp\n      ? Moment.utc(profile?.lastSeenApp).isSameOrAfter(onlineThreshold)\n      : false;\n\n    setIsOnlineNode(isOnlineNode);\n    setIsOnlineApp(isOnlineApp);\n  }, [profile]);\n\n  const setCopiedStatus = useCallback(() => {\n    setCopied(true);\n    Tooltip.rebuild();\n    setTimeout(() => {\n      setCopied(false);\n      Tooltip.rebuild();\n    }, 500);\n  }, []);\n\n  const username = profile.displayName ?? profile.alias;\n\n  const renderPost = useCallback(\n    post => {\n      if (!post) {\n        return;\n      }\n\n      const avatar = profile.avatar\n        ? `data:image/png;base64,${profile.avatar}`\n        : av1;\n\n      if (post.type === \"shared\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <SharedPost\n              postID={post.id}\n              postPublicKey={post.originalAuthor}\n              sharedPostId={post.id}\n              sharedTimestamp={post.date}\n              sharerAvatar={avatar}\n              sharerPublicKey={publicKey}\n              sharerUsername={username}\n              isOnlineNode={isOnlineNode}\n              openTipModal={openTipModal}\n              pinned={post.pinned}\n            />\n          </Suspense>\n        );\n      }\n\n      if (post.type === \"post\") {\n        return (\n          <Suspense\n            fallback={\n              <div className=\"post-loading\">\n                <Loader text=\"Loading Post...\" />\n              </div>\n            }\n            key={post.id}\n          >\n            <Post\n              timestamp={post.date}\n              contentItems={post.contentItems}\n              username={username}\n              avatar={avatar}\n              publicKey={publicKey}\n              openTipModal={openTipModal}\n              webTorrentClient={webTorrentClient}\n              page={post.page}\n              id={post.id}\n              tipValue={post.tipValue ?? 0}\n              tipCounter={post.tipCounter ?? 0}\n              isOnlineNode={isOnlineNode}\n              pinned={post.pinned}\n            />\n          </Suspense>\n        );\n      }\n    },\n    [isOnlineNode, profile.avatar, publicKey, username]\n  );\n\n  return (\n    <div className=\"user-page\">\n      <div\n        className=\"top-banner\"\n        style={{\n          backgroundImage: `url(${\n            profile.header\n              ? `data:image/png;base64,${profile.header}`\n              : defaultBanner\n          })`\n        }}\n      ></div>\n      <div className=\"user-details\">\n        <div\n          className=\"main-av\"\n          style={{\n            backgroundImage: `url(${\n              profile.avatar ? `data:image/png;base64,${profile.avatar}` : av1\n            })`\n          }}\n        ></div>\n\n        <div className=\"details\">\n          <div className=\"user-info\">\n            <p className=\"username\">{username}</p>\n\n            <div className=\"activity\">\n              <p\n                className=\"status\"\n                style={{\n                  color: isOnlineApp\n                    ? \"#01a33d\"\n                    : isOnlineNode\n                    ? \"#f2a900\"\n                    : \"#888\"\n                }}\n              >\n                {isOnlineApp\n                  ? \"Active Recently\"\n                  : isOnlineNode\n                  ? \"Node Online\"\n                  : \"Node Offline\"}\n              </p>\n            </div>\n\n            {profile.bio ? (\n              <div className=\"desc\">\n                <p className=\"title\">Bio</p>\n                <p>{profile.bio}</p>\n              </div>\n            ) : null}\n          </div>\n\n          <div\n            className=\"send-tip-btn\"\n            onClick={() => openTipModal()}\n            style={{\n              opacity: isOnlineNode ? 1 : 0.5,\n              cursor: isOnlineNode ? \"pointer\" : \"default\"\n            }}\n            data-tip={\n              !isOnlineNode ? \"You can only tip users with online nodes\" : null\n            }\n          >\n            <img src={shockLogo} alt=\"Bitcoin Lightning\" />\n            <p>Send Tip</p>\n          </div>\n\n          <Tooltip backgroundColor=\"#3a4d67\" effect=\"solid\" />\n        </div>\n      </div>\n\n      <div className=\"tabs-holder\">\n        <p className=\"tab active\">Feed</p>\n      </div>\n      <div className=\"posts-holder\">\n        {renderPost(wall.pinnedPost)}\n        {wall.pinnedPost && <Divider text=\"More Posts\" />}\n        {wall.posts.map(renderPost)}\n      </div>\n      {wallLoading ? (\n        <Loader text={`Loading ${wall.page >= 0 ? \"More\" : \"Wall\"} Posts...`} />\n      ) : null}\n      {tipModalOpen ? (\n        <div className=\"tip-modal-container\">\n          <div className=\"tip-modal-overlay\" onClick={closeTipModal}></div>\n          <div className=\"tip-modal\">\n            {tipLoading ? (\n              <div className=\"tip-modal-loading\">\n                <Loader text=\"Submitting Tip Request...\" />\n              </div>\n            ) : null}\n            <div className=\"tip-modal-head\">\n              <div className=\"tip-modal-title\">Send Tip</div>\n            </div>\n            {paymentRequest ? (\n              <div className=\"tip-modal-content\">\n                <p className=\"tip-modal-instructions\">\n                  We've successfully generated an invoice for you to tip, please\n                  scan the QR Code below using a Lightning wallet to pay it!\n                </p>\n                <div className=\"tip-modal-qr-code-container\">\n                  <QRCode\n                    className=\"tip-modal-qr-code\"\n                    value={paymentRequest}\n                    size={210}\n                    bgColor=\"#4db1ff\"\n                    fgColor=\"#1b2129\"\n                  />\n                </div>\n                <div className=\"tip-modal-action-btns\">\n                  <a\n                    href={`lightning:${paymentRequest}`}\n                    className=\"tip-modal-action-btn\"\n                  >\n                    PAY INVOICE\n                  </a>\n                  <CopyClipboard text={paymentRequest} onCopy={setCopiedStatus}>\n                    <div className=\"tip-modal-action-btn\">\n                      {copied ? \"INVOICE COPIED!\" : \"COPY INVOICE\"}\n                    </div>\n                  </CopyClipboard>\n                </div>\n              </div>\n            ) : (\n              <div className=\"tip-modal-content\">\n                <p className=\"tip-modal-instructions\">\n                  Please specify the amount of sats you'd like to tip this user\n                  with below and we'll generate an invoice for you to scan.\n                </p>\n                <input\n                  className=\"tip-modal-input\"\n                  value={tipAmount}\n                  onChange={e => setTipAmount(e.target.value)}\n                />\n              </div>\n            )}\n            {!paymentRequest ? (\n              <div className=\"tip-modal-footer\" onClick={sendTip}>\n                <div className=\"tip-modal-submit\">SEND TIP</div>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {!isIOS ? (\n        <a\n          href=\"https://wallet.shock.pub\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          className=\"download-shockwallet-btn\"\n        >\n          <i className=\"download-shockwallet-btn-icon fas fa-user\"></i>\n          <p className=\"download-shockwallet-btn-text\">Create a Shockwallet</p>\n        </a>\n      ) : null}\n    </div>\n  );\n};\n\nexport default UserPage;\n"],"sourceRoot":""}